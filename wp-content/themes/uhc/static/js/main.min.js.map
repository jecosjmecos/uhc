{"version":3,"sources":["js/main.js"],"names":["objectFitImages","OFI","propRegex","testImg","Image","style","object-position","supportsObjectFit","supportsObjectPosition","supportsOFI","supportsCurrentSrc","currentSrc","nativeGetAttribute","getAttribute","nativeSetAttribute","setAttribute","autoModeEnabled","setPlaceholder","img","width","height","placeholder","call","onImageReady","callback","naturalWidth","setTimeout","fixOne","el","parsed","getComputedStyle","fontFamily","props","exec","getStyle","ofi","skipTest","srcset","src","naturalHeight","descriptors","get","prop","set","value","Object","defineProperty","ss","keepSrcUsable","err","window","console","warn","picturefill","pf","_","ns","evaled","fillImg","reselect","curSrc","supported","polyfillCurrentSrc","backgroundImage","replace","backgroundPosition","backgroundRepeat","backgroundOrigin","test","backgroundSize","fix","imgs","opts","startAutoMode","document","getElementsByTagName","querySelectorAll","i","length","body","addEventListener","e","target","tagName","watchMQ","bind","getOfiImageMaybe","name","HTMLImageElement","prototype","this","String","hijackAttributes","o","define","amd","exports","t","bodyScrollLock","passive","removeEventListener","l","c","some","options","allowTouchMove","d","event","touches","preventDefault","n","v","paddingRight","s","overflow","navigator","platform","maxTouchPoints","a","u","disableBodyScroll","r","targetElement","concat","Array","isArray","from","ontouchstart","targetTouches","clientY","ontouchmove","scrollTop","scrollHeight","clientHeight","stopPropagation","reserveScrollBarGap","innerWidth","documentElement","clientWidth","error","clearAllBodyScrollLocks","forEach","enableBodyScroll","filter","Swiper","isObject$1","obj","constructor","extend$1","keys","key","ssrDocument","[object Object]","activeElement","nodeName","querySelector","getElementById","createEvent","createElement","children","childNodes","createElementNS","importNode","location","hash","host","hostname","href","origin","pathname","protocol","search","getDocument","doc","ssrWindow","userAgent","history","CustomEvent","getPropertyValue","screen","matchMedia","requestAnimationFrame","id","clearTimeout","getWindow","win","classesToTokens","classes","trim","split","nextTick","delay","now","Date","getTranslate","axis","matrix","curTransform","transformMatrix","curStyle","currentStyle","getComputedStyle$1","WebKitCSSMatrix","transform","webkitTransform","map","join","MozTransform","OTransform","MsTransform","msTransform","toString","m41","parseFloat","m42","isObject","slice","isNode","node","HTMLElement","nodeType","extend","to","arguments","undefined","noExtend","nextSource","keysArray","indexOf","nextIndex","len","nextKey","desc","getOwnPropertyDescriptor","enumerable","__swiper__","setCSSProperty","varName","varValue","setProperty","animateCSSModeScroll","_ref","swiper","targetPosition","side","startPosition","translate","time","startTime","duration","params","speed","wrapperEl","scrollSnapType","cancelAnimationFrame","cssModeFrameID","dir","isOutOfBound","current","animate","getTime","progress","Math","max","min","easeProgress","cos","PI","currentPosition","scrollTo","getSlideTransformEl","slideEl","shadowRoot","elementChildren","element","selector","HTMLSlotElement","push","assignedElements","matches","showWarning","text","tag","classList","add","elementOffset","box","getBoundingClientRect","clientTop","clientLeft","scrollY","scrollLeft","scrollX","top","left","elementStyle","elementIndex","child","previousSibling","elementParents","parents","parent","parentElement","elementTransitionEnd","fireCallBack","elementOuterSize","size","includeMargins","offsetWidth","makeElementsArray","getRotateFix","abs","browser","need3dFix","support","deviceCached","getSupport","smoothScroll","touch","DocumentTouch","calcSupport","getDevice","overrides","_temp","ua","device","ios","android","screenWidth","screenHeight","match","ipad","ipod","iphone","windows","macos","os","calcDevice","getBrowser","needPerspectiveFix","isSafari","toLowerCase","includes","major","minor","num","Number","isWebView","isSafariBrowser","calcBrowser","eventsEmitter","events","handler","priority","self","eventsListeners","destroyed","method","onceHandler","off","__emitterProxy","_len","args","_key","apply","on","eventsAnyListeners","index","splice","eventHandler","data","context","_len2","_key2","unshift","toggleSlideClasses$1","condition","className","contains","remove","toggleSlideClasses","processLazyPreloader","imageEl","closest","isElement","slideClass","lazyEl","lazyPreloaderClass","unlazy","slides","removeAttribute","preload","amount","lazyPreloadPrevNext","slidesPerView","slidesPerViewDynamic","ceil","activeIndex","grid","rows","activeColumn","preloadColumns","column","slideIndexLastInView","rewind","loop","realIndex","transitionEmit","runCallbacks","direction","step","previousIndex","emit","preventEdgeSwipe","startX","edgeSwipeDetection","edgeSwipeThreshold","onTouchStart","originalEvent","touchEventsData","type","pointerId","touchId","identifier","pageX","enabled","simulateTouch","pointerType","animating","preventInteractionOnTransition","cssMode","loopFix","targetEl","touchEventsTarget","isChild","elementIsChildOf","which","button","isTouched","isMoved","swipingClassHasValue","noSwipingClass","eventPath","composedPath","path","noSwipingSelector","isTargetShadow","noSwiping","base","__closestFrom","assignedSlot","found","getRootNode","closestElement","allowClick","swipeHandler","currentX","currentY","pageY","startY","assign","allowTouchCallbacks","isScrolling","startMoving","touchStartTime","updateSize","swipeDirection","threshold","allowThresholdMove","focusableElements","blur","shouldPreventDefault","touchStartPreventDefault","touchStartForcePreventDefault","isContentEditable","freeMode","onTouchMove","rtlTranslate","rtl","targetTouch","changedTouches","preventedByNestedSwiper","touchReleaseOnEdges","isVertical","maxTranslate","minTranslate","previousX","previousY","diffX","diffY","sqrt","touchAngle","isHorizontal","atan2","preventTouchMoveFromPointerMove","cancelable","touchMoveStopPropagation","nested","diff","touchesDiff","oneWayMovement","touchRatio","prevTouchesDirection","touchesDirection","isLoop","allowLoopFix","allowSlideNext","allowSlidePrev","startTranslate","setTransition","evt","bubbles","detail","bySwiperTouchMove","dispatchEvent","allowMomentumBounce","grabCursor","setGrabCursor","currentTranslate","loopSwapReset","disableParentSwiper","resistanceRatio","centeredSlides","slidesSizesGrid","spaceBetween","setTranslate","activeSlideIndex","resistance","followFinger","watchSlidesProgress","updateActiveIndex","updateSlidesClasses","updateProgress","onTouchEnd","slidesGrid","touchEndTime","timeDiff","pathTree","updateClickedSlide","lastClickTime","currentPos","swipeToLast","stopIndex","groupSize","slidesPerGroupSkip","slidesPerGroup","increment","rewindFirstIndex","rewindLastIndex","isBeginning","virtual","isEnd","ratio","longSwipesMs","longSwipes","slideTo","longSwipesRatio","shortSwipes","navigation","nextEl","prevEl","onResize","breakpoints","setBreakpoint","snapGrid","isVirtual","updateSlides","isVirtualLoop","slideToLoop","autoplay","running","paused","resizeTimeout","resume","watchOverflow","checkOverflow","onClick","preventClicks","preventClicksPropagation","stopImmediatePropagation","onScroll","newProgress","previousTranslate","translatesDiff","onLoad","autoHeight","update","onDocumentTouchStart","documentTouchHandlerProceeded","touchAction","capture","domMethod","swiperMethod","updateOnWindowResize","isGridEnabled","defaults","init","swiperElementNodeName","initialSlide","resizeObserver","createElements","eventsPrefix","url","setWrapperSize","virtualTranslate","effect","breakpointsBase","slidesPerGroupAuto","centeredSlidesBounds","slidesOffsetBefore","slidesOffsetAfter","normalizeSlideIndex","centerInsufficientSlides","roundLengths","uniqueNavElements","slideToClickedSlide","loopAddBlankSlides","loopAdditionalSlides","loopPreventsSliding","passiveListeners","maxBackfaceHiddenSlides","containerModifierClass","slideBlankClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","wrapperClass","runCallbacksOnInit","_emitClasses","moduleExtendParams","allModulesParams","moduleParamName","moduleParams","auto","prototypes","parseInt","isNaN","getDirectionPropertyValue","label","getDirectionLabel","slidesEl","swiperSize","wrongRTL","previousSlidesLength","slidesLength","offsetBefore","offsetAfter","previousSnapGridLength","previousSlidesGridLength","slidePosition","prevSlideSize","virtualSize","marginLeft","marginRight","marginBottom","marginTop","gridEnabled","slideSize","initSlides","unsetSlides","shouldResetSlideSize","slide","updateSlide","slideStyles","currentTransform","currentWebKitTransform","paddingLeft","boxSizing","floor","swiperSlideSize","updateWrapperSize","newSlidesGrid","slidesGridItem","groups","slidesBefore","slidesAfter","slideIndex","allSlidesSize","slideSizeValue","maxSnap","snap","offsetSize","allSlidesOffset","snapIndex","addToSnapGrid","addToSlidesGrid","updateSlidesOffset","backFaceHiddenClass","hasClassBackfaceClassAdded","updateAutoHeight","activeSlides","newHeight","getSlideByIndex","getSlideIndexByData","visibleSlides","offsetHeight","minusOffset","offsetLeft","offsetTop","swiperSlideOffset","cssOverflowAdjustment","updateSlidesProgress","offsetCenter","visibleSlidesIndexes","slideOffset","slideProgress","originalSlideProgress","slideBefore","slideAfter","isFullyVisible","isVisible","originalProgress","multiplier","progressLoop","wasBeginning","wasEnd","isBeginningRounded","isEndRounded","firstSlideIndex","lastSlideIndex","firstSlideTranslate","lastSlideTranslate","translateMax","translateAbs","getFilteredSlide","activeSlide","prevSlide","nextSlide","nextEls","nextElementSibling","next","elementNextAll","prevEls","previousElementSibling","prev","elementPrevAll","emitSlidesClasses","newActiveIndex","previousRealIndex","previousSnapIndex","getVirtualRealIndex","aIndex","getActiveIndexByTranslate","skip","firstSlideInColumn","initialized","pathEl","slideFound","clickedSlide","clickedIndex","byController","x","y","translateTo","translateBounds","internal","newTranslate","isH","behavior","onTranslateToWrapperTransitionEnd","transition","transitionDuration","transitionDelay","transitionStart","transitionEnd","initial","normalizedTranslate","normalizedGrid","normalizedGridNext","_immediateVirtual","_cssModeVirtualInitialSet","onSlideToWrapperTransitionEnd","newIndex","targetSlideIndex","cols","needLoopFix","slideRealIndex","slideNext","perGroup","_clientLeft","slidePrev","normalize","val","normalizedSnapGrid","prevSnap","prevSnapIndex","prevIndex","lastIndex","slideReset","slideToClosest","currentSnap","slideToIndex","slideSelector","loopedSlides","getSlideIndex","loopCreate","shouldFillGroup","shouldFillGrid","addBlankSlides","amountOfSlides","append","recalcSlides","byMousewheel","fill","prependSlidesIndexes","appendSlidesIndexes","isNext","isPrev","slidesPrepended","slidesAppended","activeColIndexWithShift","colIndexToPrepend","__preventObserver__","swiperLoopMoveDOM","prepend","currentSlideTranslate","shift","controller","control","loopParams","loopDestroy","newSlidesOrder","swiperSlideIndex","moving","isLocked","cursor","unsetGrabCursor","attachEvents","detachEvents","breakpoint","getBreakpoint","currentBreakpoint","breakpointParams","originalParams","wasMultiRow","isMultiRow","wasGrabCursor","isGrabCursor","wasEnabled","emitContainerClasses","wasModuleEnabled","isModuleEnabled","disable","enable","directionChanged","needsReLoop","wasLoop","changeDirection","isEnabled","hasLoop","containerEl","currentHeight","innerHeight","points","point","minRatio","substr","sort","b","wasLocked","lastSlideRightEdge","addClasses","classNames","suffixes","entries","prefix","resultClasses","item","prepareClasses","free-mode","autoheight","grid-column","css-mode","centered","watch-progress","removeClasses","extendedDefaults","swipers","newParams","modules","__modules__","mod","extendParams","once","swiperParams","passedParams","eventName","onAny","velocity","trunc","clickTimeout","velocities","imagesToLoad","imagesLoaded","property","margin-top","margin-bottom ","margin-left","margin-right","padding-left","padding-right","cls","updates","getSlideClasses","view","exact","spv","breakLoop","translateValue","translated","complete","newDirection","needUpdate","currentDirection","mounted","parentNode","toUpperCase","getWrapperSelector","getWrapper","slideSlots","hostEl","mount","lazyElements","deleteInstance","cleanStyles","object","deleteProps","newDefaults","module","m","installModule","createElementIfNotDefined","checkProps","classesToSelector","appendSlide","appendElement","tempDOM","innerHTML","observer","prependSlide","prependElement","addSlide","activeIndexBuffer","baseLength","slidesBuffer","currentSlide","removeSlide","slidesIndexes","indexToRemove","removeAllSlides","effectInit","overwriteParams","perspective","recreateShadows","getEffectParams","requireUpdateOnVirtual","overwriteParamsResult","_s","slideShadows","shadowEl","effectTarget","effectParams","transformEl","backfaceVisibility","effectVirtualTransitionEnd","transformElements","allSlides","transitionEndTarget","eventTriggered","getSlide","createShadow","suffix","shadowClass","shadowContainer","prototypeGroup","protoMethod","use","animationFrame","resizeHandler","orientationChangeHandler","ResizeObserver","newWidth","_ref2","contentBoxSize","contentRect","inlineSize","blockSize","observe","unobserve","observers","attach","MutationObserver","WebkitMutationObserver","mutations","observerUpdate","attributes","childList","characterData","observeParents","observeSlideChildren","containerParents","disconnect","cssModeTimeout","cache","renderSlide","renderExternal","renderExternalUpdate","addSlidesBefore","addSlidesAfter","offset","force","beforeInit","previousFrom","previousTo","previousSlidesGrid","previousOffset","offsetProp","onRendered","slidesToRender","prependIndexes","appendIndexes","loopFrom","loopTo","domSlidesAssigned","numberOfNewSlides","newCache","cachedIndex","cachedEl","cachedElIndex","handle","kc","keyCode","charCode","pageUpDown","keyboard","isPageUp","isPageDown","isArrowLeft","isArrowRight","isArrowUp","isArrowDown","shiftKey","altKey","ctrlKey","metaKey","onlyInViewport","inView","swiperWidth","swiperHeight","windowWidth","windowHeight","swiperOffset","swiperCoord","returnValue","timeout","mousewheel","releaseOnEdges","invert","forceToAxis","sensitivity","eventsTarget","thresholdDelta","thresholdTime","noMousewheelClass","lastEventBeforeSnap","lastScrollTime","recentWheelEvents","handleMouseEnter","mouseEntered","handleMouseLeave","animateSlider","newEvent","delta","raw","targetElContainsTarget","rtlFactor","sX","sY","pX","pY","wheelDelta","wheelDeltaY","wheelDeltaX","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","positions","sign","ignoreWheelEvents","position","sticky","prevEvent","firstEvent","snapToThreshold","autoplayDisableOnInteraction","stop","releaseScroll","getEl","res","toggleEl","disabled","subEl","disabledClass","lockClass","onPrevClick","onNextClick","initButton","destroy","destroyButton","hideOnClick","hiddenClass","navigationDisabledClass","targetIsButton","find","pagination","clickable","isHidden","toggle","pfx","bulletSize","bulletElement","renderBullet","renderProgressbar","renderFraction","renderCustom","progressbarOpposite","dynamicBullets","dynamicMainBullets","formatFractionCurrent","number","formatFractionTotal","bulletClass","bulletActiveClass","modifierClass","currentClass","totalClass","progressbarFillClass","progressbarOppositeClass","clickableClass","horizontalClass","verticalClass","paginationDisabledClass","bullets","dynamicBulletIndex","isPaginationDisabled","setSideBullets","bulletEl","onBulletClick","moveDirection","total","firstIndex","midIndex","classesToRemove","flat","bullet","bulletIndex","firstDisplayedBullet","lastDisplayedBullet","dynamicBulletsLength","bulletsOffset","subElIndex","fractionEl","textContent","totalEl","progressbarDirection","scale","scaleX","scaleY","progressEl","render","paginationHTML","numberOfBullets","dragStartPos","dragSize","trackSize","divider","dragTimeout","scrollbar","dragEl","newSize","newPos","hide","opacity","display","getPointerPosition","clientX","setDragPosition","positionRatio","onDragStart","onDragMove","onDragEnd","snapOnRelease","activeListener","passiveListener","eventMethod","swiperEl","dragClass","draggable","scrollbarDisabledClass","parallax","elementsSelector","setTransform","p","rotate","currentOpacity","elements","_swiper","parallaxEl","parallaxDuration","zoom","limitToOriginalSize","maxRatio","containerClass","zoomedSlideClass","fakeGestureTouched","fakeGestureMoved","currentScale","isScaling","evCache","gesture","originX","originY","slideWidth","slideHeight","imageWrapEl","image","minX","minY","maxX","maxY","touchesStart","touchesCurrent","prevPositionX","prevPositionY","prevTime","allowTouchMoveTimeout","getDistanceBetweenTouches","x1","y1","x2","y2","getMaxRatio","imageMaxRatio","eventWithinSlide","onGestureStart","scaleStart","getScaleOrigin","onGestureChange","pointerIndex","findIndex","cachedEv","scaleMove","onGestureEnd","eventWithinZoomContainer","scaledWidth","scaledHeight","scaleRatio","onTransitionEnd","zoomIn","touchX","touchY","offsetX","offsetY","translateX","translateY","imageWidth","imageHeight","translateMinX","translateMinY","translateMaxX","translateMaxY","forceZoomRatio","zoomOut","zoomToggle","getListeners","activeListenerWithCapture","momentumDurationX","momentumDurationY","momentumDistanceX","newPositionX","momentumDistanceY","newPositionY","momentumDuration","in","out","LinearSpline","binarySearch","maxIndex","minIndex","guess","array","i1","i3","interpolate","removeSpline","spline","inverse","by","controlElement","onControllerSwiper","_t","controlled","controlledTranslate","setControlledTranslate","getInterpolateFunction","isFinite","setControlledTransition","a11y","notificationClass","prevSlideMessage","nextSlideMessage","firstSlideMessage","lastSlideMessage","paginationBulletMessage","slideLabelMessage","containerMessage","containerRoleDescriptionMessage","itemRoleDescriptionMessage","slideRole","scrollOnFocus","clicked","preventFocusHandler","focusTargetSlideEl","liveRegion","visibilityChangedTimestamp","notify","message","notification","makeElFocusable","makeElNotFocusable","addElRole","role","addElRoleDescription","description","addElLabel","disableEl","enableEl","onEnterOrSpaceKey","click","hasPagination","hasClickablePagination","initNavEl","wrapperId","controls","addElControls","handlePointerDown","handlePointerUp","onVisibilityChange","handleFocus","isActive","sourceCapabilities","firesTouchEvents","repeat","round","random","live","addElLive","updateNavigation","updatePagination","root","replaceState","keepQuery","paths","slugify","getPathValues","urlOverride","URL","pathArray","part","setHistory","currentState","state","pushState","scrollToSlide","setHistoryPopState","hashNavigation","watchState","slideWithHash","onHashChange","newHash","activeSlideEl","setHash","activeSlideHash","raf","timeLeft","waitForTransition","disableOnInteraction","stopOnLastSlide","reverseDirection","pauseOnMouseEnter","autoplayTimeLeft","wasPaused","pausedByTouch","touchStartTimeout","slideChanged","pausedByInteraction","pausedByPointerEnter","autoplayDelayTotal","autoplayDelayCurrent","autoplayStartTime","calcTimeLeft","run","delayForce","currentSlideDelay","getSlideDelay","proceed","start","pause","reset","visibilityState","onPointerEnter","onPointerLeave","thumbs","multipleActiveThumbs","autoScrollOffset","slideThumbActiveClass","thumbsContainerClass","swiperCreated","onThumbClick","thumbsSwiper","thumbsParams","SwiperClass","thumbsSwiperParams","thumbsToActivate","thumbActiveClass","useOffset","currentThumbsIndex","newThumbsIndex","newThumbsSlide","getThumbsElementAndInit","thumbsElement","onThumbsSwiper","watchForThumbsToAppear","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","minimumVelocity","lastMoveEvent","pop","velocityEvent","distance","momentumDistance","newPosition","afterBouncePosition","doBounce","bounceAmount","needsLoopFix","j","moveDistance","currentSlideSize","slidesNumberEvenToRows","slidesPerRow","numFullColumns","getSpaceBetween","swiperSlideGridSet","newSlideOrderIndex","row","groupIndex","slideIndexInGroup","columnsInGroup","order","fadeEffect","crossFade","tx","ty","slideOpacity","cubeEffect","shadow","shadowOffset","shadowScale","createSlideShadows","shadowBefore","shadowAfter","cubeShadowEl","wrapperRotate","slideAngle","tz","transformOrigin","shadowAngle","sin","scale1","scale2","zFactor","flipEffect","limitRotation","rotateFix","rotateY","rotateX","zIndex","coverflowEffect","stretch","depth","modifier","center","centerOffset","offsetMultiplier","translateZ","slideTransform","shadowBeforeEl","shadowAfterEl","creativeEffect","limitProgress","shadowPerProgress","progressMultiplier","getTranslateValue","isCenteredSlides","margin","custom","translateString","rotateString","scaleString","opacityString","shadowOpacity","cardsEffect","perSlideRotate","perSlideOffset","tX","tY","tZ","tXAdd","isSwipeToNext","isSwipeToPrev","subProgress","prevY","setBodyPaddingByHeader","header","headerHeight","paddingTop","$","jQuery","SiteSliders","initSwiperArrows","initBannerSlider","initImageContentSlider","initCardsSlider","nextArrows","prevArrows","arrowRight","arrowLeft"],"mappings":"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","file":"main.min.js","sourcesContent":["/**\r\n * Plugins/Libs.\r\n */\r\n/*! npm.im/object-fit-images 3.2.4 */\r\nvar objectFitImages = (function () {\r\n'use strict';\r\n\r\nvar OFI = 'bfred-it:object-fit-images';\r\nvar propRegex = /(object-fit|object-position)\\s*:\\s*([-.\\w\\s%]+)/g;\r\nvar testImg = typeof Image === 'undefined' ? {style: {'object-position': 1}} : new Image();\r\nvar supportsObjectFit = 'object-fit' in testImg.style;\r\nvar supportsObjectPosition = 'object-position' in testImg.style;\r\nvar supportsOFI = 'background-size' in testImg.style;\r\nvar supportsCurrentSrc = typeof testImg.currentSrc === 'string';\r\nvar nativeGetAttribute = testImg.getAttribute;\r\nvar nativeSetAttribute = testImg.setAttribute;\r\nvar autoModeEnabled = false;\r\n\r\nfunction createPlaceholder(w, h) {\r\n\treturn (\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='\" + w + \"' height='\" + h + \"'%3E%3C/svg%3E\");\r\n}\r\n\r\nfunction polyfillCurrentSrc(el) {\r\n\tif (el.srcset && !supportsCurrentSrc && window.picturefill) {\r\n\t\tvar pf = window.picturefill._;\r\n\t\t// parse srcset with picturefill where currentSrc isn't available\r\n\t\tif (!el[pf.ns] || !el[pf.ns].evaled) {\r\n\t\t\t// force synchronous srcset parsing\r\n\t\t\tpf.fillImg(el, {reselect: true});\r\n\t\t}\r\n\r\n\t\tif (!el[pf.ns].curSrc) {\r\n\t\t\t// force picturefill to parse srcset\r\n\t\t\tel[pf.ns].supported = false;\r\n\t\t\tpf.fillImg(el, {reselect: true});\r\n\t\t}\r\n\r\n\t\t// retrieve parsed currentSrc, if any\r\n\t\tel.currentSrc = el[pf.ns].curSrc || el.src;\r\n\t}\r\n}\r\n\r\nfunction getStyle(el) {\r\n\tvar style = getComputedStyle(el).fontFamily;\r\n\tvar parsed;\r\n\tvar props = {};\r\n\twhile ((parsed = propRegex.exec(style)) !== null) {\r\n\t\tprops[parsed[1]] = parsed[2];\r\n\t}\r\n\treturn props;\r\n}\r\n\r\nfunction setPlaceholder(img, width, height) {\r\n\t// Default: fill width, no height\r\n\tvar placeholder = createPlaceholder(width || 1, height || 0);\r\n\r\n\t// Only set placeholder if it's different\r\n\tif (nativeGetAttribute.call(img, 'src') !== placeholder) {\r\n\t\tnativeSetAttribute.call(img, 'src', placeholder);\r\n\t}\r\n}\r\n\r\nfunction onImageReady(img, callback) {\r\n\t// naturalWidth is only available when the image headers are loaded,\r\n\t// this loop will poll it every 100ms.\r\n\tif (img.naturalWidth) {\r\n\t\tcallback(img);\r\n\t} else {\r\n\t\tsetTimeout(onImageReady, 100, img, callback);\r\n\t}\r\n}\r\n\r\nfunction fixOne(el) {\r\n\tvar style = getStyle(el);\r\n\tvar ofi = el[OFI];\r\n\tstyle['object-fit'] = style['object-fit'] || 'fill'; // default value\r\n\r\n\t// Avoid running where unnecessary, unless OFI had already done its deed\r\n\tif (!ofi.img) {\r\n\t\t// fill is the default behavior so no action is necessary\r\n\t\tif (style['object-fit'] === 'fill') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// Where object-fit is supported and object-position isn't (Safari < 10)\r\n\t\tif (\r\n\t\t\t!ofi.skipTest && // unless user wants to apply regardless of browser support\r\n\t\t\tsupportsObjectFit && // if browser already supports object-fit\r\n\t\t\t!style['object-position'] // unless object-position is used\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t// keep a clone in memory while resetting the original to a blank\r\n\tif (!ofi.img) {\r\n\t\tofi.img = new Image(el.width, el.height);\r\n\t\tofi.img.srcset = nativeGetAttribute.call(el, \"data-ofi-srcset\") || el.srcset;\r\n\t\tofi.img.src = nativeGetAttribute.call(el, \"data-ofi-src\") || el.src;\r\n\r\n\t\t// preserve for any future cloneNode calls\r\n\t\t// https://github.com/bfred-it/object-fit-images/issues/53\r\n\t\tnativeSetAttribute.call(el, \"data-ofi-src\", el.src);\r\n\t\tif (el.srcset) {\r\n\t\t\tnativeSetAttribute.call(el, \"data-ofi-srcset\", el.srcset);\r\n\t\t}\r\n\r\n\t\tsetPlaceholder(el, el.naturalWidth || el.width, el.naturalHeight || el.height);\r\n\r\n\t\t// remove srcset because it overrides src\r\n\t\tif (el.srcset) {\r\n\t\t\tel.srcset = '';\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tkeepSrcUsable(el);\r\n\t\t} catch (err) {\r\n\t\t\tif (window.console) {\r\n\t\t\t\tconsole.warn('https://bit.ly/ofi-old-browser');\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpolyfillCurrentSrc(ofi.img);\r\n\r\n\tel.style.backgroundImage = \"url(\\\"\" + ((ofi.img.currentSrc || ofi.img.src).replace(/\"/g, '\\\\\"')) + \"\\\")\";\r\n\tel.style.backgroundPosition = style['object-position'] || 'center';\r\n\tel.style.backgroundRepeat = 'no-repeat';\r\n\tel.style.backgroundOrigin = 'content-box';\r\n\r\n\tif (/scale-down/.test(style['object-fit'])) {\r\n\t\tonImageReady(ofi.img, function () {\r\n\t\t\tif (ofi.img.naturalWidth > el.width || ofi.img.naturalHeight > el.height) {\r\n\t\t\t\tel.style.backgroundSize = 'contain';\r\n\t\t\t} else {\r\n\t\t\t\tel.style.backgroundSize = 'auto';\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tel.style.backgroundSize = style['object-fit'].replace('none', 'auto').replace('fill', '100% 100%');\r\n\t}\r\n\r\n\tonImageReady(ofi.img, function (img) {\r\n\t\tsetPlaceholder(el, img.naturalWidth, img.naturalHeight);\r\n\t});\r\n}\r\n\r\nfunction keepSrcUsable(el) {\r\n\tvar descriptors = {\r\n\t\tget: function get(prop) {\r\n\t\t\treturn el[OFI].img[prop ? prop : 'src'];\r\n\t\t},\r\n\t\tset: function set(value, prop) {\r\n\t\t\tel[OFI].img[prop ? prop : 'src'] = value;\r\n\t\t\tnativeSetAttribute.call(el, (\"data-ofi-\" + prop), value); // preserve for any future cloneNode\r\n\t\t\tfixOne(el);\r\n\t\t\treturn value;\r\n\t\t}\r\n\t};\r\n\tObject.defineProperty(el, 'src', descriptors);\r\n\tObject.defineProperty(el, 'currentSrc', {\r\n\t\tget: function () { return descriptors.get('currentSrc'); }\r\n\t});\r\n\tObject.defineProperty(el, 'srcset', {\r\n\t\tget: function () { return descriptors.get('srcset'); },\r\n\t\tset: function (ss) { return descriptors.set(ss, 'srcset'); }\r\n\t});\r\n}\r\n\r\nfunction hijackAttributes() {\r\n\tfunction getOfiImageMaybe(el, name) {\r\n\t\treturn el[OFI] && el[OFI].img && (name === 'src' || name === 'srcset') ? el[OFI].img : el;\r\n\t}\r\n\tif (!supportsObjectPosition) {\r\n\t\tHTMLImageElement.prototype.getAttribute = function (name) {\r\n\t\t\treturn nativeGetAttribute.call(getOfiImageMaybe(this, name), name);\r\n\t\t};\r\n\r\n\t\tHTMLImageElement.prototype.setAttribute = function (name, value) {\r\n\t\t\treturn nativeSetAttribute.call(getOfiImageMaybe(this, name), name, String(value));\r\n\t\t};\r\n\t}\r\n}\r\n\r\nfunction fix(imgs, opts) {\r\n\tvar startAutoMode = !autoModeEnabled && !imgs;\r\n\topts = opts || {};\r\n\timgs = imgs || 'img';\r\n\r\n\tif ((supportsObjectPosition && !opts.skipTest) || !supportsOFI) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// use imgs as a selector or just select all images\r\n\tif (imgs === 'img') {\r\n\t\timgs = document.getElementsByTagName('img');\r\n\t} else if (typeof imgs === 'string') {\r\n\t\timgs = document.querySelectorAll(imgs);\r\n\t} else if (!('length' in imgs)) {\r\n\t\timgs = [imgs];\r\n\t}\r\n\r\n\t// apply fix to all\r\n\tfor (var i = 0; i < imgs.length; i++) {\r\n\t\timgs[i][OFI] = imgs[i][OFI] || {\r\n\t\t\tskipTest: opts.skipTest\r\n\t\t};\r\n\t\tfixOne(imgs[i]);\r\n\t}\r\n\r\n\tif (startAutoMode) {\r\n\t\tdocument.body.addEventListener('load', function (e) {\r\n\t\t\tif (e.target.tagName === 'IMG') {\r\n\t\t\t\tfix(e.target, {\r\n\t\t\t\t\tskipTest: opts.skipTest\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}, true);\r\n\t\tautoModeEnabled = true;\r\n\t\timgs = 'img'; // reset to a generic selector for watchMQ\r\n\t}\r\n\r\n\t// if requested, watch media queries for object-fit change\r\n\tif (opts.watchMQ) {\r\n\t\twindow.addEventListener('resize', fix.bind(null, imgs, {\r\n\t\t\tskipTest: opts.skipTest\r\n\t\t}));\r\n\t}\r\n}\r\n\r\nfix.supportsObjectFit = supportsObjectFit;\r\nfix.supportsObjectPosition = supportsObjectPosition;\r\n\r\nhijackAttributes();\r\n\r\nreturn fix;\r\n\r\n}());\r\n!function(e,o){if(\"function\"==typeof define&&define.amd)define([\"exports\"],o);else if(\"undefined\"!=typeof exports)o(exports);else{var t={};o(t),e.bodyScrollLock=t}}(this,function(exports){\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var t=!1;if(\"undefined\"!=typeof window){var e={get passive(){t=!0}};window.addEventListener(\"testPassive\",null,e),window.removeEventListener(\"testPassive\",null,e)}function l(o){return c.some(function(e){return!(!e.options.allowTouchMove||!e.options.allowTouchMove(o))})}function d(e){var o=e||window.event;return!!l(o.target)||(1<o.touches.length||(o.preventDefault&&o.preventDefault(),!1))}function n(){void 0!==v&&(document.body.style.paddingRight=v,v=void 0),void 0!==s&&(document.body.style.overflow=s,s=void 0)}var i=\"undefined\"!=typeof window&&window.navigator&&window.navigator.platform&&(/iP(ad|hone|od)/.test(window.navigator.platform)||\"MacIntel\"===window.navigator.platform&&1<window.navigator.maxTouchPoints),c=[],a=!1,u=-1,s=void 0,v=void 0;exports.disableBodyScroll=function(r,e){if(r){if(!c.some(function(e){return e.targetElement===r})){var o={targetElement:r,options:e||{}};c=[].concat(function(e){if(Array.isArray(e)){for(var o=0,t=Array(e.length);o<e.length;o++)t[o]=e[o];return t}return Array.from(e)}(c),[o]),i?(r.ontouchstart=function(e){1===e.targetTouches.length&&(u=e.targetTouches[0].clientY)},r.ontouchmove=function(e){var o,t,n,i;1===e.targetTouches.length&&(t=r,i=(o=e).targetTouches[0].clientY-u,l(o.target)||(t&&0===t.scrollTop&&0<i||(n=t)&&n.scrollHeight-n.scrollTop<=n.clientHeight&&i<0?d(o):o.stopPropagation()))},a||(document.addEventListener(\"touchmove\",d,t?{passive:!1}:void 0),a=!0)):function(e){if(void 0===v){var o=!!e&&!0===e.reserveScrollBarGap,t=window.innerWidth-document.documentElement.clientWidth;o&&0<t&&(v=document.body.style.paddingRight,document.body.style.paddingRight=t+\"px\")}void 0===s&&(s=document.body.style.overflow,document.body.style.overflow=\"hidden\")}(e)}}else console.error(\"disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.\")},exports.clearAllBodyScrollLocks=function(){i?(c.forEach(function(e){e.targetElement.ontouchstart=null,e.targetElement.ontouchmove=null}),a&&(document.removeEventListener(\"touchmove\",d,t?{passive:!1}:void 0),a=!1),u=-1):n(),c=[]},exports.enableBodyScroll=function(o){o?(c=c.filter(function(e){return e.targetElement!==o}),i?(o.ontouchstart=null,o.ontouchmove=null,a&&0===c.length&&(document.removeEventListener(\"touchmove\",d,t?{passive:!1}:void 0),a=!1)):c.length||n()):console.error(\"enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.\")}});\r\n/**\r\n * Swiper 11.1.11\r\n * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n * https://swiperjs.com\r\n *\r\n * Copyright 2014-2024 Vladimir Kharlampidi\r\n *\r\n * Released under the MIT License\r\n *\r\n * Released on: August 28, 2024\r\n */\r\n\r\nvar Swiper = (function () {\r\n  'use strict';\r\n\r\n  /**\r\n   * SSR Window 4.0.2\r\n   * Better handling for window object in SSR environment\r\n   * https://github.com/nolimits4web/ssr-window\r\n   *\r\n   * Copyright 2021, Vladimir Kharlampidi\r\n   *\r\n   * Licensed under MIT\r\n   *\r\n   * Released on: December 13, 2021\r\n   */\r\n  /* eslint-disable no-param-reassign */\r\n  function isObject$1(obj) {\r\n    return obj !== null && typeof obj === 'object' && 'constructor' in obj && obj.constructor === Object;\r\n  }\r\n  function extend$1(target, src) {\r\n    if (target === void 0) {\r\n      target = {};\r\n    }\r\n    if (src === void 0) {\r\n      src = {};\r\n    }\r\n    Object.keys(src).forEach(key => {\r\n      if (typeof target[key] === 'undefined') target[key] = src[key];else if (isObject$1(src[key]) && isObject$1(target[key]) && Object.keys(src[key]).length > 0) {\r\n        extend$1(target[key], src[key]);\r\n      }\r\n    });\r\n  }\r\n  const ssrDocument = {\r\n    body: {},\r\n    addEventListener() {},\r\n    removeEventListener() {},\r\n    activeElement: {\r\n      blur() {},\r\n      nodeName: ''\r\n    },\r\n    querySelector() {\r\n      return null;\r\n    },\r\n    querySelectorAll() {\r\n      return [];\r\n    },\r\n    getElementById() {\r\n      return null;\r\n    },\r\n    createEvent() {\r\n      return {\r\n        initEvent() {}\r\n      };\r\n    },\r\n    createElement() {\r\n      return {\r\n        children: [],\r\n        childNodes: [],\r\n        style: {},\r\n        setAttribute() {},\r\n        getElementsByTagName() {\r\n          return [];\r\n        }\r\n      };\r\n    },\r\n    createElementNS() {\r\n      return {};\r\n    },\r\n    importNode() {\r\n      return null;\r\n    },\r\n    location: {\r\n      hash: '',\r\n      host: '',\r\n      hostname: '',\r\n      href: '',\r\n      origin: '',\r\n      pathname: '',\r\n      protocol: '',\r\n      search: ''\r\n    }\r\n  };\r\n  function getDocument() {\r\n    const doc = typeof document !== 'undefined' ? document : {};\r\n    extend$1(doc, ssrDocument);\r\n    return doc;\r\n  }\r\n  const ssrWindow = {\r\n    document: ssrDocument,\r\n    navigator: {\r\n      userAgent: ''\r\n    },\r\n    location: {\r\n      hash: '',\r\n      host: '',\r\n      hostname: '',\r\n      href: '',\r\n      origin: '',\r\n      pathname: '',\r\n      protocol: '',\r\n      search: ''\r\n    },\r\n    history: {\r\n      replaceState() {},\r\n      pushState() {},\r\n      go() {},\r\n      back() {}\r\n    },\r\n    CustomEvent: function CustomEvent() {\r\n      return this;\r\n    },\r\n    addEventListener() {},\r\n    removeEventListener() {},\r\n    getComputedStyle() {\r\n      return {\r\n        getPropertyValue() {\r\n          return '';\r\n        }\r\n      };\r\n    },\r\n    Image() {},\r\n    Date() {},\r\n    screen: {},\r\n    setTimeout() {},\r\n    clearTimeout() {},\r\n    matchMedia() {\r\n      return {};\r\n    },\r\n    requestAnimationFrame(callback) {\r\n      if (typeof setTimeout === 'undefined') {\r\n        callback();\r\n        return null;\r\n      }\r\n      return setTimeout(callback, 0);\r\n    },\r\n    cancelAnimationFrame(id) {\r\n      if (typeof setTimeout === 'undefined') {\r\n        return;\r\n      }\r\n      clearTimeout(id);\r\n    }\r\n  };\r\n  function getWindow() {\r\n    const win = typeof window !== 'undefined' ? window : {};\r\n    extend$1(win, ssrWindow);\r\n    return win;\r\n  }\r\n\r\n  function classesToTokens(classes) {\r\n    if (classes === void 0) {\r\n      classes = '';\r\n    }\r\n    return classes.trim().split(' ').filter(c => !!c.trim());\r\n  }\r\n\r\n  function deleteProps(obj) {\r\n    const object = obj;\r\n    Object.keys(object).forEach(key => {\r\n      try {\r\n        object[key] = null;\r\n      } catch (e) {\r\n        // no getter for object\r\n      }\r\n      try {\r\n        delete object[key];\r\n      } catch (e) {\r\n        // something got wrong\r\n      }\r\n    });\r\n  }\r\n  function nextTick(callback, delay) {\r\n    if (delay === void 0) {\r\n      delay = 0;\r\n    }\r\n    return setTimeout(callback, delay);\r\n  }\r\n  function now() {\r\n    return Date.now();\r\n  }\r\n  function getComputedStyle$1(el) {\r\n    const window = getWindow();\r\n    let style;\r\n    if (window.getComputedStyle) {\r\n      style = window.getComputedStyle(el, null);\r\n    }\r\n    if (!style && el.currentStyle) {\r\n      style = el.currentStyle;\r\n    }\r\n    if (!style) {\r\n      style = el.style;\r\n    }\r\n    return style;\r\n  }\r\n  function getTranslate(el, axis) {\r\n    if (axis === void 0) {\r\n      axis = 'x';\r\n    }\r\n    const window = getWindow();\r\n    let matrix;\r\n    let curTransform;\r\n    let transformMatrix;\r\n    const curStyle = getComputedStyle$1(el);\r\n    if (window.WebKitCSSMatrix) {\r\n      curTransform = curStyle.transform || curStyle.webkitTransform;\r\n      if (curTransform.split(',').length > 6) {\r\n        curTransform = curTransform.split(', ').map(a => a.replace(',', '.')).join(', ');\r\n      }\r\n      // Some old versions of Webkit choke when 'none' is passed; pass\r\n      // empty string instead in this case\r\n      transformMatrix = new window.WebKitCSSMatrix(curTransform === 'none' ? '' : curTransform);\r\n    } else {\r\n      transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue('transform').replace('translate(', 'matrix(1, 0, 0, 1,');\r\n      matrix = transformMatrix.toString().split(',');\r\n    }\r\n    if (axis === 'x') {\r\n      // Latest Chrome and webkits Fix\r\n      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m41;\r\n      // Crazy IE10 Matrix\r\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[12]);\r\n      // Normal Browsers\r\n      else curTransform = parseFloat(matrix[4]);\r\n    }\r\n    if (axis === 'y') {\r\n      // Latest Chrome and webkits Fix\r\n      if (window.WebKitCSSMatrix) curTransform = transformMatrix.m42;\r\n      // Crazy IE10 Matrix\r\n      else if (matrix.length === 16) curTransform = parseFloat(matrix[13]);\r\n      // Normal Browsers\r\n      else curTransform = parseFloat(matrix[5]);\r\n    }\r\n    return curTransform || 0;\r\n  }\r\n  function isObject(o) {\r\n    return typeof o === 'object' && o !== null && o.constructor && Object.prototype.toString.call(o).slice(8, -1) === 'Object';\r\n  }\r\n  function isNode(node) {\r\n    // eslint-disable-next-line\r\n    if (typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined') {\r\n      return node instanceof HTMLElement;\r\n    }\r\n    return node && (node.nodeType === 1 || node.nodeType === 11);\r\n  }\r\n  function extend() {\r\n    const to = Object(arguments.length <= 0 ? undefined : arguments[0]);\r\n    const noExtend = ['__proto__', 'constructor', 'prototype'];\r\n    for (let i = 1; i < arguments.length; i += 1) {\r\n      const nextSource = i < 0 || arguments.length <= i ? undefined : arguments[i];\r\n      if (nextSource !== undefined && nextSource !== null && !isNode(nextSource)) {\r\n        const keysArray = Object.keys(Object(nextSource)).filter(key => noExtend.indexOf(key) < 0);\r\n        for (let nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {\r\n          const nextKey = keysArray[nextIndex];\r\n          const desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\r\n          if (desc !== undefined && desc.enumerable) {\r\n            if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\r\n              if (nextSource[nextKey].__swiper__) {\r\n                to[nextKey] = nextSource[nextKey];\r\n              } else {\r\n                extend(to[nextKey], nextSource[nextKey]);\r\n              }\r\n            } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {\r\n              to[nextKey] = {};\r\n              if (nextSource[nextKey].__swiper__) {\r\n                to[nextKey] = nextSource[nextKey];\r\n              } else {\r\n                extend(to[nextKey], nextSource[nextKey]);\r\n              }\r\n            } else {\r\n              to[nextKey] = nextSource[nextKey];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return to;\r\n  }\r\n  function setCSSProperty(el, varName, varValue) {\r\n    el.style.setProperty(varName, varValue);\r\n  }\r\n  function animateCSSModeScroll(_ref) {\r\n    let {\r\n      swiper,\r\n      targetPosition,\r\n      side\r\n    } = _ref;\r\n    const window = getWindow();\r\n    const startPosition = -swiper.translate;\r\n    let startTime = null;\r\n    let time;\r\n    const duration = swiper.params.speed;\r\n    swiper.wrapperEl.style.scrollSnapType = 'none';\r\n    window.cancelAnimationFrame(swiper.cssModeFrameID);\r\n    const dir = targetPosition > startPosition ? 'next' : 'prev';\r\n    const isOutOfBound = (current, target) => {\r\n      return dir === 'next' && current >= target || dir === 'prev' && current <= target;\r\n    };\r\n    const animate = () => {\r\n      time = new Date().getTime();\r\n      if (startTime === null) {\r\n        startTime = time;\r\n      }\r\n      const progress = Math.max(Math.min((time - startTime) / duration, 1), 0);\r\n      const easeProgress = 0.5 - Math.cos(progress * Math.PI) / 2;\r\n      let currentPosition = startPosition + easeProgress * (targetPosition - startPosition);\r\n      if (isOutOfBound(currentPosition, targetPosition)) {\r\n        currentPosition = targetPosition;\r\n      }\r\n      swiper.wrapperEl.scrollTo({\r\n        [side]: currentPosition\r\n      });\r\n      if (isOutOfBound(currentPosition, targetPosition)) {\r\n        swiper.wrapperEl.style.overflow = 'hidden';\r\n        swiper.wrapperEl.style.scrollSnapType = '';\r\n        setTimeout(() => {\r\n          swiper.wrapperEl.style.overflow = '';\r\n          swiper.wrapperEl.scrollTo({\r\n            [side]: currentPosition\r\n          });\r\n        });\r\n        window.cancelAnimationFrame(swiper.cssModeFrameID);\r\n        return;\r\n      }\r\n      swiper.cssModeFrameID = window.requestAnimationFrame(animate);\r\n    };\r\n    animate();\r\n  }\r\n  function getSlideTransformEl(slideEl) {\r\n    return slideEl.querySelector('.swiper-slide-transform') || slideEl.shadowRoot && slideEl.shadowRoot.querySelector('.swiper-slide-transform') || slideEl;\r\n  }\r\n  function elementChildren(element, selector) {\r\n    if (selector === void 0) {\r\n      selector = '';\r\n    }\r\n    const children = [...element.children];\r\n    if (element instanceof HTMLSlotElement) {\r\n      children.push(...element.assignedElements());\r\n    }\r\n    if (!selector) {\r\n      return children;\r\n    }\r\n    return children.filter(el => el.matches(selector));\r\n  }\r\n  function elementIsChildOf(el, parent) {\r\n    const isChild = parent.contains(el);\r\n    if (!isChild && parent instanceof HTMLSlotElement) {\r\n      const children = [...parent.assignedElements()];\r\n      return children.includes(el);\r\n    }\r\n    return isChild;\r\n  }\r\n  function showWarning(text) {\r\n    try {\r\n      console.warn(text);\r\n      return;\r\n    } catch (err) {\r\n      // err\r\n    }\r\n  }\r\n  function createElement(tag, classes) {\r\n    if (classes === void 0) {\r\n      classes = [];\r\n    }\r\n    const el = document.createElement(tag);\r\n    el.classList.add(...(Array.isArray(classes) ? classes : classesToTokens(classes)));\r\n    return el;\r\n  }\r\n  function elementOffset(el) {\r\n    const window = getWindow();\r\n    const document = getDocument();\r\n    const box = el.getBoundingClientRect();\r\n    const body = document.body;\r\n    const clientTop = el.clientTop || body.clientTop || 0;\r\n    const clientLeft = el.clientLeft || body.clientLeft || 0;\r\n    const scrollTop = el === window ? window.scrollY : el.scrollTop;\r\n    const scrollLeft = el === window ? window.scrollX : el.scrollLeft;\r\n    return {\r\n      top: box.top + scrollTop - clientTop,\r\n      left: box.left + scrollLeft - clientLeft\r\n    };\r\n  }\r\n  function elementPrevAll(el, selector) {\r\n    const prevEls = [];\r\n    while (el.previousElementSibling) {\r\n      const prev = el.previousElementSibling; // eslint-disable-line\r\n      if (selector) {\r\n        if (prev.matches(selector)) prevEls.push(prev);\r\n      } else prevEls.push(prev);\r\n      el = prev;\r\n    }\r\n    return prevEls;\r\n  }\r\n  function elementNextAll(el, selector) {\r\n    const nextEls = [];\r\n    while (el.nextElementSibling) {\r\n      const next = el.nextElementSibling; // eslint-disable-line\r\n      if (selector) {\r\n        if (next.matches(selector)) nextEls.push(next);\r\n      } else nextEls.push(next);\r\n      el = next;\r\n    }\r\n    return nextEls;\r\n  }\r\n  function elementStyle(el, prop) {\r\n    const window = getWindow();\r\n    return window.getComputedStyle(el, null).getPropertyValue(prop);\r\n  }\r\n  function elementIndex(el) {\r\n    let child = el;\r\n    let i;\r\n    if (child) {\r\n      i = 0;\r\n      // eslint-disable-next-line\r\n      while ((child = child.previousSibling) !== null) {\r\n        if (child.nodeType === 1) i += 1;\r\n      }\r\n      return i;\r\n    }\r\n    return undefined;\r\n  }\r\n  function elementParents(el, selector) {\r\n    const parents = []; // eslint-disable-line\r\n    let parent = el.parentElement; // eslint-disable-line\r\n    while (parent) {\r\n      if (selector) {\r\n        if (parent.matches(selector)) parents.push(parent);\r\n      } else {\r\n        parents.push(parent);\r\n      }\r\n      parent = parent.parentElement;\r\n    }\r\n    return parents;\r\n  }\r\n  function elementTransitionEnd(el, callback) {\r\n    function fireCallBack(e) {\r\n      if (e.target !== el) return;\r\n      callback.call(el, e);\r\n      el.removeEventListener('transitionend', fireCallBack);\r\n    }\r\n    if (callback) {\r\n      el.addEventListener('transitionend', fireCallBack);\r\n    }\r\n  }\r\n  function elementOuterSize(el, size, includeMargins) {\r\n    const window = getWindow();\r\n    if (includeMargins) {\r\n      return el[size === 'width' ? 'offsetWidth' : 'offsetHeight'] + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-right' : 'margin-top')) + parseFloat(window.getComputedStyle(el, null).getPropertyValue(size === 'width' ? 'margin-left' : 'margin-bottom'));\r\n    }\r\n    return el.offsetWidth;\r\n  }\r\n  function makeElementsArray(el) {\r\n    return (Array.isArray(el) ? el : [el]).filter(e => !!e);\r\n  }\r\n  function getRotateFix(swiper) {\r\n    return v => {\r\n      if (Math.abs(v) > 0 && swiper.browser && swiper.browser.need3dFix && Math.abs(v) % 90 === 0) {\r\n        return v + 0.001;\r\n      }\r\n      return v;\r\n    };\r\n  }\r\n\r\n  let support;\r\n  function calcSupport() {\r\n    const window = getWindow();\r\n    const document = getDocument();\r\n    return {\r\n      smoothScroll: document.documentElement && document.documentElement.style && 'scrollBehavior' in document.documentElement.style,\r\n      touch: !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch)\r\n    };\r\n  }\r\n  function getSupport() {\r\n    if (!support) {\r\n      support = calcSupport();\r\n    }\r\n    return support;\r\n  }\r\n\r\n  let deviceCached;\r\n  function calcDevice(_temp) {\r\n    let {\r\n      userAgent\r\n    } = _temp === void 0 ? {} : _temp;\r\n    const support = getSupport();\r\n    const window = getWindow();\r\n    const platform = window.navigator.platform;\r\n    const ua = userAgent || window.navigator.userAgent;\r\n    const device = {\r\n      ios: false,\r\n      android: false\r\n    };\r\n    const screenWidth = window.screen.width;\r\n    const screenHeight = window.screen.height;\r\n    const android = ua.match(/(Android);?[\\s\\/]+([\\d.]+)?/); // eslint-disable-line\r\n    let ipad = ua.match(/(iPad).*OS\\s([\\d_]+)/);\r\n    const ipod = ua.match(/(iPod)(.*OS\\s([\\d_]+))?/);\r\n    const iphone = !ipad && ua.match(/(iPhone\\sOS|iOS)\\s([\\d_]+)/);\r\n    const windows = platform === 'Win32';\r\n    let macos = platform === 'MacIntel';\r\n\r\n    // iPadOs 13 fix\r\n    const iPadScreens = ['1024x1366', '1366x1024', '834x1194', '1194x834', '834x1112', '1112x834', '768x1024', '1024x768', '820x1180', '1180x820', '810x1080', '1080x810'];\r\n    if (!ipad && macos && support.touch && iPadScreens.indexOf(`${screenWidth}x${screenHeight}`) >= 0) {\r\n      ipad = ua.match(/(Version)\\/([\\d.]+)/);\r\n      if (!ipad) ipad = [0, 1, '13_0_0'];\r\n      macos = false;\r\n    }\r\n\r\n    // Android\r\n    if (android && !windows) {\r\n      device.os = 'android';\r\n      device.android = true;\r\n    }\r\n    if (ipad || iphone || ipod) {\r\n      device.os = 'ios';\r\n      device.ios = true;\r\n    }\r\n\r\n    // Export object\r\n    return device;\r\n  }\r\n  function getDevice(overrides) {\r\n    if (overrides === void 0) {\r\n      overrides = {};\r\n    }\r\n    if (!deviceCached) {\r\n      deviceCached = calcDevice(overrides);\r\n    }\r\n    return deviceCached;\r\n  }\r\n\r\n  let browser;\r\n  function calcBrowser() {\r\n    const window = getWindow();\r\n    const device = getDevice();\r\n    let needPerspectiveFix = false;\r\n    function isSafari() {\r\n      const ua = window.navigator.userAgent.toLowerCase();\r\n      return ua.indexOf('safari') >= 0 && ua.indexOf('chrome') < 0 && ua.indexOf('android') < 0;\r\n    }\r\n    if (isSafari()) {\r\n      const ua = String(window.navigator.userAgent);\r\n      if (ua.includes('Version/')) {\r\n        const [major, minor] = ua.split('Version/')[1].split(' ')[0].split('.').map(num => Number(num));\r\n        needPerspectiveFix = major < 16 || major === 16 && minor < 2;\r\n      }\r\n    }\r\n    const isWebView = /(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(window.navigator.userAgent);\r\n    const isSafariBrowser = isSafari();\r\n    const need3dFix = isSafariBrowser || isWebView && device.ios;\r\n    return {\r\n      isSafari: needPerspectiveFix || isSafariBrowser,\r\n      needPerspectiveFix,\r\n      need3dFix,\r\n      isWebView\r\n    };\r\n  }\r\n  function getBrowser() {\r\n    if (!browser) {\r\n      browser = calcBrowser();\r\n    }\r\n    return browser;\r\n  }\r\n\r\n  function Resize(_ref) {\r\n    let {\r\n      swiper,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const window = getWindow();\r\n    let observer = null;\r\n    let animationFrame = null;\r\n    const resizeHandler = () => {\r\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n      emit('beforeResize');\r\n      emit('resize');\r\n    };\r\n    const createObserver = () => {\r\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n      observer = new ResizeObserver(entries => {\r\n        animationFrame = window.requestAnimationFrame(() => {\r\n          const {\r\n            width,\r\n            height\r\n          } = swiper;\r\n          let newWidth = width;\r\n          let newHeight = height;\r\n          entries.forEach(_ref2 => {\r\n            let {\r\n              contentBoxSize,\r\n              contentRect,\r\n              target\r\n            } = _ref2;\r\n            if (target && target !== swiper.el) return;\r\n            newWidth = contentRect ? contentRect.width : (contentBoxSize[0] || contentBoxSize).inlineSize;\r\n            newHeight = contentRect ? contentRect.height : (contentBoxSize[0] || contentBoxSize).blockSize;\r\n          });\r\n          if (newWidth !== width || newHeight !== height) {\r\n            resizeHandler();\r\n          }\r\n        });\r\n      });\r\n      observer.observe(swiper.el);\r\n    };\r\n    const removeObserver = () => {\r\n      if (animationFrame) {\r\n        window.cancelAnimationFrame(animationFrame);\r\n      }\r\n      if (observer && observer.unobserve && swiper.el) {\r\n        observer.unobserve(swiper.el);\r\n        observer = null;\r\n      }\r\n    };\r\n    const orientationChangeHandler = () => {\r\n      if (!swiper || swiper.destroyed || !swiper.initialized) return;\r\n      emit('orientationchange');\r\n    };\r\n    on('init', () => {\r\n      if (swiper.params.resizeObserver && typeof window.ResizeObserver !== 'undefined') {\r\n        createObserver();\r\n        return;\r\n      }\r\n      window.addEventListener('resize', resizeHandler);\r\n      window.addEventListener('orientationchange', orientationChangeHandler);\r\n    });\r\n    on('destroy', () => {\r\n      removeObserver();\r\n      window.removeEventListener('resize', resizeHandler);\r\n      window.removeEventListener('orientationchange', orientationChangeHandler);\r\n    });\r\n  }\r\n\r\n  function Observer(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const observers = [];\r\n    const window = getWindow();\r\n    const attach = function (target, options) {\r\n      if (options === void 0) {\r\n        options = {};\r\n      }\r\n      const ObserverFunc = window.MutationObserver || window.WebkitMutationObserver;\r\n      const observer = new ObserverFunc(mutations => {\r\n        // The observerUpdate event should only be triggered\r\n        // once despite the number of mutations.  Additional\r\n        // triggers are redundant and are very costly\r\n        if (swiper.__preventObserver__) return;\r\n        if (mutations.length === 1) {\r\n          emit('observerUpdate', mutations[0]);\r\n          return;\r\n        }\r\n        const observerUpdate = function observerUpdate() {\r\n          emit('observerUpdate', mutations[0]);\r\n        };\r\n        if (window.requestAnimationFrame) {\r\n          window.requestAnimationFrame(observerUpdate);\r\n        } else {\r\n          window.setTimeout(observerUpdate, 0);\r\n        }\r\n      });\r\n      observer.observe(target, {\r\n        attributes: typeof options.attributes === 'undefined' ? true : options.attributes,\r\n        childList: swiper.isElement || (typeof options.childList === 'undefined' ? true : options).childList,\r\n        characterData: typeof options.characterData === 'undefined' ? true : options.characterData\r\n      });\r\n      observers.push(observer);\r\n    };\r\n    const init = () => {\r\n      if (!swiper.params.observer) return;\r\n      if (swiper.params.observeParents) {\r\n        const containerParents = elementParents(swiper.hostEl);\r\n        for (let i = 0; i < containerParents.length; i += 1) {\r\n          attach(containerParents[i]);\r\n        }\r\n      }\r\n      // Observe container\r\n      attach(swiper.hostEl, {\r\n        childList: swiper.params.observeSlideChildren\r\n      });\r\n\r\n      // Observe wrapper\r\n      attach(swiper.wrapperEl, {\r\n        attributes: false\r\n      });\r\n    };\r\n    const destroy = () => {\r\n      observers.forEach(observer => {\r\n        observer.disconnect();\r\n      });\r\n      observers.splice(0, observers.length);\r\n    };\r\n    extendParams({\r\n      observer: false,\r\n      observeParents: false,\r\n      observeSlideChildren: false\r\n    });\r\n    on('init', init);\r\n    on('destroy', destroy);\r\n  }\r\n\r\n  /* eslint-disable no-underscore-dangle */\r\n\r\n  var eventsEmitter = {\r\n    on(events, handler, priority) {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (typeof handler !== 'function') return self;\r\n      const method = priority ? 'unshift' : 'push';\r\n      events.split(' ').forEach(event => {\r\n        if (!self.eventsListeners[event]) self.eventsListeners[event] = [];\r\n        self.eventsListeners[event][method](handler);\r\n      });\r\n      return self;\r\n    },\r\n    once(events, handler, priority) {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (typeof handler !== 'function') return self;\r\n      function onceHandler() {\r\n        self.off(events, onceHandler);\r\n        if (onceHandler.__emitterProxy) {\r\n          delete onceHandler.__emitterProxy;\r\n        }\r\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n          args[_key] = arguments[_key];\r\n        }\r\n        handler.apply(self, args);\r\n      }\r\n      onceHandler.__emitterProxy = handler;\r\n      return self.on(events, onceHandler, priority);\r\n    },\r\n    onAny(handler, priority) {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (typeof handler !== 'function') return self;\r\n      const method = priority ? 'unshift' : 'push';\r\n      if (self.eventsAnyListeners.indexOf(handler) < 0) {\r\n        self.eventsAnyListeners[method](handler);\r\n      }\r\n      return self;\r\n    },\r\n    offAny(handler) {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (!self.eventsAnyListeners) return self;\r\n      const index = self.eventsAnyListeners.indexOf(handler);\r\n      if (index >= 0) {\r\n        self.eventsAnyListeners.splice(index, 1);\r\n      }\r\n      return self;\r\n    },\r\n    off(events, handler) {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (!self.eventsListeners) return self;\r\n      events.split(' ').forEach(event => {\r\n        if (typeof handler === 'undefined') {\r\n          self.eventsListeners[event] = [];\r\n        } else if (self.eventsListeners[event]) {\r\n          self.eventsListeners[event].forEach((eventHandler, index) => {\r\n            if (eventHandler === handler || eventHandler.__emitterProxy && eventHandler.__emitterProxy === handler) {\r\n              self.eventsListeners[event].splice(index, 1);\r\n            }\r\n          });\r\n        }\r\n      });\r\n      return self;\r\n    },\r\n    emit() {\r\n      const self = this;\r\n      if (!self.eventsListeners || self.destroyed) return self;\r\n      if (!self.eventsListeners) return self;\r\n      let events;\r\n      let data;\r\n      let context;\r\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\r\n        args[_key2] = arguments[_key2];\r\n      }\r\n      if (typeof args[0] === 'string' || Array.isArray(args[0])) {\r\n        events = args[0];\r\n        data = args.slice(1, args.length);\r\n        context = self;\r\n      } else {\r\n        events = args[0].events;\r\n        data = args[0].data;\r\n        context = args[0].context || self;\r\n      }\r\n      data.unshift(context);\r\n      const eventsArray = Array.isArray(events) ? events : events.split(' ');\r\n      eventsArray.forEach(event => {\r\n        if (self.eventsAnyListeners && self.eventsAnyListeners.length) {\r\n          self.eventsAnyListeners.forEach(eventHandler => {\r\n            eventHandler.apply(context, [event, ...data]);\r\n          });\r\n        }\r\n        if (self.eventsListeners && self.eventsListeners[event]) {\r\n          self.eventsListeners[event].forEach(eventHandler => {\r\n            eventHandler.apply(context, data);\r\n          });\r\n        }\r\n      });\r\n      return self;\r\n    }\r\n  };\r\n\r\n  function updateSize() {\r\n    const swiper = this;\r\n    let width;\r\n    let height;\r\n    const el = swiper.el;\r\n    if (typeof swiper.params.width !== 'undefined' && swiper.params.width !== null) {\r\n      width = swiper.params.width;\r\n    } else {\r\n      width = el.clientWidth;\r\n    }\r\n    if (typeof swiper.params.height !== 'undefined' && swiper.params.height !== null) {\r\n      height = swiper.params.height;\r\n    } else {\r\n      height = el.clientHeight;\r\n    }\r\n    if (width === 0 && swiper.isHorizontal() || height === 0 && swiper.isVertical()) {\r\n      return;\r\n    }\r\n\r\n    // Subtract paddings\r\n    width = width - parseInt(elementStyle(el, 'padding-left') || 0, 10) - parseInt(elementStyle(el, 'padding-right') || 0, 10);\r\n    height = height - parseInt(elementStyle(el, 'padding-top') || 0, 10) - parseInt(elementStyle(el, 'padding-bottom') || 0, 10);\r\n    if (Number.isNaN(width)) width = 0;\r\n    if (Number.isNaN(height)) height = 0;\r\n    Object.assign(swiper, {\r\n      width,\r\n      height,\r\n      size: swiper.isHorizontal() ? width : height\r\n    });\r\n  }\r\n\r\n  function updateSlides() {\r\n    const swiper = this;\r\n    function getDirectionPropertyValue(node, label) {\r\n      return parseFloat(node.getPropertyValue(swiper.getDirectionLabel(label)) || 0);\r\n    }\r\n    const params = swiper.params;\r\n    const {\r\n      wrapperEl,\r\n      slidesEl,\r\n      size: swiperSize,\r\n      rtlTranslate: rtl,\r\n      wrongRTL\r\n    } = swiper;\r\n    const isVirtual = swiper.virtual && params.virtual.enabled;\r\n    const previousSlidesLength = isVirtual ? swiper.virtual.slides.length : swiper.slides.length;\r\n    const slides = elementChildren(slidesEl, `.${swiper.params.slideClass}, swiper-slide`);\r\n    const slidesLength = isVirtual ? swiper.virtual.slides.length : slides.length;\r\n    let snapGrid = [];\r\n    const slidesGrid = [];\r\n    const slidesSizesGrid = [];\r\n    let offsetBefore = params.slidesOffsetBefore;\r\n    if (typeof offsetBefore === 'function') {\r\n      offsetBefore = params.slidesOffsetBefore.call(swiper);\r\n    }\r\n    let offsetAfter = params.slidesOffsetAfter;\r\n    if (typeof offsetAfter === 'function') {\r\n      offsetAfter = params.slidesOffsetAfter.call(swiper);\r\n    }\r\n    const previousSnapGridLength = swiper.snapGrid.length;\r\n    const previousSlidesGridLength = swiper.slidesGrid.length;\r\n    let spaceBetween = params.spaceBetween;\r\n    let slidePosition = -offsetBefore;\r\n    let prevSlideSize = 0;\r\n    let index = 0;\r\n    if (typeof swiperSize === 'undefined') {\r\n      return;\r\n    }\r\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiperSize;\r\n    } else if (typeof spaceBetween === 'string') {\r\n      spaceBetween = parseFloat(spaceBetween);\r\n    }\r\n    swiper.virtualSize = -spaceBetween;\r\n\r\n    // reset margins\r\n    slides.forEach(slideEl => {\r\n      if (rtl) {\r\n        slideEl.style.marginLeft = '';\r\n      } else {\r\n        slideEl.style.marginRight = '';\r\n      }\r\n      slideEl.style.marginBottom = '';\r\n      slideEl.style.marginTop = '';\r\n    });\r\n\r\n    // reset cssMode offsets\r\n    if (params.centeredSlides && params.cssMode) {\r\n      setCSSProperty(wrapperEl, '--swiper-centered-offset-before', '');\r\n      setCSSProperty(wrapperEl, '--swiper-centered-offset-after', '');\r\n    }\r\n    const gridEnabled = params.grid && params.grid.rows > 1 && swiper.grid;\r\n    if (gridEnabled) {\r\n      swiper.grid.initSlides(slides);\r\n    } else if (swiper.grid) {\r\n      swiper.grid.unsetSlides();\r\n    }\r\n\r\n    // Calc slides\r\n    let slideSize;\r\n    const shouldResetSlideSize = params.slidesPerView === 'auto' && params.breakpoints && Object.keys(params.breakpoints).filter(key => {\r\n      return typeof params.breakpoints[key].slidesPerView !== 'undefined';\r\n    }).length > 0;\r\n    for (let i = 0; i < slidesLength; i += 1) {\r\n      slideSize = 0;\r\n      let slide;\r\n      if (slides[i]) slide = slides[i];\r\n      if (gridEnabled) {\r\n        swiper.grid.updateSlide(i, slide, slides);\r\n      }\r\n      if (slides[i] && elementStyle(slide, 'display') === 'none') continue; // eslint-disable-line\r\n\r\n      if (params.slidesPerView === 'auto') {\r\n        if (shouldResetSlideSize) {\r\n          slides[i].style[swiper.getDirectionLabel('width')] = ``;\r\n        }\r\n        const slideStyles = getComputedStyle(slide);\r\n        const currentTransform = slide.style.transform;\r\n        const currentWebKitTransform = slide.style.webkitTransform;\r\n        if (currentTransform) {\r\n          slide.style.transform = 'none';\r\n        }\r\n        if (currentWebKitTransform) {\r\n          slide.style.webkitTransform = 'none';\r\n        }\r\n        if (params.roundLengths) {\r\n          slideSize = swiper.isHorizontal() ? elementOuterSize(slide, 'width', true) : elementOuterSize(slide, 'height', true);\r\n        } else {\r\n          // eslint-disable-next-line\r\n          const width = getDirectionPropertyValue(slideStyles, 'width');\r\n          const paddingLeft = getDirectionPropertyValue(slideStyles, 'padding-left');\r\n          const paddingRight = getDirectionPropertyValue(slideStyles, 'padding-right');\r\n          const marginLeft = getDirectionPropertyValue(slideStyles, 'margin-left');\r\n          const marginRight = getDirectionPropertyValue(slideStyles, 'margin-right');\r\n          const boxSizing = slideStyles.getPropertyValue('box-sizing');\r\n          if (boxSizing && boxSizing === 'border-box') {\r\n            slideSize = width + marginLeft + marginRight;\r\n          } else {\r\n            const {\r\n              clientWidth,\r\n              offsetWidth\r\n            } = slide;\r\n            slideSize = width + paddingLeft + paddingRight + marginLeft + marginRight + (offsetWidth - clientWidth);\r\n          }\r\n        }\r\n        if (currentTransform) {\r\n          slide.style.transform = currentTransform;\r\n        }\r\n        if (currentWebKitTransform) {\r\n          slide.style.webkitTransform = currentWebKitTransform;\r\n        }\r\n        if (params.roundLengths) slideSize = Math.floor(slideSize);\r\n      } else {\r\n        slideSize = (swiperSize - (params.slidesPerView - 1) * spaceBetween) / params.slidesPerView;\r\n        if (params.roundLengths) slideSize = Math.floor(slideSize);\r\n        if (slides[i]) {\r\n          slides[i].style[swiper.getDirectionLabel('width')] = `${slideSize}px`;\r\n        }\r\n      }\r\n      if (slides[i]) {\r\n        slides[i].swiperSlideSize = slideSize;\r\n      }\r\n      slidesSizesGrid.push(slideSize);\r\n      if (params.centeredSlides) {\r\n        slidePosition = slidePosition + slideSize / 2 + prevSlideSize / 2 + spaceBetween;\r\n        if (prevSlideSize === 0 && i !== 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\r\n        if (i === 0) slidePosition = slidePosition - swiperSize / 2 - spaceBetween;\r\n        if (Math.abs(slidePosition) < 1 / 1000) slidePosition = 0;\r\n        if (params.roundLengths) slidePosition = Math.floor(slidePosition);\r\n        if (index % params.slidesPerGroup === 0) snapGrid.push(slidePosition);\r\n        slidesGrid.push(slidePosition);\r\n      } else {\r\n        if (params.roundLengths) slidePosition = Math.floor(slidePosition);\r\n        if ((index - Math.min(swiper.params.slidesPerGroupSkip, index)) % swiper.params.slidesPerGroup === 0) snapGrid.push(slidePosition);\r\n        slidesGrid.push(slidePosition);\r\n        slidePosition = slidePosition + slideSize + spaceBetween;\r\n      }\r\n      swiper.virtualSize += slideSize + spaceBetween;\r\n      prevSlideSize = slideSize;\r\n      index += 1;\r\n    }\r\n    swiper.virtualSize = Math.max(swiper.virtualSize, swiperSize) + offsetAfter;\r\n    if (rtl && wrongRTL && (params.effect === 'slide' || params.effect === 'coverflow')) {\r\n      wrapperEl.style.width = `${swiper.virtualSize + spaceBetween}px`;\r\n    }\r\n    if (params.setWrapperSize) {\r\n      wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\r\n    }\r\n    if (gridEnabled) {\r\n      swiper.grid.updateWrapperSize(slideSize, snapGrid);\r\n    }\r\n\r\n    // Remove last grid elements depending on width\r\n    if (!params.centeredSlides) {\r\n      const newSlidesGrid = [];\r\n      for (let i = 0; i < snapGrid.length; i += 1) {\r\n        let slidesGridItem = snapGrid[i];\r\n        if (params.roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n        if (snapGrid[i] <= swiper.virtualSize - swiperSize) {\r\n          newSlidesGrid.push(slidesGridItem);\r\n        }\r\n      }\r\n      snapGrid = newSlidesGrid;\r\n      if (Math.floor(swiper.virtualSize - swiperSize) - Math.floor(snapGrid[snapGrid.length - 1]) > 1) {\r\n        snapGrid.push(swiper.virtualSize - swiperSize);\r\n      }\r\n    }\r\n    if (isVirtual && params.loop) {\r\n      const size = slidesSizesGrid[0] + spaceBetween;\r\n      if (params.slidesPerGroup > 1) {\r\n        const groups = Math.ceil((swiper.virtual.slidesBefore + swiper.virtual.slidesAfter) / params.slidesPerGroup);\r\n        const groupSize = size * params.slidesPerGroup;\r\n        for (let i = 0; i < groups; i += 1) {\r\n          snapGrid.push(snapGrid[snapGrid.length - 1] + groupSize);\r\n        }\r\n      }\r\n      for (let i = 0; i < swiper.virtual.slidesBefore + swiper.virtual.slidesAfter; i += 1) {\r\n        if (params.slidesPerGroup === 1) {\r\n          snapGrid.push(snapGrid[snapGrid.length - 1] + size);\r\n        }\r\n        slidesGrid.push(slidesGrid[slidesGrid.length - 1] + size);\r\n        swiper.virtualSize += size;\r\n      }\r\n    }\r\n    if (snapGrid.length === 0) snapGrid = [0];\r\n    if (spaceBetween !== 0) {\r\n      const key = swiper.isHorizontal() && rtl ? 'marginLeft' : swiper.getDirectionLabel('marginRight');\r\n      slides.filter((_, slideIndex) => {\r\n        if (!params.cssMode || params.loop) return true;\r\n        if (slideIndex === slides.length - 1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }).forEach(slideEl => {\r\n        slideEl.style[key] = `${spaceBetween}px`;\r\n      });\r\n    }\r\n    if (params.centeredSlides && params.centeredSlidesBounds) {\r\n      let allSlidesSize = 0;\r\n      slidesSizesGrid.forEach(slideSizeValue => {\r\n        allSlidesSize += slideSizeValue + (spaceBetween || 0);\r\n      });\r\n      allSlidesSize -= spaceBetween;\r\n      const maxSnap = allSlidesSize > swiperSize ? allSlidesSize - swiperSize : 0;\r\n      snapGrid = snapGrid.map(snap => {\r\n        if (snap <= 0) return -offsetBefore;\r\n        if (snap > maxSnap) return maxSnap + offsetAfter;\r\n        return snap;\r\n      });\r\n    }\r\n    if (params.centerInsufficientSlides) {\r\n      let allSlidesSize = 0;\r\n      slidesSizesGrid.forEach(slideSizeValue => {\r\n        allSlidesSize += slideSizeValue + (spaceBetween || 0);\r\n      });\r\n      allSlidesSize -= spaceBetween;\r\n      const offsetSize = (params.slidesOffsetBefore || 0) + (params.slidesOffsetAfter || 0);\r\n      if (allSlidesSize + offsetSize < swiperSize) {\r\n        const allSlidesOffset = (swiperSize - allSlidesSize - offsetSize) / 2;\r\n        snapGrid.forEach((snap, snapIndex) => {\r\n          snapGrid[snapIndex] = snap - allSlidesOffset;\r\n        });\r\n        slidesGrid.forEach((snap, snapIndex) => {\r\n          slidesGrid[snapIndex] = snap + allSlidesOffset;\r\n        });\r\n      }\r\n    }\r\n    Object.assign(swiper, {\r\n      slides,\r\n      snapGrid,\r\n      slidesGrid,\r\n      slidesSizesGrid\r\n    });\r\n    if (params.centeredSlides && params.cssMode && !params.centeredSlidesBounds) {\r\n      setCSSProperty(wrapperEl, '--swiper-centered-offset-before', `${-snapGrid[0]}px`);\r\n      setCSSProperty(wrapperEl, '--swiper-centered-offset-after', `${swiper.size / 2 - slidesSizesGrid[slidesSizesGrid.length - 1] / 2}px`);\r\n      const addToSnapGrid = -swiper.snapGrid[0];\r\n      const addToSlidesGrid = -swiper.slidesGrid[0];\r\n      swiper.snapGrid = swiper.snapGrid.map(v => v + addToSnapGrid);\r\n      swiper.slidesGrid = swiper.slidesGrid.map(v => v + addToSlidesGrid);\r\n    }\r\n    if (slidesLength !== previousSlidesLength) {\r\n      swiper.emit('slidesLengthChange');\r\n    }\r\n    if (snapGrid.length !== previousSnapGridLength) {\r\n      if (swiper.params.watchOverflow) swiper.checkOverflow();\r\n      swiper.emit('snapGridLengthChange');\r\n    }\r\n    if (slidesGrid.length !== previousSlidesGridLength) {\r\n      swiper.emit('slidesGridLengthChange');\r\n    }\r\n    if (params.watchSlidesProgress) {\r\n      swiper.updateSlidesOffset();\r\n    }\r\n    swiper.emit('slidesUpdated');\r\n    if (!isVirtual && !params.cssMode && (params.effect === 'slide' || params.effect === 'fade')) {\r\n      const backFaceHiddenClass = `${params.containerModifierClass}backface-hidden`;\r\n      const hasClassBackfaceClassAdded = swiper.el.classList.contains(backFaceHiddenClass);\r\n      if (slidesLength <= params.maxBackfaceHiddenSlides) {\r\n        if (!hasClassBackfaceClassAdded) swiper.el.classList.add(backFaceHiddenClass);\r\n      } else if (hasClassBackfaceClassAdded) {\r\n        swiper.el.classList.remove(backFaceHiddenClass);\r\n      }\r\n    }\r\n  }\r\n\r\n  function updateAutoHeight(speed) {\r\n    const swiper = this;\r\n    const activeSlides = [];\r\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n    let newHeight = 0;\r\n    let i;\r\n    if (typeof speed === 'number') {\r\n      swiper.setTransition(speed);\r\n    } else if (speed === true) {\r\n      swiper.setTransition(swiper.params.speed);\r\n    }\r\n    const getSlideByIndex = index => {\r\n      if (isVirtual) {\r\n        return swiper.slides[swiper.getSlideIndexByData(index)];\r\n      }\r\n      return swiper.slides[index];\r\n    };\r\n    // Find slides currently in view\r\n    if (swiper.params.slidesPerView !== 'auto' && swiper.params.slidesPerView > 1) {\r\n      if (swiper.params.centeredSlides) {\r\n        (swiper.visibleSlides || []).forEach(slide => {\r\n          activeSlides.push(slide);\r\n        });\r\n      } else {\r\n        for (i = 0; i < Math.ceil(swiper.params.slidesPerView); i += 1) {\r\n          const index = swiper.activeIndex + i;\r\n          if (index > swiper.slides.length && !isVirtual) break;\r\n          activeSlides.push(getSlideByIndex(index));\r\n        }\r\n      }\r\n    } else {\r\n      activeSlides.push(getSlideByIndex(swiper.activeIndex));\r\n    }\r\n\r\n    // Find new height from highest slide in view\r\n    for (i = 0; i < activeSlides.length; i += 1) {\r\n      if (typeof activeSlides[i] !== 'undefined') {\r\n        const height = activeSlides[i].offsetHeight;\r\n        newHeight = height > newHeight ? height : newHeight;\r\n      }\r\n    }\r\n\r\n    // Update Height\r\n    if (newHeight || newHeight === 0) swiper.wrapperEl.style.height = `${newHeight}px`;\r\n  }\r\n\r\n  function updateSlidesOffset() {\r\n    const swiper = this;\r\n    const slides = swiper.slides;\r\n    // eslint-disable-next-line\r\n    const minusOffset = swiper.isElement ? swiper.isHorizontal() ? swiper.wrapperEl.offsetLeft : swiper.wrapperEl.offsetTop : 0;\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      slides[i].swiperSlideOffset = (swiper.isHorizontal() ? slides[i].offsetLeft : slides[i].offsetTop) - minusOffset - swiper.cssOverflowAdjustment();\r\n    }\r\n  }\r\n\r\n  const toggleSlideClasses$1 = (slideEl, condition, className) => {\r\n    if (condition && !slideEl.classList.contains(className)) {\r\n      slideEl.classList.add(className);\r\n    } else if (!condition && slideEl.classList.contains(className)) {\r\n      slideEl.classList.remove(className);\r\n    }\r\n  };\r\n  function updateSlidesProgress(translate) {\r\n    if (translate === void 0) {\r\n      translate = this && this.translate || 0;\r\n    }\r\n    const swiper = this;\r\n    const params = swiper.params;\r\n    const {\r\n      slides,\r\n      rtlTranslate: rtl,\r\n      snapGrid\r\n    } = swiper;\r\n    if (slides.length === 0) return;\r\n    if (typeof slides[0].swiperSlideOffset === 'undefined') swiper.updateSlidesOffset();\r\n    let offsetCenter = -translate;\r\n    if (rtl) offsetCenter = translate;\r\n    swiper.visibleSlidesIndexes = [];\r\n    swiper.visibleSlides = [];\r\n    let spaceBetween = params.spaceBetween;\r\n    if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n      spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\r\n    } else if (typeof spaceBetween === 'string') {\r\n      spaceBetween = parseFloat(spaceBetween);\r\n    }\r\n    for (let i = 0; i < slides.length; i += 1) {\r\n      const slide = slides[i];\r\n      let slideOffset = slide.swiperSlideOffset;\r\n      if (params.cssMode && params.centeredSlides) {\r\n        slideOffset -= slides[0].swiperSlideOffset;\r\n      }\r\n      const slideProgress = (offsetCenter + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\r\n      const originalSlideProgress = (offsetCenter - snapGrid[0] + (params.centeredSlides ? swiper.minTranslate() : 0) - slideOffset) / (slide.swiperSlideSize + spaceBetween);\r\n      const slideBefore = -(offsetCenter - slideOffset);\r\n      const slideAfter = slideBefore + swiper.slidesSizesGrid[i];\r\n      const isFullyVisible = slideBefore >= 0 && slideBefore <= swiper.size - swiper.slidesSizesGrid[i];\r\n      const isVisible = slideBefore >= 0 && slideBefore < swiper.size - 1 || slideAfter > 1 && slideAfter <= swiper.size || slideBefore <= 0 && slideAfter >= swiper.size;\r\n      if (isVisible) {\r\n        swiper.visibleSlides.push(slide);\r\n        swiper.visibleSlidesIndexes.push(i);\r\n      }\r\n      toggleSlideClasses$1(slide, isVisible, params.slideVisibleClass);\r\n      toggleSlideClasses$1(slide, isFullyVisible, params.slideFullyVisibleClass);\r\n      slide.progress = rtl ? -slideProgress : slideProgress;\r\n      slide.originalProgress = rtl ? -originalSlideProgress : originalSlideProgress;\r\n    }\r\n  }\r\n\r\n  function updateProgress(translate) {\r\n    const swiper = this;\r\n    if (typeof translate === 'undefined') {\r\n      const multiplier = swiper.rtlTranslate ? -1 : 1;\r\n      // eslint-disable-next-line\r\n      translate = swiper && swiper.translate && swiper.translate * multiplier || 0;\r\n    }\r\n    const params = swiper.params;\r\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n    let {\r\n      progress,\r\n      isBeginning,\r\n      isEnd,\r\n      progressLoop\r\n    } = swiper;\r\n    const wasBeginning = isBeginning;\r\n    const wasEnd = isEnd;\r\n    if (translatesDiff === 0) {\r\n      progress = 0;\r\n      isBeginning = true;\r\n      isEnd = true;\r\n    } else {\r\n      progress = (translate - swiper.minTranslate()) / translatesDiff;\r\n      const isBeginningRounded = Math.abs(translate - swiper.minTranslate()) < 1;\r\n      const isEndRounded = Math.abs(translate - swiper.maxTranslate()) < 1;\r\n      isBeginning = isBeginningRounded || progress <= 0;\r\n      isEnd = isEndRounded || progress >= 1;\r\n      if (isBeginningRounded) progress = 0;\r\n      if (isEndRounded) progress = 1;\r\n    }\r\n    if (params.loop) {\r\n      const firstSlideIndex = swiper.getSlideIndexByData(0);\r\n      const lastSlideIndex = swiper.getSlideIndexByData(swiper.slides.length - 1);\r\n      const firstSlideTranslate = swiper.slidesGrid[firstSlideIndex];\r\n      const lastSlideTranslate = swiper.slidesGrid[lastSlideIndex];\r\n      const translateMax = swiper.slidesGrid[swiper.slidesGrid.length - 1];\r\n      const translateAbs = Math.abs(translate);\r\n      if (translateAbs >= firstSlideTranslate) {\r\n        progressLoop = (translateAbs - firstSlideTranslate) / translateMax;\r\n      } else {\r\n        progressLoop = (translateAbs + translateMax - lastSlideTranslate) / translateMax;\r\n      }\r\n      if (progressLoop > 1) progressLoop -= 1;\r\n    }\r\n    Object.assign(swiper, {\r\n      progress,\r\n      progressLoop,\r\n      isBeginning,\r\n      isEnd\r\n    });\r\n    if (params.watchSlidesProgress || params.centeredSlides && params.autoHeight) swiper.updateSlidesProgress(translate);\r\n    if (isBeginning && !wasBeginning) {\r\n      swiper.emit('reachBeginning toEdge');\r\n    }\r\n    if (isEnd && !wasEnd) {\r\n      swiper.emit('reachEnd toEdge');\r\n    }\r\n    if (wasBeginning && !isBeginning || wasEnd && !isEnd) {\r\n      swiper.emit('fromEdge');\r\n    }\r\n    swiper.emit('progress', progress);\r\n  }\r\n\r\n  const toggleSlideClasses = (slideEl, condition, className) => {\r\n    if (condition && !slideEl.classList.contains(className)) {\r\n      slideEl.classList.add(className);\r\n    } else if (!condition && slideEl.classList.contains(className)) {\r\n      slideEl.classList.remove(className);\r\n    }\r\n  };\r\n  function updateSlidesClasses() {\r\n    const swiper = this;\r\n    const {\r\n      slides,\r\n      params,\r\n      slidesEl,\r\n      activeIndex\r\n    } = swiper;\r\n    const isVirtual = swiper.virtual && params.virtual.enabled;\r\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n    const getFilteredSlide = selector => {\r\n      return elementChildren(slidesEl, `.${params.slideClass}${selector}, swiper-slide${selector}`)[0];\r\n    };\r\n    let activeSlide;\r\n    let prevSlide;\r\n    let nextSlide;\r\n    if (isVirtual) {\r\n      if (params.loop) {\r\n        let slideIndex = activeIndex - swiper.virtual.slidesBefore;\r\n        if (slideIndex < 0) slideIndex = swiper.virtual.slides.length + slideIndex;\r\n        if (slideIndex >= swiper.virtual.slides.length) slideIndex -= swiper.virtual.slides.length;\r\n        activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${slideIndex}\"]`);\r\n      } else {\r\n        activeSlide = getFilteredSlide(`[data-swiper-slide-index=\"${activeIndex}\"]`);\r\n      }\r\n    } else {\r\n      if (gridEnabled) {\r\n        activeSlide = slides.filter(slideEl => slideEl.column === activeIndex)[0];\r\n        nextSlide = slides.filter(slideEl => slideEl.column === activeIndex + 1)[0];\r\n        prevSlide = slides.filter(slideEl => slideEl.column === activeIndex - 1)[0];\r\n      } else {\r\n        activeSlide = slides[activeIndex];\r\n      }\r\n    }\r\n    if (activeSlide) {\r\n      if (!gridEnabled) {\r\n        // Next Slide\r\n        nextSlide = elementNextAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\r\n        if (params.loop && !nextSlide) {\r\n          nextSlide = slides[0];\r\n        }\r\n\r\n        // Prev Slide\r\n        prevSlide = elementPrevAll(activeSlide, `.${params.slideClass}, swiper-slide`)[0];\r\n        if (params.loop && !prevSlide === 0) {\r\n          prevSlide = slides[slides.length - 1];\r\n        }\r\n      }\r\n    }\r\n    slides.forEach(slideEl => {\r\n      toggleSlideClasses(slideEl, slideEl === activeSlide, params.slideActiveClass);\r\n      toggleSlideClasses(slideEl, slideEl === nextSlide, params.slideNextClass);\r\n      toggleSlideClasses(slideEl, slideEl === prevSlide, params.slidePrevClass);\r\n    });\r\n    swiper.emitSlidesClasses();\r\n  }\r\n\r\n  const processLazyPreloader = (swiper, imageEl) => {\r\n    if (!swiper || swiper.destroyed || !swiper.params) return;\r\n    const slideSelector = () => swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\r\n    const slideEl = imageEl.closest(slideSelector());\r\n    if (slideEl) {\r\n      let lazyEl = slideEl.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n      if (!lazyEl && swiper.isElement) {\r\n        if (slideEl.shadowRoot) {\r\n          lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n        } else {\r\n          // init later\r\n          requestAnimationFrame(() => {\r\n            if (slideEl.shadowRoot) {\r\n              lazyEl = slideEl.shadowRoot.querySelector(`.${swiper.params.lazyPreloaderClass}`);\r\n              if (lazyEl) lazyEl.remove();\r\n            }\r\n          });\r\n        }\r\n      }\r\n      if (lazyEl) lazyEl.remove();\r\n    }\r\n  };\r\n  const unlazy = (swiper, index) => {\r\n    if (!swiper.slides[index]) return;\r\n    const imageEl = swiper.slides[index].querySelector('[loading=\"lazy\"]');\r\n    if (imageEl) imageEl.removeAttribute('loading');\r\n  };\r\n  const preload = swiper => {\r\n    if (!swiper || swiper.destroyed || !swiper.params) return;\r\n    let amount = swiper.params.lazyPreloadPrevNext;\r\n    const len = swiper.slides.length;\r\n    if (!len || !amount || amount < 0) return;\r\n    amount = Math.min(amount, len);\r\n    const slidesPerView = swiper.params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(swiper.params.slidesPerView);\r\n    const activeIndex = swiper.activeIndex;\r\n    if (swiper.params.grid && swiper.params.grid.rows > 1) {\r\n      const activeColumn = activeIndex;\r\n      const preloadColumns = [activeColumn - amount];\r\n      preloadColumns.push(...Array.from({\r\n        length: amount\r\n      }).map((_, i) => {\r\n        return activeColumn + slidesPerView + i;\r\n      }));\r\n      swiper.slides.forEach((slideEl, i) => {\r\n        if (preloadColumns.includes(slideEl.column)) unlazy(swiper, i);\r\n      });\r\n      return;\r\n    }\r\n    const slideIndexLastInView = activeIndex + slidesPerView - 1;\r\n    if (swiper.params.rewind || swiper.params.loop) {\r\n      for (let i = activeIndex - amount; i <= slideIndexLastInView + amount; i += 1) {\r\n        const realIndex = (i % len + len) % len;\r\n        if (realIndex < activeIndex || realIndex > slideIndexLastInView) unlazy(swiper, realIndex);\r\n      }\r\n    } else {\r\n      for (let i = Math.max(activeIndex - amount, 0); i <= Math.min(slideIndexLastInView + amount, len - 1); i += 1) {\r\n        if (i !== activeIndex && (i > slideIndexLastInView || i < activeIndex)) {\r\n          unlazy(swiper, i);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  function getActiveIndexByTranslate(swiper) {\r\n    const {\r\n      slidesGrid,\r\n      params\r\n    } = swiper;\r\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n    let activeIndex;\r\n    for (let i = 0; i < slidesGrid.length; i += 1) {\r\n      if (typeof slidesGrid[i + 1] !== 'undefined') {\r\n        if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1] - (slidesGrid[i + 1] - slidesGrid[i]) / 2) {\r\n          activeIndex = i;\r\n        } else if (translate >= slidesGrid[i] && translate < slidesGrid[i + 1]) {\r\n          activeIndex = i + 1;\r\n        }\r\n      } else if (translate >= slidesGrid[i]) {\r\n        activeIndex = i;\r\n      }\r\n    }\r\n    // Normalize slideIndex\r\n    if (params.normalizeSlideIndex) {\r\n      if (activeIndex < 0 || typeof activeIndex === 'undefined') activeIndex = 0;\r\n    }\r\n    return activeIndex;\r\n  }\r\n  function updateActiveIndex(newActiveIndex) {\r\n    const swiper = this;\r\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n    const {\r\n      snapGrid,\r\n      params,\r\n      activeIndex: previousIndex,\r\n      realIndex: previousRealIndex,\r\n      snapIndex: previousSnapIndex\r\n    } = swiper;\r\n    let activeIndex = newActiveIndex;\r\n    let snapIndex;\r\n    const getVirtualRealIndex = aIndex => {\r\n      let realIndex = aIndex - swiper.virtual.slidesBefore;\r\n      if (realIndex < 0) {\r\n        realIndex = swiper.virtual.slides.length + realIndex;\r\n      }\r\n      if (realIndex >= swiper.virtual.slides.length) {\r\n        realIndex -= swiper.virtual.slides.length;\r\n      }\r\n      return realIndex;\r\n    };\r\n    if (typeof activeIndex === 'undefined') {\r\n      activeIndex = getActiveIndexByTranslate(swiper);\r\n    }\r\n    if (snapGrid.indexOf(translate) >= 0) {\r\n      snapIndex = snapGrid.indexOf(translate);\r\n    } else {\r\n      const skip = Math.min(params.slidesPerGroupSkip, activeIndex);\r\n      snapIndex = skip + Math.floor((activeIndex - skip) / params.slidesPerGroup);\r\n    }\r\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\r\n    if (activeIndex === previousIndex && !swiper.params.loop) {\r\n      if (snapIndex !== previousSnapIndex) {\r\n        swiper.snapIndex = snapIndex;\r\n        swiper.emit('snapIndexChange');\r\n      }\r\n      return;\r\n    }\r\n    if (activeIndex === previousIndex && swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\r\n      swiper.realIndex = getVirtualRealIndex(activeIndex);\r\n      return;\r\n    }\r\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n\r\n    // Get real index\r\n    let realIndex;\r\n    if (swiper.virtual && params.virtual.enabled && params.loop) {\r\n      realIndex = getVirtualRealIndex(activeIndex);\r\n    } else if (gridEnabled) {\r\n      const firstSlideInColumn = swiper.slides.filter(slideEl => slideEl.column === activeIndex)[0];\r\n      let activeSlideIndex = parseInt(firstSlideInColumn.getAttribute('data-swiper-slide-index'), 10);\r\n      if (Number.isNaN(activeSlideIndex)) {\r\n        activeSlideIndex = Math.max(swiper.slides.indexOf(firstSlideInColumn), 0);\r\n      }\r\n      realIndex = Math.floor(activeSlideIndex / params.grid.rows);\r\n    } else if (swiper.slides[activeIndex]) {\r\n      const slideIndex = swiper.slides[activeIndex].getAttribute('data-swiper-slide-index');\r\n      if (slideIndex) {\r\n        realIndex = parseInt(slideIndex, 10);\r\n      } else {\r\n        realIndex = activeIndex;\r\n      }\r\n    } else {\r\n      realIndex = activeIndex;\r\n    }\r\n    Object.assign(swiper, {\r\n      previousSnapIndex,\r\n      snapIndex,\r\n      previousRealIndex,\r\n      realIndex,\r\n      previousIndex,\r\n      activeIndex\r\n    });\r\n    if (swiper.initialized) {\r\n      preload(swiper);\r\n    }\r\n    swiper.emit('activeIndexChange');\r\n    swiper.emit('snapIndexChange');\r\n    if (swiper.initialized || swiper.params.runCallbacksOnInit) {\r\n      if (previousRealIndex !== realIndex) {\r\n        swiper.emit('realIndexChange');\r\n      }\r\n      swiper.emit('slideChange');\r\n    }\r\n  }\r\n\r\n  function updateClickedSlide(el, path) {\r\n    const swiper = this;\r\n    const params = swiper.params;\r\n    let slide = el.closest(`.${params.slideClass}, swiper-slide`);\r\n    if (!slide && swiper.isElement && path && path.length > 1 && path.includes(el)) {\r\n      [...path.slice(path.indexOf(el) + 1, path.length)].forEach(pathEl => {\r\n        if (!slide && pathEl.matches && pathEl.matches(`.${params.slideClass}, swiper-slide`)) {\r\n          slide = pathEl;\r\n        }\r\n      });\r\n    }\r\n    let slideFound = false;\r\n    let slideIndex;\r\n    if (slide) {\r\n      for (let i = 0; i < swiper.slides.length; i += 1) {\r\n        if (swiper.slides[i] === slide) {\r\n          slideFound = true;\r\n          slideIndex = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (slide && slideFound) {\r\n      swiper.clickedSlide = slide;\r\n      if (swiper.virtual && swiper.params.virtual.enabled) {\r\n        swiper.clickedIndex = parseInt(slide.getAttribute('data-swiper-slide-index'), 10);\r\n      } else {\r\n        swiper.clickedIndex = slideIndex;\r\n      }\r\n    } else {\r\n      swiper.clickedSlide = undefined;\r\n      swiper.clickedIndex = undefined;\r\n      return;\r\n    }\r\n    if (params.slideToClickedSlide && swiper.clickedIndex !== undefined && swiper.clickedIndex !== swiper.activeIndex) {\r\n      swiper.slideToClickedSlide();\r\n    }\r\n  }\r\n\r\n  var update = {\r\n    updateSize,\r\n    updateSlides,\r\n    updateAutoHeight,\r\n    updateSlidesOffset,\r\n    updateSlidesProgress,\r\n    updateProgress,\r\n    updateSlidesClasses,\r\n    updateActiveIndex,\r\n    updateClickedSlide\r\n  };\r\n\r\n  function getSwiperTranslate(axis) {\r\n    if (axis === void 0) {\r\n      axis = this.isHorizontal() ? 'x' : 'y';\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      rtlTranslate: rtl,\r\n      translate,\r\n      wrapperEl\r\n    } = swiper;\r\n    if (params.virtualTranslate) {\r\n      return rtl ? -translate : translate;\r\n    }\r\n    if (params.cssMode) {\r\n      return translate;\r\n    }\r\n    let currentTranslate = getTranslate(wrapperEl, axis);\r\n    currentTranslate += swiper.cssOverflowAdjustment();\r\n    if (rtl) currentTranslate = -currentTranslate;\r\n    return currentTranslate || 0;\r\n  }\r\n\r\n  function setTranslate(translate, byController) {\r\n    const swiper = this;\r\n    const {\r\n      rtlTranslate: rtl,\r\n      params,\r\n      wrapperEl,\r\n      progress\r\n    } = swiper;\r\n    let x = 0;\r\n    let y = 0;\r\n    const z = 0;\r\n    if (swiper.isHorizontal()) {\r\n      x = rtl ? -translate : translate;\r\n    } else {\r\n      y = translate;\r\n    }\r\n    if (params.roundLengths) {\r\n      x = Math.floor(x);\r\n      y = Math.floor(y);\r\n    }\r\n    swiper.previousTranslate = swiper.translate;\r\n    swiper.translate = swiper.isHorizontal() ? x : y;\r\n    if (params.cssMode) {\r\n      wrapperEl[swiper.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = swiper.isHorizontal() ? -x : -y;\r\n    } else if (!params.virtualTranslate) {\r\n      if (swiper.isHorizontal()) {\r\n        x -= swiper.cssOverflowAdjustment();\r\n      } else {\r\n        y -= swiper.cssOverflowAdjustment();\r\n      }\r\n      wrapperEl.style.transform = `translate3d(${x}px, ${y}px, ${z}px)`;\r\n    }\r\n\r\n    // Check if we need to update progress\r\n    let newProgress;\r\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n    if (translatesDiff === 0) {\r\n      newProgress = 0;\r\n    } else {\r\n      newProgress = (translate - swiper.minTranslate()) / translatesDiff;\r\n    }\r\n    if (newProgress !== progress) {\r\n      swiper.updateProgress(translate);\r\n    }\r\n    swiper.emit('setTranslate', swiper.translate, byController);\r\n  }\r\n\r\n  function minTranslate() {\r\n    return -this.snapGrid[0];\r\n  }\r\n\r\n  function maxTranslate() {\r\n    return -this.snapGrid[this.snapGrid.length - 1];\r\n  }\r\n\r\n  function translateTo(translate, speed, runCallbacks, translateBounds, internal) {\r\n    if (translate === void 0) {\r\n      translate = 0;\r\n    }\r\n    if (speed === void 0) {\r\n      speed = this.params.speed;\r\n    }\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    if (translateBounds === void 0) {\r\n      translateBounds = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      wrapperEl\r\n    } = swiper;\r\n    if (swiper.animating && params.preventInteractionOnTransition) {\r\n      return false;\r\n    }\r\n    const minTranslate = swiper.minTranslate();\r\n    const maxTranslate = swiper.maxTranslate();\r\n    let newTranslate;\r\n    if (translateBounds && translate > minTranslate) newTranslate = minTranslate;else if (translateBounds && translate < maxTranslate) newTranslate = maxTranslate;else newTranslate = translate;\r\n\r\n    // Update progress\r\n    swiper.updateProgress(newTranslate);\r\n    if (params.cssMode) {\r\n      const isH = swiper.isHorizontal();\r\n      if (speed === 0) {\r\n        wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = -newTranslate;\r\n      } else {\r\n        if (!swiper.support.smoothScroll) {\r\n          animateCSSModeScroll({\r\n            swiper,\r\n            targetPosition: -newTranslate,\r\n            side: isH ? 'left' : 'top'\r\n          });\r\n          return true;\r\n        }\r\n        wrapperEl.scrollTo({\r\n          [isH ? 'left' : 'top']: -newTranslate,\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n    if (speed === 0) {\r\n      swiper.setTransition(0);\r\n      swiper.setTranslate(newTranslate);\r\n      if (runCallbacks) {\r\n        swiper.emit('beforeTransitionStart', speed, internal);\r\n        swiper.emit('transitionEnd');\r\n      }\r\n    } else {\r\n      swiper.setTransition(speed);\r\n      swiper.setTranslate(newTranslate);\r\n      if (runCallbacks) {\r\n        swiper.emit('beforeTransitionStart', speed, internal);\r\n        swiper.emit('transitionStart');\r\n      }\r\n      if (!swiper.animating) {\r\n        swiper.animating = true;\r\n        if (!swiper.onTranslateToWrapperTransitionEnd) {\r\n          swiper.onTranslateToWrapperTransitionEnd = function transitionEnd(e) {\r\n            if (!swiper || swiper.destroyed) return;\r\n            if (e.target !== this) return;\r\n            swiper.wrapperEl.removeEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\r\n            swiper.onTranslateToWrapperTransitionEnd = null;\r\n            delete swiper.onTranslateToWrapperTransitionEnd;\r\n            swiper.animating = false;\r\n            if (runCallbacks) {\r\n              swiper.emit('transitionEnd');\r\n            }\r\n          };\r\n        }\r\n        swiper.wrapperEl.addEventListener('transitionend', swiper.onTranslateToWrapperTransitionEnd);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  var translate = {\r\n    getTranslate: getSwiperTranslate,\r\n    setTranslate,\r\n    minTranslate,\r\n    maxTranslate,\r\n    translateTo\r\n  };\r\n\r\n  function setTransition(duration, byController) {\r\n    const swiper = this;\r\n    if (!swiper.params.cssMode) {\r\n      swiper.wrapperEl.style.transitionDuration = `${duration}ms`;\r\n      swiper.wrapperEl.style.transitionDelay = duration === 0 ? `0ms` : '';\r\n    }\r\n    swiper.emit('setTransition', duration, byController);\r\n  }\r\n\r\n  function transitionEmit(_ref) {\r\n    let {\r\n      swiper,\r\n      runCallbacks,\r\n      direction,\r\n      step\r\n    } = _ref;\r\n    const {\r\n      activeIndex,\r\n      previousIndex\r\n    } = swiper;\r\n    let dir = direction;\r\n    if (!dir) {\r\n      if (activeIndex > previousIndex) dir = 'next';else if (activeIndex < previousIndex) dir = 'prev';else dir = 'reset';\r\n    }\r\n    swiper.emit(`transition${step}`);\r\n    if (runCallbacks && activeIndex !== previousIndex) {\r\n      if (dir === 'reset') {\r\n        swiper.emit(`slideResetTransition${step}`);\r\n        return;\r\n      }\r\n      swiper.emit(`slideChangeTransition${step}`);\r\n      if (dir === 'next') {\r\n        swiper.emit(`slideNextTransition${step}`);\r\n      } else {\r\n        swiper.emit(`slidePrevTransition${step}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  function transitionStart(runCallbacks, direction) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params\r\n    } = swiper;\r\n    if (params.cssMode) return;\r\n    if (params.autoHeight) {\r\n      swiper.updateAutoHeight();\r\n    }\r\n    transitionEmit({\r\n      swiper,\r\n      runCallbacks,\r\n      direction,\r\n      step: 'Start'\r\n    });\r\n  }\r\n\r\n  function transitionEnd(runCallbacks, direction) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params\r\n    } = swiper;\r\n    swiper.animating = false;\r\n    if (params.cssMode) return;\r\n    swiper.setTransition(0);\r\n    transitionEmit({\r\n      swiper,\r\n      runCallbacks,\r\n      direction,\r\n      step: 'End'\r\n    });\r\n  }\r\n\r\n  var transition = {\r\n    setTransition,\r\n    transitionStart,\r\n    transitionEnd\r\n  };\r\n\r\n  function slideTo(index, speed, runCallbacks, internal, initial) {\r\n    if (index === void 0) {\r\n      index = 0;\r\n    }\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    if (typeof index === 'string') {\r\n      index = parseInt(index, 10);\r\n    }\r\n    const swiper = this;\r\n    let slideIndex = index;\r\n    if (slideIndex < 0) slideIndex = 0;\r\n    const {\r\n      params,\r\n      snapGrid,\r\n      slidesGrid,\r\n      previousIndex,\r\n      activeIndex,\r\n      rtlTranslate: rtl,\r\n      wrapperEl,\r\n      enabled\r\n    } = swiper;\r\n    if (!enabled && !internal && !initial || swiper.destroyed || swiper.animating && params.preventInteractionOnTransition) {\r\n      return false;\r\n    }\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, slideIndex);\r\n    let snapIndex = skip + Math.floor((slideIndex - skip) / swiper.params.slidesPerGroup);\r\n    if (snapIndex >= snapGrid.length) snapIndex = snapGrid.length - 1;\r\n    const translate = -snapGrid[snapIndex];\r\n    // Normalize slideIndex\r\n    if (params.normalizeSlideIndex) {\r\n      for (let i = 0; i < slidesGrid.length; i += 1) {\r\n        const normalizedTranslate = -Math.floor(translate * 100);\r\n        const normalizedGrid = Math.floor(slidesGrid[i] * 100);\r\n        const normalizedGridNext = Math.floor(slidesGrid[i + 1] * 100);\r\n        if (typeof slidesGrid[i + 1] !== 'undefined') {\r\n          if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext - (normalizedGridNext - normalizedGrid) / 2) {\r\n            slideIndex = i;\r\n          } else if (normalizedTranslate >= normalizedGrid && normalizedTranslate < normalizedGridNext) {\r\n            slideIndex = i + 1;\r\n          }\r\n        } else if (normalizedTranslate >= normalizedGrid) {\r\n          slideIndex = i;\r\n        }\r\n      }\r\n    }\r\n    // Directions locks\r\n    if (swiper.initialized && slideIndex !== activeIndex) {\r\n      if (!swiper.allowSlideNext && (rtl ? translate > swiper.translate && translate > swiper.minTranslate() : translate < swiper.translate && translate < swiper.minTranslate())) {\r\n        return false;\r\n      }\r\n      if (!swiper.allowSlidePrev && translate > swiper.translate && translate > swiper.maxTranslate()) {\r\n        if ((activeIndex || 0) !== slideIndex) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    if (slideIndex !== (previousIndex || 0) && runCallbacks) {\r\n      swiper.emit('beforeSlideChangeStart');\r\n    }\r\n\r\n    // Update progress\r\n    swiper.updateProgress(translate);\r\n    let direction;\r\n    if (slideIndex > activeIndex) direction = 'next';else if (slideIndex < activeIndex) direction = 'prev';else direction = 'reset';\r\n\r\n    // initial virtual\r\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n    const isInitialVirtual = isVirtual && initial;\r\n    // Update Index\r\n    if (!isInitialVirtual && (rtl && -translate === swiper.translate || !rtl && translate === swiper.translate)) {\r\n      swiper.updateActiveIndex(slideIndex);\r\n      // Update Height\r\n      if (params.autoHeight) {\r\n        swiper.updateAutoHeight();\r\n      }\r\n      swiper.updateSlidesClasses();\r\n      if (params.effect !== 'slide') {\r\n        swiper.setTranslate(translate);\r\n      }\r\n      if (direction !== 'reset') {\r\n        swiper.transitionStart(runCallbacks, direction);\r\n        swiper.transitionEnd(runCallbacks, direction);\r\n      }\r\n      return false;\r\n    }\r\n    if (params.cssMode) {\r\n      const isH = swiper.isHorizontal();\r\n      const t = rtl ? translate : -translate;\r\n      if (speed === 0) {\r\n        if (isVirtual) {\r\n          swiper.wrapperEl.style.scrollSnapType = 'none';\r\n          swiper._immediateVirtual = true;\r\n        }\r\n        if (isVirtual && !swiper._cssModeVirtualInitialSet && swiper.params.initialSlide > 0) {\r\n          swiper._cssModeVirtualInitialSet = true;\r\n          requestAnimationFrame(() => {\r\n            wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\r\n          });\r\n        } else {\r\n          wrapperEl[isH ? 'scrollLeft' : 'scrollTop'] = t;\r\n        }\r\n        if (isVirtual) {\r\n          requestAnimationFrame(() => {\r\n            swiper.wrapperEl.style.scrollSnapType = '';\r\n            swiper._immediateVirtual = false;\r\n          });\r\n        }\r\n      } else {\r\n        if (!swiper.support.smoothScroll) {\r\n          animateCSSModeScroll({\r\n            swiper,\r\n            targetPosition: t,\r\n            side: isH ? 'left' : 'top'\r\n          });\r\n          return true;\r\n        }\r\n        wrapperEl.scrollTo({\r\n          [isH ? 'left' : 'top']: t,\r\n          behavior: 'smooth'\r\n        });\r\n      }\r\n      return true;\r\n    }\r\n    swiper.setTransition(speed);\r\n    swiper.setTranslate(translate);\r\n    swiper.updateActiveIndex(slideIndex);\r\n    swiper.updateSlidesClasses();\r\n    swiper.emit('beforeTransitionStart', speed, internal);\r\n    swiper.transitionStart(runCallbacks, direction);\r\n    if (speed === 0) {\r\n      swiper.transitionEnd(runCallbacks, direction);\r\n    } else if (!swiper.animating) {\r\n      swiper.animating = true;\r\n      if (!swiper.onSlideToWrapperTransitionEnd) {\r\n        swiper.onSlideToWrapperTransitionEnd = function transitionEnd(e) {\r\n          if (!swiper || swiper.destroyed) return;\r\n          if (e.target !== this) return;\r\n          swiper.wrapperEl.removeEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\r\n          swiper.onSlideToWrapperTransitionEnd = null;\r\n          delete swiper.onSlideToWrapperTransitionEnd;\r\n          swiper.transitionEnd(runCallbacks, direction);\r\n        };\r\n      }\r\n      swiper.wrapperEl.addEventListener('transitionend', swiper.onSlideToWrapperTransitionEnd);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  function slideToLoop(index, speed, runCallbacks, internal) {\r\n    if (index === void 0) {\r\n      index = 0;\r\n    }\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    if (typeof index === 'string') {\r\n      const indexAsNumber = parseInt(index, 10);\r\n      index = indexAsNumber;\r\n    }\r\n    const swiper = this;\r\n    if (swiper.destroyed) return;\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    const gridEnabled = swiper.grid && swiper.params.grid && swiper.params.grid.rows > 1;\r\n    let newIndex = index;\r\n    if (swiper.params.loop) {\r\n      if (swiper.virtual && swiper.params.virtual.enabled) {\r\n        // eslint-disable-next-line\r\n        newIndex = newIndex + swiper.virtual.slidesBefore;\r\n      } else {\r\n        let targetSlideIndex;\r\n        if (gridEnabled) {\r\n          const slideIndex = newIndex * swiper.params.grid.rows;\r\n          targetSlideIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\r\n        } else {\r\n          targetSlideIndex = swiper.getSlideIndexByData(newIndex);\r\n        }\r\n        const cols = gridEnabled ? Math.ceil(swiper.slides.length / swiper.params.grid.rows) : swiper.slides.length;\r\n        const {\r\n          centeredSlides\r\n        } = swiper.params;\r\n        let slidesPerView = swiper.params.slidesPerView;\r\n        if (slidesPerView === 'auto') {\r\n          slidesPerView = swiper.slidesPerViewDynamic();\r\n        } else {\r\n          slidesPerView = Math.ceil(parseFloat(swiper.params.slidesPerView, 10));\r\n          if (centeredSlides && slidesPerView % 2 === 0) {\r\n            slidesPerView = slidesPerView + 1;\r\n          }\r\n        }\r\n        let needLoopFix = cols - targetSlideIndex < slidesPerView;\r\n        if (centeredSlides) {\r\n          needLoopFix = needLoopFix || targetSlideIndex < Math.ceil(slidesPerView / 2);\r\n        }\r\n        if (internal && centeredSlides && swiper.params.slidesPerView !== 'auto' && !gridEnabled) {\r\n          needLoopFix = false;\r\n        }\r\n        if (needLoopFix) {\r\n          const direction = centeredSlides ? targetSlideIndex < swiper.activeIndex ? 'prev' : 'next' : targetSlideIndex - swiper.activeIndex - 1 < swiper.params.slidesPerView ? 'next' : 'prev';\r\n          swiper.loopFix({\r\n            direction,\r\n            slideTo: true,\r\n            activeSlideIndex: direction === 'next' ? targetSlideIndex + 1 : targetSlideIndex - cols + 1,\r\n            slideRealIndex: direction === 'next' ? swiper.realIndex : undefined\r\n          });\r\n        }\r\n        if (gridEnabled) {\r\n          const slideIndex = newIndex * swiper.params.grid.rows;\r\n          newIndex = swiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === slideIndex)[0].column;\r\n        } else {\r\n          newIndex = swiper.getSlideIndexByData(newIndex);\r\n        }\r\n      }\r\n    }\r\n    requestAnimationFrame(() => {\r\n      swiper.slideTo(newIndex, speed, runCallbacks, internal);\r\n    });\r\n    return swiper;\r\n  }\r\n\r\n  /* eslint no-unused-vars: \"off\" */\r\n  function slideNext(speed, runCallbacks, internal) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      enabled,\r\n      params,\r\n      animating\r\n    } = swiper;\r\n    if (!enabled || swiper.destroyed) return swiper;\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    let perGroup = params.slidesPerGroup;\r\n    if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\r\n      perGroup = Math.max(swiper.slidesPerViewDynamic('current', true), 1);\r\n    }\r\n    const increment = swiper.activeIndex < params.slidesPerGroupSkip ? 1 : perGroup;\r\n    const isVirtual = swiper.virtual && params.virtual.enabled;\r\n    if (params.loop) {\r\n      if (animating && !isVirtual && params.loopPreventsSliding) return false;\r\n      swiper.loopFix({\r\n        direction: 'next'\r\n      });\r\n      // eslint-disable-next-line\r\n      swiper._clientLeft = swiper.wrapperEl.clientLeft;\r\n      if (swiper.activeIndex === swiper.slides.length - 1 && params.cssMode) {\r\n        requestAnimationFrame(() => {\r\n          swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\r\n        });\r\n        return true;\r\n      }\r\n    }\r\n    if (params.rewind && swiper.isEnd) {\r\n      return swiper.slideTo(0, speed, runCallbacks, internal);\r\n    }\r\n    return swiper.slideTo(swiper.activeIndex + increment, speed, runCallbacks, internal);\r\n  }\r\n\r\n  /* eslint no-unused-vars: \"off\" */\r\n  function slidePrev(speed, runCallbacks, internal) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      snapGrid,\r\n      slidesGrid,\r\n      rtlTranslate,\r\n      enabled,\r\n      animating\r\n    } = swiper;\r\n    if (!enabled || swiper.destroyed) return swiper;\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    const isVirtual = swiper.virtual && params.virtual.enabled;\r\n    if (params.loop) {\r\n      if (animating && !isVirtual && params.loopPreventsSliding) return false;\r\n      swiper.loopFix({\r\n        direction: 'prev'\r\n      });\r\n      // eslint-disable-next-line\r\n      swiper._clientLeft = swiper.wrapperEl.clientLeft;\r\n    }\r\n    const translate = rtlTranslate ? swiper.translate : -swiper.translate;\r\n    function normalize(val) {\r\n      if (val < 0) return -Math.floor(Math.abs(val));\r\n      return Math.floor(val);\r\n    }\r\n    const normalizedTranslate = normalize(translate);\r\n    const normalizedSnapGrid = snapGrid.map(val => normalize(val));\r\n    let prevSnap = snapGrid[normalizedSnapGrid.indexOf(normalizedTranslate) - 1];\r\n    if (typeof prevSnap === 'undefined' && params.cssMode) {\r\n      let prevSnapIndex;\r\n      snapGrid.forEach((snap, snapIndex) => {\r\n        if (normalizedTranslate >= snap) {\r\n          // prevSnap = snap;\r\n          prevSnapIndex = snapIndex;\r\n        }\r\n      });\r\n      if (typeof prevSnapIndex !== 'undefined') {\r\n        prevSnap = snapGrid[prevSnapIndex > 0 ? prevSnapIndex - 1 : prevSnapIndex];\r\n      }\r\n    }\r\n    let prevIndex = 0;\r\n    if (typeof prevSnap !== 'undefined') {\r\n      prevIndex = slidesGrid.indexOf(prevSnap);\r\n      if (prevIndex < 0) prevIndex = swiper.activeIndex - 1;\r\n      if (params.slidesPerView === 'auto' && params.slidesPerGroup === 1 && params.slidesPerGroupAuto) {\r\n        prevIndex = prevIndex - swiper.slidesPerViewDynamic('previous', true) + 1;\r\n        prevIndex = Math.max(prevIndex, 0);\r\n      }\r\n    }\r\n    if (params.rewind && swiper.isBeginning) {\r\n      const lastIndex = swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\r\n      return swiper.slideTo(lastIndex, speed, runCallbacks, internal);\r\n    } else if (params.loop && swiper.activeIndex === 0 && params.cssMode) {\r\n      requestAnimationFrame(() => {\r\n        swiper.slideTo(prevIndex, speed, runCallbacks, internal);\r\n      });\r\n      return true;\r\n    }\r\n    return swiper.slideTo(prevIndex, speed, runCallbacks, internal);\r\n  }\r\n\r\n  /* eslint no-unused-vars: \"off\" */\r\n  function slideReset(speed, runCallbacks, internal) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    const swiper = this;\r\n    if (swiper.destroyed) return;\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    return swiper.slideTo(swiper.activeIndex, speed, runCallbacks, internal);\r\n  }\r\n\r\n  /* eslint no-unused-vars: \"off\" */\r\n  function slideToClosest(speed, runCallbacks, internal, threshold) {\r\n    if (runCallbacks === void 0) {\r\n      runCallbacks = true;\r\n    }\r\n    if (threshold === void 0) {\r\n      threshold = 0.5;\r\n    }\r\n    const swiper = this;\r\n    if (swiper.destroyed) return;\r\n    if (typeof speed === 'undefined') {\r\n      speed = swiper.params.speed;\r\n    }\r\n    let index = swiper.activeIndex;\r\n    const skip = Math.min(swiper.params.slidesPerGroupSkip, index);\r\n    const snapIndex = skip + Math.floor((index - skip) / swiper.params.slidesPerGroup);\r\n    const translate = swiper.rtlTranslate ? swiper.translate : -swiper.translate;\r\n    if (translate >= swiper.snapGrid[snapIndex]) {\r\n      // The current translate is on or after the current snap index, so the choice\r\n      // is between the current index and the one after it.\r\n      const currentSnap = swiper.snapGrid[snapIndex];\r\n      const nextSnap = swiper.snapGrid[snapIndex + 1];\r\n      if (translate - currentSnap > (nextSnap - currentSnap) * threshold) {\r\n        index += swiper.params.slidesPerGroup;\r\n      }\r\n    } else {\r\n      // The current translate is before the current snap index, so the choice\r\n      // is between the current index and the one before it.\r\n      const prevSnap = swiper.snapGrid[snapIndex - 1];\r\n      const currentSnap = swiper.snapGrid[snapIndex];\r\n      if (translate - prevSnap <= (currentSnap - prevSnap) * threshold) {\r\n        index -= swiper.params.slidesPerGroup;\r\n      }\r\n    }\r\n    index = Math.max(index, 0);\r\n    index = Math.min(index, swiper.slidesGrid.length - 1);\r\n    return swiper.slideTo(index, speed, runCallbacks, internal);\r\n  }\r\n\r\n  function slideToClickedSlide() {\r\n    const swiper = this;\r\n    if (swiper.destroyed) return;\r\n    const {\r\n      params,\r\n      slidesEl\r\n    } = swiper;\r\n    const slidesPerView = params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : params.slidesPerView;\r\n    let slideToIndex = swiper.clickedIndex;\r\n    let realIndex;\r\n    const slideSelector = swiper.isElement ? `swiper-slide` : `.${params.slideClass}`;\r\n    if (params.loop) {\r\n      if (swiper.animating) return;\r\n      realIndex = parseInt(swiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\r\n      if (params.centeredSlides) {\r\n        if (slideToIndex < swiper.loopedSlides - slidesPerView / 2 || slideToIndex > swiper.slides.length - swiper.loopedSlides + slidesPerView / 2) {\r\n          swiper.loopFix();\r\n          slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\r\n          nextTick(() => {\r\n            swiper.slideTo(slideToIndex);\r\n          });\r\n        } else {\r\n          swiper.slideTo(slideToIndex);\r\n        }\r\n      } else if (slideToIndex > swiper.slides.length - slidesPerView) {\r\n        swiper.loopFix();\r\n        slideToIndex = swiper.getSlideIndex(elementChildren(slidesEl, `${slideSelector}[data-swiper-slide-index=\"${realIndex}\"]`)[0]);\r\n        nextTick(() => {\r\n          swiper.slideTo(slideToIndex);\r\n        });\r\n      } else {\r\n        swiper.slideTo(slideToIndex);\r\n      }\r\n    } else {\r\n      swiper.slideTo(slideToIndex);\r\n    }\r\n  }\r\n\r\n  var slide = {\r\n    slideTo,\r\n    slideToLoop,\r\n    slideNext,\r\n    slidePrev,\r\n    slideReset,\r\n    slideToClosest,\r\n    slideToClickedSlide\r\n  };\r\n\r\n  function loopCreate(slideRealIndex) {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      slidesEl\r\n    } = swiper;\r\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\r\n    const initSlides = () => {\r\n      const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n      slides.forEach((el, index) => {\r\n        el.setAttribute('data-swiper-slide-index', index);\r\n      });\r\n    };\r\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n    const slidesPerGroup = params.slidesPerGroup * (gridEnabled ? params.grid.rows : 1);\r\n    const shouldFillGroup = swiper.slides.length % slidesPerGroup !== 0;\r\n    const shouldFillGrid = gridEnabled && swiper.slides.length % params.grid.rows !== 0;\r\n    const addBlankSlides = amountOfSlides => {\r\n      for (let i = 0; i < amountOfSlides; i += 1) {\r\n        const slideEl = swiper.isElement ? createElement('swiper-slide', [params.slideBlankClass]) : createElement('div', [params.slideClass, params.slideBlankClass]);\r\n        swiper.slidesEl.append(slideEl);\r\n      }\r\n    };\r\n    if (shouldFillGroup) {\r\n      if (params.loopAddBlankSlides) {\r\n        const slidesToAdd = slidesPerGroup - swiper.slides.length % slidesPerGroup;\r\n        addBlankSlides(slidesToAdd);\r\n        swiper.recalcSlides();\r\n        swiper.updateSlides();\r\n      } else {\r\n        showWarning('Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\r\n      }\r\n      initSlides();\r\n    } else if (shouldFillGrid) {\r\n      if (params.loopAddBlankSlides) {\r\n        const slidesToAdd = params.grid.rows - swiper.slides.length % params.grid.rows;\r\n        addBlankSlides(slidesToAdd);\r\n        swiper.recalcSlides();\r\n        swiper.updateSlides();\r\n      } else {\r\n        showWarning('Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)');\r\n      }\r\n      initSlides();\r\n    } else {\r\n      initSlides();\r\n    }\r\n    swiper.loopFix({\r\n      slideRealIndex,\r\n      direction: params.centeredSlides ? undefined : 'next'\r\n    });\r\n  }\r\n\r\n  function loopFix(_temp) {\r\n    let {\r\n      slideRealIndex,\r\n      slideTo = true,\r\n      direction,\r\n      setTranslate,\r\n      activeSlideIndex,\r\n      byController,\r\n      byMousewheel\r\n    } = _temp === void 0 ? {} : _temp;\r\n    const swiper = this;\r\n    if (!swiper.params.loop) return;\r\n    swiper.emit('beforeLoopFix');\r\n    const {\r\n      slides,\r\n      allowSlidePrev,\r\n      allowSlideNext,\r\n      slidesEl,\r\n      params\r\n    } = swiper;\r\n    const {\r\n      centeredSlides\r\n    } = params;\r\n    swiper.allowSlidePrev = true;\r\n    swiper.allowSlideNext = true;\r\n    if (swiper.virtual && params.virtual.enabled) {\r\n      if (slideTo) {\r\n        if (!params.centeredSlides && swiper.snapIndex === 0) {\r\n          swiper.slideTo(swiper.virtual.slides.length, 0, false, true);\r\n        } else if (params.centeredSlides && swiper.snapIndex < params.slidesPerView) {\r\n          swiper.slideTo(swiper.virtual.slides.length + swiper.snapIndex, 0, false, true);\r\n        } else if (swiper.snapIndex === swiper.snapGrid.length - 1) {\r\n          swiper.slideTo(swiper.virtual.slidesBefore, 0, false, true);\r\n        }\r\n      }\r\n      swiper.allowSlidePrev = allowSlidePrev;\r\n      swiper.allowSlideNext = allowSlideNext;\r\n      swiper.emit('loopFix');\r\n      return;\r\n    }\r\n    let slidesPerView = params.slidesPerView;\r\n    if (slidesPerView === 'auto') {\r\n      slidesPerView = swiper.slidesPerViewDynamic();\r\n    } else {\r\n      slidesPerView = Math.ceil(parseFloat(params.slidesPerView, 10));\r\n      if (centeredSlides && slidesPerView % 2 === 0) {\r\n        slidesPerView = slidesPerView + 1;\r\n      }\r\n    }\r\n    const slidesPerGroup = params.slidesPerGroupAuto ? slidesPerView : params.slidesPerGroup;\r\n    let loopedSlides = slidesPerGroup;\r\n    if (loopedSlides % slidesPerGroup !== 0) {\r\n      loopedSlides += slidesPerGroup - loopedSlides % slidesPerGroup;\r\n    }\r\n    loopedSlides += params.loopAdditionalSlides;\r\n    swiper.loopedSlides = loopedSlides;\r\n    const gridEnabled = swiper.grid && params.grid && params.grid.rows > 1;\r\n    if (slides.length < slidesPerView + loopedSlides) {\r\n      showWarning('Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters');\r\n    } else if (gridEnabled && params.grid.fill === 'row') {\r\n      showWarning('Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`');\r\n    }\r\n    const prependSlidesIndexes = [];\r\n    const appendSlidesIndexes = [];\r\n    let activeIndex = swiper.activeIndex;\r\n    if (typeof activeSlideIndex === 'undefined') {\r\n      activeSlideIndex = swiper.getSlideIndex(slides.filter(el => el.classList.contains(params.slideActiveClass))[0]);\r\n    } else {\r\n      activeIndex = activeSlideIndex;\r\n    }\r\n    const isNext = direction === 'next' || !direction;\r\n    const isPrev = direction === 'prev' || !direction;\r\n    let slidesPrepended = 0;\r\n    let slidesAppended = 0;\r\n    const cols = gridEnabled ? Math.ceil(slides.length / params.grid.rows) : slides.length;\r\n    const activeColIndex = gridEnabled ? slides[activeSlideIndex].column : activeSlideIndex;\r\n    const activeColIndexWithShift = activeColIndex + (centeredSlides && typeof setTranslate === 'undefined' ? -slidesPerView / 2 + 0.5 : 0);\r\n    // prepend last slides before start\r\n    if (activeColIndexWithShift < loopedSlides) {\r\n      slidesPrepended = Math.max(loopedSlides - activeColIndexWithShift, slidesPerGroup);\r\n      for (let i = 0; i < loopedSlides - activeColIndexWithShift; i += 1) {\r\n        const index = i - Math.floor(i / cols) * cols;\r\n        if (gridEnabled) {\r\n          const colIndexToPrepend = cols - index - 1;\r\n          for (let i = slides.length - 1; i >= 0; i -= 1) {\r\n            if (slides[i].column === colIndexToPrepend) prependSlidesIndexes.push(i);\r\n          }\r\n          // slides.forEach((slide, slideIndex) => {\r\n          //   if (slide.column === colIndexToPrepend) prependSlidesIndexes.push(slideIndex);\r\n          // });\r\n        } else {\r\n          prependSlidesIndexes.push(cols - index - 1);\r\n        }\r\n      }\r\n    } else if (activeColIndexWithShift + slidesPerView > cols - loopedSlides) {\r\n      slidesAppended = Math.max(activeColIndexWithShift - (cols - loopedSlides * 2), slidesPerGroup);\r\n      for (let i = 0; i < slidesAppended; i += 1) {\r\n        const index = i - Math.floor(i / cols) * cols;\r\n        if (gridEnabled) {\r\n          slides.forEach((slide, slideIndex) => {\r\n            if (slide.column === index) appendSlidesIndexes.push(slideIndex);\r\n          });\r\n        } else {\r\n          appendSlidesIndexes.push(index);\r\n        }\r\n      }\r\n    }\r\n    swiper.__preventObserver__ = true;\r\n    requestAnimationFrame(() => {\r\n      swiper.__preventObserver__ = false;\r\n    });\r\n    if (isPrev) {\r\n      prependSlidesIndexes.forEach(index => {\r\n        slides[index].swiperLoopMoveDOM = true;\r\n        slidesEl.prepend(slides[index]);\r\n        slides[index].swiperLoopMoveDOM = false;\r\n      });\r\n    }\r\n    if (isNext) {\r\n      appendSlidesIndexes.forEach(index => {\r\n        slides[index].swiperLoopMoveDOM = true;\r\n        slidesEl.append(slides[index]);\r\n        slides[index].swiperLoopMoveDOM = false;\r\n      });\r\n    }\r\n    swiper.recalcSlides();\r\n    if (params.slidesPerView === 'auto') {\r\n      swiper.updateSlides();\r\n    } else if (gridEnabled && (prependSlidesIndexes.length > 0 && isPrev || appendSlidesIndexes.length > 0 && isNext)) {\r\n      swiper.slides.forEach((slide, slideIndex) => {\r\n        swiper.grid.updateSlide(slideIndex, slide, swiper.slides);\r\n      });\r\n    }\r\n    if (params.watchSlidesProgress) {\r\n      swiper.updateSlidesOffset();\r\n    }\r\n    if (slideTo) {\r\n      if (prependSlidesIndexes.length > 0 && isPrev) {\r\n        if (typeof slideRealIndex === 'undefined') {\r\n          const currentSlideTranslate = swiper.slidesGrid[activeIndex];\r\n          const newSlideTranslate = swiper.slidesGrid[activeIndex + slidesPrepended];\r\n          const diff = newSlideTranslate - currentSlideTranslate;\r\n          if (byMousewheel) {\r\n            swiper.setTranslate(swiper.translate - diff);\r\n          } else {\r\n            swiper.slideTo(activeIndex + Math.ceil(slidesPrepended), 0, false, true);\r\n            if (setTranslate) {\r\n              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\r\n              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\r\n            }\r\n          }\r\n        } else {\r\n          if (setTranslate) {\r\n            const shift = gridEnabled ? prependSlidesIndexes.length / params.grid.rows : prependSlidesIndexes.length;\r\n            swiper.slideTo(swiper.activeIndex + shift, 0, false, true);\r\n            swiper.touchEventsData.currentTranslate = swiper.translate;\r\n          }\r\n        }\r\n      } else if (appendSlidesIndexes.length > 0 && isNext) {\r\n        if (typeof slideRealIndex === 'undefined') {\r\n          const currentSlideTranslate = swiper.slidesGrid[activeIndex];\r\n          const newSlideTranslate = swiper.slidesGrid[activeIndex - slidesAppended];\r\n          const diff = newSlideTranslate - currentSlideTranslate;\r\n          if (byMousewheel) {\r\n            swiper.setTranslate(swiper.translate - diff);\r\n          } else {\r\n            swiper.slideTo(activeIndex - slidesAppended, 0, false, true);\r\n            if (setTranslate) {\r\n              swiper.touchEventsData.startTranslate = swiper.touchEventsData.startTranslate - diff;\r\n              swiper.touchEventsData.currentTranslate = swiper.touchEventsData.currentTranslate - diff;\r\n            }\r\n          }\r\n        } else {\r\n          const shift = gridEnabled ? appendSlidesIndexes.length / params.grid.rows : appendSlidesIndexes.length;\r\n          swiper.slideTo(swiper.activeIndex - shift, 0, false, true);\r\n        }\r\n      }\r\n    }\r\n    swiper.allowSlidePrev = allowSlidePrev;\r\n    swiper.allowSlideNext = allowSlideNext;\r\n    if (swiper.controller && swiper.controller.control && !byController) {\r\n      const loopParams = {\r\n        slideRealIndex,\r\n        direction,\r\n        setTranslate,\r\n        activeSlideIndex,\r\n        byController: true\r\n      };\r\n      if (Array.isArray(swiper.controller.control)) {\r\n        swiper.controller.control.forEach(c => {\r\n          if (!c.destroyed && c.params.loop) c.loopFix({\r\n            ...loopParams,\r\n            slideTo: c.params.slidesPerView === params.slidesPerView ? slideTo : false\r\n          });\r\n        });\r\n      } else if (swiper.controller.control instanceof swiper.constructor && swiper.controller.control.params.loop) {\r\n        swiper.controller.control.loopFix({\r\n          ...loopParams,\r\n          slideTo: swiper.controller.control.params.slidesPerView === params.slidesPerView ? slideTo : false\r\n        });\r\n      }\r\n    }\r\n    swiper.emit('loopFix');\r\n  }\r\n\r\n  function loopDestroy() {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      slidesEl\r\n    } = swiper;\r\n    if (!params.loop || swiper.virtual && swiper.params.virtual.enabled) return;\r\n    swiper.recalcSlides();\r\n    const newSlidesOrder = [];\r\n    swiper.slides.forEach(slideEl => {\r\n      const index = typeof slideEl.swiperSlideIndex === 'undefined' ? slideEl.getAttribute('data-swiper-slide-index') * 1 : slideEl.swiperSlideIndex;\r\n      newSlidesOrder[index] = slideEl;\r\n    });\r\n    swiper.slides.forEach(slideEl => {\r\n      slideEl.removeAttribute('data-swiper-slide-index');\r\n    });\r\n    newSlidesOrder.forEach(slideEl => {\r\n      slidesEl.append(slideEl);\r\n    });\r\n    swiper.recalcSlides();\r\n    swiper.slideTo(swiper.realIndex, 0);\r\n  }\r\n\r\n  var loop = {\r\n    loopCreate,\r\n    loopFix,\r\n    loopDestroy\r\n  };\r\n\r\n  function setGrabCursor(moving) {\r\n    const swiper = this;\r\n    if (!swiper.params.simulateTouch || swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) return;\r\n    const el = swiper.params.touchEventsTarget === 'container' ? swiper.el : swiper.wrapperEl;\r\n    if (swiper.isElement) {\r\n      swiper.__preventObserver__ = true;\r\n    }\r\n    el.style.cursor = 'move';\r\n    el.style.cursor = moving ? 'grabbing' : 'grab';\r\n    if (swiper.isElement) {\r\n      requestAnimationFrame(() => {\r\n        swiper.__preventObserver__ = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  function unsetGrabCursor() {\r\n    const swiper = this;\r\n    if (swiper.params.watchOverflow && swiper.isLocked || swiper.params.cssMode) {\r\n      return;\r\n    }\r\n    if (swiper.isElement) {\r\n      swiper.__preventObserver__ = true;\r\n    }\r\n    swiper[swiper.params.touchEventsTarget === 'container' ? 'el' : 'wrapperEl'].style.cursor = '';\r\n    if (swiper.isElement) {\r\n      requestAnimationFrame(() => {\r\n        swiper.__preventObserver__ = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  var grabCursor = {\r\n    setGrabCursor,\r\n    unsetGrabCursor\r\n  };\r\n\r\n  // Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd\r\n  function closestElement(selector, base) {\r\n    if (base === void 0) {\r\n      base = this;\r\n    }\r\n    function __closestFrom(el) {\r\n      if (!el || el === getDocument() || el === getWindow()) return null;\r\n      if (el.assignedSlot) el = el.assignedSlot;\r\n      const found = el.closest(selector);\r\n      if (!found && !el.getRootNode) {\r\n        return null;\r\n      }\r\n      return found || __closestFrom(el.getRootNode().host);\r\n    }\r\n    return __closestFrom(base);\r\n  }\r\n  function preventEdgeSwipe(swiper, event, startX) {\r\n    const window = getWindow();\r\n    const {\r\n      params\r\n    } = swiper;\r\n    const edgeSwipeDetection = params.edgeSwipeDetection;\r\n    const edgeSwipeThreshold = params.edgeSwipeThreshold;\r\n    if (edgeSwipeDetection && (startX <= edgeSwipeThreshold || startX >= window.innerWidth - edgeSwipeThreshold)) {\r\n      if (edgeSwipeDetection === 'prevent') {\r\n        event.preventDefault();\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  function onTouchStart(event) {\r\n    const swiper = this;\r\n    const document = getDocument();\r\n    let e = event;\r\n    if (e.originalEvent) e = e.originalEvent;\r\n    const data = swiper.touchEventsData;\r\n    if (e.type === 'pointerdown') {\r\n      if (data.pointerId !== null && data.pointerId !== e.pointerId) {\r\n        return;\r\n      }\r\n      data.pointerId = e.pointerId;\r\n    } else if (e.type === 'touchstart' && e.targetTouches.length === 1) {\r\n      data.touchId = e.targetTouches[0].identifier;\r\n    }\r\n    if (e.type === 'touchstart') {\r\n      // don't proceed touch event\r\n      preventEdgeSwipe(swiper, e, e.targetTouches[0].pageX);\r\n      return;\r\n    }\r\n    const {\r\n      params,\r\n      touches,\r\n      enabled\r\n    } = swiper;\r\n    if (!enabled) return;\r\n    if (!params.simulateTouch && e.pointerType === 'mouse') return;\r\n    if (swiper.animating && params.preventInteractionOnTransition) {\r\n      return;\r\n    }\r\n    if (!swiper.animating && params.cssMode && params.loop) {\r\n      swiper.loopFix();\r\n    }\r\n    let targetEl = e.target;\r\n    if (params.touchEventsTarget === 'wrapper') {\r\n      if (!elementIsChildOf(targetEl, swiper.wrapperEl)) return;\r\n    }\r\n    if ('which' in e && e.which === 3) return;\r\n    if ('button' in e && e.button > 0) return;\r\n    if (data.isTouched && data.isMoved) return;\r\n\r\n    // change target el for shadow root component\r\n    const swipingClassHasValue = !!params.noSwipingClass && params.noSwipingClass !== '';\r\n    // eslint-disable-next-line\r\n    const eventPath = e.composedPath ? e.composedPath() : e.path;\r\n    if (swipingClassHasValue && e.target && e.target.shadowRoot && eventPath) {\r\n      targetEl = eventPath[0];\r\n    }\r\n    const noSwipingSelector = params.noSwipingSelector ? params.noSwipingSelector : `.${params.noSwipingClass}`;\r\n    const isTargetShadow = !!(e.target && e.target.shadowRoot);\r\n\r\n    // use closestElement for shadow root element to get the actual closest for nested shadow root element\r\n    if (params.noSwiping && (isTargetShadow ? closestElement(noSwipingSelector, targetEl) : targetEl.closest(noSwipingSelector))) {\r\n      swiper.allowClick = true;\r\n      return;\r\n    }\r\n    if (params.swipeHandler) {\r\n      if (!targetEl.closest(params.swipeHandler)) return;\r\n    }\r\n    touches.currentX = e.pageX;\r\n    touches.currentY = e.pageY;\r\n    const startX = touches.currentX;\r\n    const startY = touches.currentY;\r\n\r\n    // Do NOT start if iOS edge swipe is detected. Otherwise iOS app cannot swipe-to-go-back anymore\r\n\r\n    if (!preventEdgeSwipe(swiper, e, startX)) {\r\n      return;\r\n    }\r\n    Object.assign(data, {\r\n      isTouched: true,\r\n      isMoved: false,\r\n      allowTouchCallbacks: true,\r\n      isScrolling: undefined,\r\n      startMoving: undefined\r\n    });\r\n    touches.startX = startX;\r\n    touches.startY = startY;\r\n    data.touchStartTime = now();\r\n    swiper.allowClick = true;\r\n    swiper.updateSize();\r\n    swiper.swipeDirection = undefined;\r\n    if (params.threshold > 0) data.allowThresholdMove = false;\r\n    let preventDefault = true;\r\n    if (targetEl.matches(data.focusableElements)) {\r\n      preventDefault = false;\r\n      if (targetEl.nodeName === 'SELECT') {\r\n        data.isTouched = false;\r\n      }\r\n    }\r\n    if (document.activeElement && document.activeElement.matches(data.focusableElements) && document.activeElement !== targetEl) {\r\n      document.activeElement.blur();\r\n    }\r\n    const shouldPreventDefault = preventDefault && swiper.allowTouchMove && params.touchStartPreventDefault;\r\n    if ((params.touchStartForcePreventDefault || shouldPreventDefault) && !targetEl.isContentEditable) {\r\n      e.preventDefault();\r\n    }\r\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode && swiper.animating && !params.cssMode) {\r\n      swiper.freeMode.onTouchStart();\r\n    }\r\n    swiper.emit('touchStart', e);\r\n  }\r\n\r\n  function onTouchMove(event) {\r\n    const document = getDocument();\r\n    const swiper = this;\r\n    const data = swiper.touchEventsData;\r\n    const {\r\n      params,\r\n      touches,\r\n      rtlTranslate: rtl,\r\n      enabled\r\n    } = swiper;\r\n    if (!enabled) return;\r\n    if (!params.simulateTouch && event.pointerType === 'mouse') return;\r\n    let e = event;\r\n    if (e.originalEvent) e = e.originalEvent;\r\n    if (e.type === 'pointermove') {\r\n      if (data.touchId !== null) return; // return from pointer if we use touch\r\n      const id = e.pointerId;\r\n      if (id !== data.pointerId) return;\r\n    }\r\n    let targetTouch;\r\n    if (e.type === 'touchmove') {\r\n      targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\r\n      if (!targetTouch || targetTouch.identifier !== data.touchId) return;\r\n    } else {\r\n      targetTouch = e;\r\n    }\r\n    if (!data.isTouched) {\r\n      if (data.startMoving && data.isScrolling) {\r\n        swiper.emit('touchMoveOpposite', e);\r\n      }\r\n      return;\r\n    }\r\n    const pageX = targetTouch.pageX;\r\n    const pageY = targetTouch.pageY;\r\n    if (e.preventedByNestedSwiper) {\r\n      touches.startX = pageX;\r\n      touches.startY = pageY;\r\n      return;\r\n    }\r\n    if (!swiper.allowTouchMove) {\r\n      if (!e.target.matches(data.focusableElements)) {\r\n        swiper.allowClick = false;\r\n      }\r\n      if (data.isTouched) {\r\n        Object.assign(touches, {\r\n          startX: pageX,\r\n          startY: pageY,\r\n          currentX: pageX,\r\n          currentY: pageY\r\n        });\r\n        data.touchStartTime = now();\r\n      }\r\n      return;\r\n    }\r\n    if (params.touchReleaseOnEdges && !params.loop) {\r\n      if (swiper.isVertical()) {\r\n        // Vertical\r\n        if (pageY < touches.startY && swiper.translate <= swiper.maxTranslate() || pageY > touches.startY && swiper.translate >= swiper.minTranslate()) {\r\n          data.isTouched = false;\r\n          data.isMoved = false;\r\n          return;\r\n        }\r\n      } else if (pageX < touches.startX && swiper.translate <= swiper.maxTranslate() || pageX > touches.startX && swiper.translate >= swiper.minTranslate()) {\r\n        return;\r\n      }\r\n    }\r\n    if (document.activeElement) {\r\n      if (e.target === document.activeElement && e.target.matches(data.focusableElements)) {\r\n        data.isMoved = true;\r\n        swiper.allowClick = false;\r\n        return;\r\n      }\r\n    }\r\n    if (data.allowTouchCallbacks) {\r\n      swiper.emit('touchMove', e);\r\n    }\r\n    touches.previousX = touches.currentX;\r\n    touches.previousY = touches.currentY;\r\n    touches.currentX = pageX;\r\n    touches.currentY = pageY;\r\n    const diffX = touches.currentX - touches.startX;\r\n    const diffY = touches.currentY - touches.startY;\r\n    if (swiper.params.threshold && Math.sqrt(diffX ** 2 + diffY ** 2) < swiper.params.threshold) return;\r\n    if (typeof data.isScrolling === 'undefined') {\r\n      let touchAngle;\r\n      if (swiper.isHorizontal() && touches.currentY === touches.startY || swiper.isVertical() && touches.currentX === touches.startX) {\r\n        data.isScrolling = false;\r\n      } else {\r\n        // eslint-disable-next-line\r\n        if (diffX * diffX + diffY * diffY >= 25) {\r\n          touchAngle = Math.atan2(Math.abs(diffY), Math.abs(diffX)) * 180 / Math.PI;\r\n          data.isScrolling = swiper.isHorizontal() ? touchAngle > params.touchAngle : 90 - touchAngle > params.touchAngle;\r\n        }\r\n      }\r\n    }\r\n    if (data.isScrolling) {\r\n      swiper.emit('touchMoveOpposite', e);\r\n    }\r\n    if (typeof data.startMoving === 'undefined') {\r\n      if (touches.currentX !== touches.startX || touches.currentY !== touches.startY) {\r\n        data.startMoving = true;\r\n      }\r\n    }\r\n    if (data.isScrolling || e.type === 'touchmove' && data.preventTouchMoveFromPointerMove) {\r\n      data.isTouched = false;\r\n      return;\r\n    }\r\n    if (!data.startMoving) {\r\n      return;\r\n    }\r\n    swiper.allowClick = false;\r\n    if (!params.cssMode && e.cancelable) {\r\n      e.preventDefault();\r\n    }\r\n    if (params.touchMoveStopPropagation && !params.nested) {\r\n      e.stopPropagation();\r\n    }\r\n    let diff = swiper.isHorizontal() ? diffX : diffY;\r\n    let touchesDiff = swiper.isHorizontal() ? touches.currentX - touches.previousX : touches.currentY - touches.previousY;\r\n    if (params.oneWayMovement) {\r\n      diff = Math.abs(diff) * (rtl ? 1 : -1);\r\n      touchesDiff = Math.abs(touchesDiff) * (rtl ? 1 : -1);\r\n    }\r\n    touches.diff = diff;\r\n    diff *= params.touchRatio;\r\n    if (rtl) {\r\n      diff = -diff;\r\n      touchesDiff = -touchesDiff;\r\n    }\r\n    const prevTouchesDirection = swiper.touchesDirection;\r\n    swiper.swipeDirection = diff > 0 ? 'prev' : 'next';\r\n    swiper.touchesDirection = touchesDiff > 0 ? 'prev' : 'next';\r\n    const isLoop = swiper.params.loop && !params.cssMode;\r\n    const allowLoopFix = swiper.touchesDirection === 'next' && swiper.allowSlideNext || swiper.touchesDirection === 'prev' && swiper.allowSlidePrev;\r\n    if (!data.isMoved) {\r\n      if (isLoop && allowLoopFix) {\r\n        swiper.loopFix({\r\n          direction: swiper.swipeDirection\r\n        });\r\n      }\r\n      data.startTranslate = swiper.getTranslate();\r\n      swiper.setTransition(0);\r\n      if (swiper.animating) {\r\n        const evt = new window.CustomEvent('transitionend', {\r\n          bubbles: true,\r\n          cancelable: true,\r\n          detail: {\r\n            bySwiperTouchMove: true\r\n          }\r\n        });\r\n        swiper.wrapperEl.dispatchEvent(evt);\r\n      }\r\n      data.allowMomentumBounce = false;\r\n      // Grab Cursor\r\n      if (params.grabCursor && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\r\n        swiper.setGrabCursor(true);\r\n      }\r\n      swiper.emit('sliderFirstMove', e);\r\n    }\r\n    let loopFixed;\r\n    new Date().getTime();\r\n    if (data.isMoved && data.allowThresholdMove && prevTouchesDirection !== swiper.touchesDirection && isLoop && allowLoopFix && Math.abs(diff) >= 1) {\r\n      Object.assign(touches, {\r\n        startX: pageX,\r\n        startY: pageY,\r\n        currentX: pageX,\r\n        currentY: pageY,\r\n        startTranslate: data.currentTranslate\r\n      });\r\n      data.loopSwapReset = true;\r\n      data.startTranslate = data.currentTranslate;\r\n      return;\r\n    }\r\n    swiper.emit('sliderMove', e);\r\n    data.isMoved = true;\r\n    data.currentTranslate = diff + data.startTranslate;\r\n    let disableParentSwiper = true;\r\n    let resistanceRatio = params.resistanceRatio;\r\n    if (params.touchReleaseOnEdges) {\r\n      resistanceRatio = 0;\r\n    }\r\n    if (diff > 0) {\r\n      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate > (params.centeredSlides ? swiper.minTranslate() - swiper.slidesSizesGrid[swiper.activeIndex + 1] - (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.activeIndex + 1] + swiper.params.spaceBetween : 0) - swiper.params.spaceBetween : swiper.minTranslate())) {\r\n        swiper.loopFix({\r\n          direction: 'prev',\r\n          setTranslate: true,\r\n          activeSlideIndex: 0\r\n        });\r\n      }\r\n      if (data.currentTranslate > swiper.minTranslate()) {\r\n        disableParentSwiper = false;\r\n        if (params.resistance) {\r\n          data.currentTranslate = swiper.minTranslate() - 1 + (-swiper.minTranslate() + data.startTranslate + diff) ** resistanceRatio;\r\n        }\r\n      }\r\n    } else if (diff < 0) {\r\n      if (isLoop && allowLoopFix && !loopFixed && data.allowThresholdMove && data.currentTranslate < (params.centeredSlides ? swiper.maxTranslate() + swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween + (params.slidesPerView !== 'auto' && swiper.slides.length - params.slidesPerView >= 2 ? swiper.slidesSizesGrid[swiper.slidesSizesGrid.length - 1] + swiper.params.spaceBetween : 0) : swiper.maxTranslate())) {\r\n        swiper.loopFix({\r\n          direction: 'next',\r\n          setTranslate: true,\r\n          activeSlideIndex: swiper.slides.length - (params.slidesPerView === 'auto' ? swiper.slidesPerViewDynamic() : Math.ceil(parseFloat(params.slidesPerView, 10)))\r\n        });\r\n      }\r\n      if (data.currentTranslate < swiper.maxTranslate()) {\r\n        disableParentSwiper = false;\r\n        if (params.resistance) {\r\n          data.currentTranslate = swiper.maxTranslate() + 1 - (swiper.maxTranslate() - data.startTranslate - diff) ** resistanceRatio;\r\n        }\r\n      }\r\n    }\r\n    if (disableParentSwiper) {\r\n      e.preventedByNestedSwiper = true;\r\n    }\r\n\r\n    // Directions locks\r\n    if (!swiper.allowSlideNext && swiper.swipeDirection === 'next' && data.currentTranslate < data.startTranslate) {\r\n      data.currentTranslate = data.startTranslate;\r\n    }\r\n    if (!swiper.allowSlidePrev && swiper.swipeDirection === 'prev' && data.currentTranslate > data.startTranslate) {\r\n      data.currentTranslate = data.startTranslate;\r\n    }\r\n    if (!swiper.allowSlidePrev && !swiper.allowSlideNext) {\r\n      data.currentTranslate = data.startTranslate;\r\n    }\r\n\r\n    // Threshold\r\n    if (params.threshold > 0) {\r\n      if (Math.abs(diff) > params.threshold || data.allowThresholdMove) {\r\n        if (!data.allowThresholdMove) {\r\n          data.allowThresholdMove = true;\r\n          touches.startX = touches.currentX;\r\n          touches.startY = touches.currentY;\r\n          data.currentTranslate = data.startTranslate;\r\n          touches.diff = swiper.isHorizontal() ? touches.currentX - touches.startX : touches.currentY - touches.startY;\r\n          return;\r\n        }\r\n      } else {\r\n        data.currentTranslate = data.startTranslate;\r\n        return;\r\n      }\r\n    }\r\n    if (!params.followFinger || params.cssMode) return;\r\n\r\n    // Update active index in free mode\r\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode || params.watchSlidesProgress) {\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    }\r\n    if (params.freeMode && params.freeMode.enabled && swiper.freeMode) {\r\n      swiper.freeMode.onTouchMove();\r\n    }\r\n    // Update progress\r\n    swiper.updateProgress(data.currentTranslate);\r\n    // Update translate\r\n    swiper.setTranslate(data.currentTranslate);\r\n  }\r\n\r\n  function onTouchEnd(event) {\r\n    const swiper = this;\r\n    const data = swiper.touchEventsData;\r\n    let e = event;\r\n    if (e.originalEvent) e = e.originalEvent;\r\n    let targetTouch;\r\n    const isTouchEvent = e.type === 'touchend' || e.type === 'touchcancel';\r\n    if (!isTouchEvent) {\r\n      if (data.touchId !== null) return; // return from pointer if we use touch\r\n      if (e.pointerId !== data.pointerId) return;\r\n      targetTouch = e;\r\n    } else {\r\n      targetTouch = [...e.changedTouches].filter(t => t.identifier === data.touchId)[0];\r\n      if (!targetTouch || targetTouch.identifier !== data.touchId) return;\r\n    }\r\n    if (['pointercancel', 'pointerout', 'pointerleave', 'contextmenu'].includes(e.type)) {\r\n      const proceed = ['pointercancel', 'contextmenu'].includes(e.type) && (swiper.browser.isSafari || swiper.browser.isWebView);\r\n      if (!proceed) {\r\n        return;\r\n      }\r\n    }\r\n    data.pointerId = null;\r\n    data.touchId = null;\r\n    const {\r\n      params,\r\n      touches,\r\n      rtlTranslate: rtl,\r\n      slidesGrid,\r\n      enabled\r\n    } = swiper;\r\n    if (!enabled) return;\r\n    if (!params.simulateTouch && e.pointerType === 'mouse') return;\r\n    if (data.allowTouchCallbacks) {\r\n      swiper.emit('touchEnd', e);\r\n    }\r\n    data.allowTouchCallbacks = false;\r\n    if (!data.isTouched) {\r\n      if (data.isMoved && params.grabCursor) {\r\n        swiper.setGrabCursor(false);\r\n      }\r\n      data.isMoved = false;\r\n      data.startMoving = false;\r\n      return;\r\n    }\r\n\r\n    // Return Grab Cursor\r\n    if (params.grabCursor && data.isMoved && data.isTouched && (swiper.allowSlideNext === true || swiper.allowSlidePrev === true)) {\r\n      swiper.setGrabCursor(false);\r\n    }\r\n\r\n    // Time diff\r\n    const touchEndTime = now();\r\n    const timeDiff = touchEndTime - data.touchStartTime;\r\n\r\n    // Tap, doubleTap, Click\r\n    if (swiper.allowClick) {\r\n      const pathTree = e.path || e.composedPath && e.composedPath();\r\n      swiper.updateClickedSlide(pathTree && pathTree[0] || e.target, pathTree);\r\n      swiper.emit('tap click', e);\r\n      if (timeDiff < 300 && touchEndTime - data.lastClickTime < 300) {\r\n        swiper.emit('doubleTap doubleClick', e);\r\n      }\r\n    }\r\n    data.lastClickTime = now();\r\n    nextTick(() => {\r\n      if (!swiper.destroyed) swiper.allowClick = true;\r\n    });\r\n    if (!data.isTouched || !data.isMoved || !swiper.swipeDirection || touches.diff === 0 && !data.loopSwapReset || data.currentTranslate === data.startTranslate && !data.loopSwapReset) {\r\n      data.isTouched = false;\r\n      data.isMoved = false;\r\n      data.startMoving = false;\r\n      return;\r\n    }\r\n    data.isTouched = false;\r\n    data.isMoved = false;\r\n    data.startMoving = false;\r\n    let currentPos;\r\n    if (params.followFinger) {\r\n      currentPos = rtl ? swiper.translate : -swiper.translate;\r\n    } else {\r\n      currentPos = -data.currentTranslate;\r\n    }\r\n    if (params.cssMode) {\r\n      return;\r\n    }\r\n    if (params.freeMode && params.freeMode.enabled) {\r\n      swiper.freeMode.onTouchEnd({\r\n        currentPos\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Find current slide\r\n    const swipeToLast = currentPos >= -swiper.maxTranslate() && !swiper.params.loop;\r\n    let stopIndex = 0;\r\n    let groupSize = swiper.slidesSizesGrid[0];\r\n    for (let i = 0; i < slidesGrid.length; i += i < params.slidesPerGroupSkip ? 1 : params.slidesPerGroup) {\r\n      const increment = i < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\r\n      if (typeof slidesGrid[i + increment] !== 'undefined') {\r\n        if (swipeToLast || currentPos >= slidesGrid[i] && currentPos < slidesGrid[i + increment]) {\r\n          stopIndex = i;\r\n          groupSize = slidesGrid[i + increment] - slidesGrid[i];\r\n        }\r\n      } else if (swipeToLast || currentPos >= slidesGrid[i]) {\r\n        stopIndex = i;\r\n        groupSize = slidesGrid[slidesGrid.length - 1] - slidesGrid[slidesGrid.length - 2];\r\n      }\r\n    }\r\n    let rewindFirstIndex = null;\r\n    let rewindLastIndex = null;\r\n    if (params.rewind) {\r\n      if (swiper.isBeginning) {\r\n        rewindLastIndex = params.virtual && params.virtual.enabled && swiper.virtual ? swiper.virtual.slides.length - 1 : swiper.slides.length - 1;\r\n      } else if (swiper.isEnd) {\r\n        rewindFirstIndex = 0;\r\n      }\r\n    }\r\n    // Find current slide size\r\n    const ratio = (currentPos - slidesGrid[stopIndex]) / groupSize;\r\n    const increment = stopIndex < params.slidesPerGroupSkip - 1 ? 1 : params.slidesPerGroup;\r\n    if (timeDiff > params.longSwipesMs) {\r\n      // Long touches\r\n      if (!params.longSwipes) {\r\n        swiper.slideTo(swiper.activeIndex);\r\n        return;\r\n      }\r\n      if (swiper.swipeDirection === 'next') {\r\n        if (ratio >= params.longSwipesRatio) swiper.slideTo(params.rewind && swiper.isEnd ? rewindFirstIndex : stopIndex + increment);else swiper.slideTo(stopIndex);\r\n      }\r\n      if (swiper.swipeDirection === 'prev') {\r\n        if (ratio > 1 - params.longSwipesRatio) {\r\n          swiper.slideTo(stopIndex + increment);\r\n        } else if (rewindLastIndex !== null && ratio < 0 && Math.abs(ratio) > params.longSwipesRatio) {\r\n          swiper.slideTo(rewindLastIndex);\r\n        } else {\r\n          swiper.slideTo(stopIndex);\r\n        }\r\n      }\r\n    } else {\r\n      // Short swipes\r\n      if (!params.shortSwipes) {\r\n        swiper.slideTo(swiper.activeIndex);\r\n        return;\r\n      }\r\n      const isNavButtonTarget = swiper.navigation && (e.target === swiper.navigation.nextEl || e.target === swiper.navigation.prevEl);\r\n      if (!isNavButtonTarget) {\r\n        if (swiper.swipeDirection === 'next') {\r\n          swiper.slideTo(rewindFirstIndex !== null ? rewindFirstIndex : stopIndex + increment);\r\n        }\r\n        if (swiper.swipeDirection === 'prev') {\r\n          swiper.slideTo(rewindLastIndex !== null ? rewindLastIndex : stopIndex);\r\n        }\r\n      } else if (e.target === swiper.navigation.nextEl) {\r\n        swiper.slideTo(stopIndex + increment);\r\n      } else {\r\n        swiper.slideTo(stopIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  function onResize() {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      el\r\n    } = swiper;\r\n    if (el && el.offsetWidth === 0) return;\r\n\r\n    // Breakpoints\r\n    if (params.breakpoints) {\r\n      swiper.setBreakpoint();\r\n    }\r\n\r\n    // Save locks\r\n    const {\r\n      allowSlideNext,\r\n      allowSlidePrev,\r\n      snapGrid\r\n    } = swiper;\r\n    const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n\r\n    // Disable locks on resize\r\n    swiper.allowSlideNext = true;\r\n    swiper.allowSlidePrev = true;\r\n    swiper.updateSize();\r\n    swiper.updateSlides();\r\n    swiper.updateSlidesClasses();\r\n    const isVirtualLoop = isVirtual && params.loop;\r\n    if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !swiper.isBeginning && !swiper.params.centeredSlides && !isVirtualLoop) {\r\n      swiper.slideTo(swiper.slides.length - 1, 0, false, true);\r\n    } else {\r\n      if (swiper.params.loop && !isVirtual) {\r\n        swiper.slideToLoop(swiper.realIndex, 0, false, true);\r\n      } else {\r\n        swiper.slideTo(swiper.activeIndex, 0, false, true);\r\n      }\r\n    }\r\n    if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\r\n      clearTimeout(swiper.autoplay.resizeTimeout);\r\n      swiper.autoplay.resizeTimeout = setTimeout(() => {\r\n        if (swiper.autoplay && swiper.autoplay.running && swiper.autoplay.paused) {\r\n          swiper.autoplay.resume();\r\n        }\r\n      }, 500);\r\n    }\r\n    // Return locks after resize\r\n    swiper.allowSlidePrev = allowSlidePrev;\r\n    swiper.allowSlideNext = allowSlideNext;\r\n    if (swiper.params.watchOverflow && snapGrid !== swiper.snapGrid) {\r\n      swiper.checkOverflow();\r\n    }\r\n  }\r\n\r\n  function onClick(e) {\r\n    const swiper = this;\r\n    if (!swiper.enabled) return;\r\n    if (!swiper.allowClick) {\r\n      if (swiper.params.preventClicks) e.preventDefault();\r\n      if (swiper.params.preventClicksPropagation && swiper.animating) {\r\n        e.stopPropagation();\r\n        e.stopImmediatePropagation();\r\n      }\r\n    }\r\n  }\r\n\r\n  function onScroll() {\r\n    const swiper = this;\r\n    const {\r\n      wrapperEl,\r\n      rtlTranslate,\r\n      enabled\r\n    } = swiper;\r\n    if (!enabled) return;\r\n    swiper.previousTranslate = swiper.translate;\r\n    if (swiper.isHorizontal()) {\r\n      swiper.translate = -wrapperEl.scrollLeft;\r\n    } else {\r\n      swiper.translate = -wrapperEl.scrollTop;\r\n    }\r\n    // eslint-disable-next-line\r\n    if (swiper.translate === 0) swiper.translate = 0;\r\n    swiper.updateActiveIndex();\r\n    swiper.updateSlidesClasses();\r\n    let newProgress;\r\n    const translatesDiff = swiper.maxTranslate() - swiper.minTranslate();\r\n    if (translatesDiff === 0) {\r\n      newProgress = 0;\r\n    } else {\r\n      newProgress = (swiper.translate - swiper.minTranslate()) / translatesDiff;\r\n    }\r\n    if (newProgress !== swiper.progress) {\r\n      swiper.updateProgress(rtlTranslate ? -swiper.translate : swiper.translate);\r\n    }\r\n    swiper.emit('setTranslate', swiper.translate, false);\r\n  }\r\n\r\n  function onLoad(e) {\r\n    const swiper = this;\r\n    processLazyPreloader(swiper, e.target);\r\n    if (swiper.params.cssMode || swiper.params.slidesPerView !== 'auto' && !swiper.params.autoHeight) {\r\n      return;\r\n    }\r\n    swiper.update();\r\n  }\r\n\r\n  function onDocumentTouchStart() {\r\n    const swiper = this;\r\n    if (swiper.documentTouchHandlerProceeded) return;\r\n    swiper.documentTouchHandlerProceeded = true;\r\n    if (swiper.params.touchReleaseOnEdges) {\r\n      swiper.el.style.touchAction = 'auto';\r\n    }\r\n  }\r\n\r\n  const events = (swiper, method) => {\r\n    const document = getDocument();\r\n    const {\r\n      params,\r\n      el,\r\n      wrapperEl,\r\n      device\r\n    } = swiper;\r\n    const capture = !!params.nested;\r\n    const domMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\r\n    const swiperMethod = method;\r\n    if (!el || typeof el === 'string') return;\r\n\r\n    // Touch Events\r\n    document[domMethod]('touchstart', swiper.onDocumentTouchStart, {\r\n      passive: false,\r\n      capture\r\n    });\r\n    el[domMethod]('touchstart', swiper.onTouchStart, {\r\n      passive: false\r\n    });\r\n    el[domMethod]('pointerdown', swiper.onTouchStart, {\r\n      passive: false\r\n    });\r\n    document[domMethod]('touchmove', swiper.onTouchMove, {\r\n      passive: false,\r\n      capture\r\n    });\r\n    document[domMethod]('pointermove', swiper.onTouchMove, {\r\n      passive: false,\r\n      capture\r\n    });\r\n    document[domMethod]('touchend', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('pointerup', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('pointercancel', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('touchcancel', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('pointerout', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('pointerleave', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n    document[domMethod]('contextmenu', swiper.onTouchEnd, {\r\n      passive: true\r\n    });\r\n\r\n    // Prevent Links Clicks\r\n    if (params.preventClicks || params.preventClicksPropagation) {\r\n      el[domMethod]('click', swiper.onClick, true);\r\n    }\r\n    if (params.cssMode) {\r\n      wrapperEl[domMethod]('scroll', swiper.onScroll);\r\n    }\r\n\r\n    // Resize handler\r\n    if (params.updateOnWindowResize) {\r\n      swiper[swiperMethod](device.ios || device.android ? 'resize orientationchange observerUpdate' : 'resize observerUpdate', onResize, true);\r\n    } else {\r\n      swiper[swiperMethod]('observerUpdate', onResize, true);\r\n    }\r\n\r\n    // Images loader\r\n    el[domMethod]('load', swiper.onLoad, {\r\n      capture: true\r\n    });\r\n  };\r\n  function attachEvents() {\r\n    const swiper = this;\r\n    const {\r\n      params\r\n    } = swiper;\r\n    swiper.onTouchStart = onTouchStart.bind(swiper);\r\n    swiper.onTouchMove = onTouchMove.bind(swiper);\r\n    swiper.onTouchEnd = onTouchEnd.bind(swiper);\r\n    swiper.onDocumentTouchStart = onDocumentTouchStart.bind(swiper);\r\n    if (params.cssMode) {\r\n      swiper.onScroll = onScroll.bind(swiper);\r\n    }\r\n    swiper.onClick = onClick.bind(swiper);\r\n    swiper.onLoad = onLoad.bind(swiper);\r\n    events(swiper, 'on');\r\n  }\r\n  function detachEvents() {\r\n    const swiper = this;\r\n    events(swiper, 'off');\r\n  }\r\n  var events$1 = {\r\n    attachEvents,\r\n    detachEvents\r\n  };\r\n\r\n  const isGridEnabled = (swiper, params) => {\r\n    return swiper.grid && params.grid && params.grid.rows > 1;\r\n  };\r\n  function setBreakpoint() {\r\n    const swiper = this;\r\n    const {\r\n      realIndex,\r\n      initialized,\r\n      params,\r\n      el\r\n    } = swiper;\r\n    const breakpoints = params.breakpoints;\r\n    if (!breakpoints || breakpoints && Object.keys(breakpoints).length === 0) return;\r\n\r\n    // Get breakpoint for window width and update parameters\r\n    const breakpoint = swiper.getBreakpoint(breakpoints, swiper.params.breakpointsBase, swiper.el);\r\n    if (!breakpoint || swiper.currentBreakpoint === breakpoint) return;\r\n    const breakpointOnlyParams = breakpoint in breakpoints ? breakpoints[breakpoint] : undefined;\r\n    const breakpointParams = breakpointOnlyParams || swiper.originalParams;\r\n    const wasMultiRow = isGridEnabled(swiper, params);\r\n    const isMultiRow = isGridEnabled(swiper, breakpointParams);\r\n    const wasGrabCursor = swiper.params.grabCursor;\r\n    const isGrabCursor = breakpointParams.grabCursor;\r\n    const wasEnabled = params.enabled;\r\n    if (wasMultiRow && !isMultiRow) {\r\n      el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\r\n      swiper.emitContainerClasses();\r\n    } else if (!wasMultiRow && isMultiRow) {\r\n      el.classList.add(`${params.containerModifierClass}grid`);\r\n      if (breakpointParams.grid.fill && breakpointParams.grid.fill === 'column' || !breakpointParams.grid.fill && params.grid.fill === 'column') {\r\n        el.classList.add(`${params.containerModifierClass}grid-column`);\r\n      }\r\n      swiper.emitContainerClasses();\r\n    }\r\n    if (wasGrabCursor && !isGrabCursor) {\r\n      swiper.unsetGrabCursor();\r\n    } else if (!wasGrabCursor && isGrabCursor) {\r\n      swiper.setGrabCursor();\r\n    }\r\n\r\n    // Toggle navigation, pagination, scrollbar\r\n    ['navigation', 'pagination', 'scrollbar'].forEach(prop => {\r\n      if (typeof breakpointParams[prop] === 'undefined') return;\r\n      const wasModuleEnabled = params[prop] && params[prop].enabled;\r\n      const isModuleEnabled = breakpointParams[prop] && breakpointParams[prop].enabled;\r\n      if (wasModuleEnabled && !isModuleEnabled) {\r\n        swiper[prop].disable();\r\n      }\r\n      if (!wasModuleEnabled && isModuleEnabled) {\r\n        swiper[prop].enable();\r\n      }\r\n    });\r\n    const directionChanged = breakpointParams.direction && breakpointParams.direction !== params.direction;\r\n    const needsReLoop = params.loop && (breakpointParams.slidesPerView !== params.slidesPerView || directionChanged);\r\n    const wasLoop = params.loop;\r\n    if (directionChanged && initialized) {\r\n      swiper.changeDirection();\r\n    }\r\n    extend(swiper.params, breakpointParams);\r\n    const isEnabled = swiper.params.enabled;\r\n    const hasLoop = swiper.params.loop;\r\n    Object.assign(swiper, {\r\n      allowTouchMove: swiper.params.allowTouchMove,\r\n      allowSlideNext: swiper.params.allowSlideNext,\r\n      allowSlidePrev: swiper.params.allowSlidePrev\r\n    });\r\n    if (wasEnabled && !isEnabled) {\r\n      swiper.disable();\r\n    } else if (!wasEnabled && isEnabled) {\r\n      swiper.enable();\r\n    }\r\n    swiper.currentBreakpoint = breakpoint;\r\n    swiper.emit('_beforeBreakpoint', breakpointParams);\r\n    if (initialized) {\r\n      if (needsReLoop) {\r\n        swiper.loopDestroy();\r\n        swiper.loopCreate(realIndex);\r\n        swiper.updateSlides();\r\n      } else if (!wasLoop && hasLoop) {\r\n        swiper.loopCreate(realIndex);\r\n        swiper.updateSlides();\r\n      } else if (wasLoop && !hasLoop) {\r\n        swiper.loopDestroy();\r\n      }\r\n    }\r\n    swiper.emit('breakpoint', breakpointParams);\r\n  }\r\n\r\n  function getBreakpoint(breakpoints, base, containerEl) {\r\n    if (base === void 0) {\r\n      base = 'window';\r\n    }\r\n    if (!breakpoints || base === 'container' && !containerEl) return undefined;\r\n    let breakpoint = false;\r\n    const window = getWindow();\r\n    const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\r\n    const points = Object.keys(breakpoints).map(point => {\r\n      if (typeof point === 'string' && point.indexOf('@') === 0) {\r\n        const minRatio = parseFloat(point.substr(1));\r\n        const value = currentHeight * minRatio;\r\n        return {\r\n          value,\r\n          point\r\n        };\r\n      }\r\n      return {\r\n        value: point,\r\n        point\r\n      };\r\n    });\r\n    points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\r\n    for (let i = 0; i < points.length; i += 1) {\r\n      const {\r\n        point,\r\n        value\r\n      } = points[i];\r\n      if (base === 'window') {\r\n        if (window.matchMedia(`(min-width: ${value}px)`).matches) {\r\n          breakpoint = point;\r\n        }\r\n      } else if (value <= containerEl.clientWidth) {\r\n        breakpoint = point;\r\n      }\r\n    }\r\n    return breakpoint || 'max';\r\n  }\r\n\r\n  var breakpoints = {\r\n    setBreakpoint,\r\n    getBreakpoint\r\n  };\r\n\r\n  function prepareClasses(entries, prefix) {\r\n    const resultClasses = [];\r\n    entries.forEach(item => {\r\n      if (typeof item === 'object') {\r\n        Object.keys(item).forEach(classNames => {\r\n          if (item[classNames]) {\r\n            resultClasses.push(prefix + classNames);\r\n          }\r\n        });\r\n      } else if (typeof item === 'string') {\r\n        resultClasses.push(prefix + item);\r\n      }\r\n    });\r\n    return resultClasses;\r\n  }\r\n  function addClasses() {\r\n    const swiper = this;\r\n    const {\r\n      classNames,\r\n      params,\r\n      rtl,\r\n      el,\r\n      device\r\n    } = swiper;\r\n    // prettier-ignore\r\n    const suffixes = prepareClasses(['initialized', params.direction, {\r\n      'free-mode': swiper.params.freeMode && params.freeMode.enabled\r\n    }, {\r\n      'autoheight': params.autoHeight\r\n    }, {\r\n      'rtl': rtl\r\n    }, {\r\n      'grid': params.grid && params.grid.rows > 1\r\n    }, {\r\n      'grid-column': params.grid && params.grid.rows > 1 && params.grid.fill === 'column'\r\n    }, {\r\n      'android': device.android\r\n    }, {\r\n      'ios': device.ios\r\n    }, {\r\n      'css-mode': params.cssMode\r\n    }, {\r\n      'centered': params.cssMode && params.centeredSlides\r\n    }, {\r\n      'watch-progress': params.watchSlidesProgress\r\n    }], params.containerModifierClass);\r\n    classNames.push(...suffixes);\r\n    el.classList.add(...classNames);\r\n    swiper.emitContainerClasses();\r\n  }\r\n\r\n  function removeClasses() {\r\n    const swiper = this;\r\n    const {\r\n      el,\r\n      classNames\r\n    } = swiper;\r\n    if (!el || typeof el === 'string') return;\r\n    el.classList.remove(...classNames);\r\n    swiper.emitContainerClasses();\r\n  }\r\n\r\n  var classes = {\r\n    addClasses,\r\n    removeClasses\r\n  };\r\n\r\n  function checkOverflow() {\r\n    const swiper = this;\r\n    const {\r\n      isLocked: wasLocked,\r\n      params\r\n    } = swiper;\r\n    const {\r\n      slidesOffsetBefore\r\n    } = params;\r\n    if (slidesOffsetBefore) {\r\n      const lastSlideIndex = swiper.slides.length - 1;\r\n      const lastSlideRightEdge = swiper.slidesGrid[lastSlideIndex] + swiper.slidesSizesGrid[lastSlideIndex] + slidesOffsetBefore * 2;\r\n      swiper.isLocked = swiper.size > lastSlideRightEdge;\r\n    } else {\r\n      swiper.isLocked = swiper.snapGrid.length === 1;\r\n    }\r\n    if (params.allowSlideNext === true) {\r\n      swiper.allowSlideNext = !swiper.isLocked;\r\n    }\r\n    if (params.allowSlidePrev === true) {\r\n      swiper.allowSlidePrev = !swiper.isLocked;\r\n    }\r\n    if (wasLocked && wasLocked !== swiper.isLocked) {\r\n      swiper.isEnd = false;\r\n    }\r\n    if (wasLocked !== swiper.isLocked) {\r\n      swiper.emit(swiper.isLocked ? 'lock' : 'unlock');\r\n    }\r\n  }\r\n  var checkOverflow$1 = {\r\n    checkOverflow\r\n  };\r\n\r\n  var defaults = {\r\n    init: true,\r\n    direction: 'horizontal',\r\n    oneWayMovement: false,\r\n    swiperElementNodeName: 'SWIPER-CONTAINER',\r\n    touchEventsTarget: 'wrapper',\r\n    initialSlide: 0,\r\n    speed: 300,\r\n    cssMode: false,\r\n    updateOnWindowResize: true,\r\n    resizeObserver: true,\r\n    nested: false,\r\n    createElements: false,\r\n    eventsPrefix: 'swiper',\r\n    enabled: true,\r\n    focusableElements: 'input, select, option, textarea, button, video, label',\r\n    // Overrides\r\n    width: null,\r\n    height: null,\r\n    //\r\n    preventInteractionOnTransition: false,\r\n    // ssr\r\n    userAgent: null,\r\n    url: null,\r\n    // To support iOS's swipe-to-go-back gesture (when being used in-app).\r\n    edgeSwipeDetection: false,\r\n    edgeSwipeThreshold: 20,\r\n    // Autoheight\r\n    autoHeight: false,\r\n    // Set wrapper width\r\n    setWrapperSize: false,\r\n    // Virtual Translate\r\n    virtualTranslate: false,\r\n    // Effects\r\n    effect: 'slide',\r\n    // 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'\r\n\r\n    // Breakpoints\r\n    breakpoints: undefined,\r\n    breakpointsBase: 'window',\r\n    // Slides grid\r\n    spaceBetween: 0,\r\n    slidesPerView: 1,\r\n    slidesPerGroup: 1,\r\n    slidesPerGroupSkip: 0,\r\n    slidesPerGroupAuto: false,\r\n    centeredSlides: false,\r\n    centeredSlidesBounds: false,\r\n    slidesOffsetBefore: 0,\r\n    // in px\r\n    slidesOffsetAfter: 0,\r\n    // in px\r\n    normalizeSlideIndex: true,\r\n    centerInsufficientSlides: false,\r\n    // Disable swiper and hide navigation when container not overflow\r\n    watchOverflow: true,\r\n    // Round length\r\n    roundLengths: false,\r\n    // Touches\r\n    touchRatio: 1,\r\n    touchAngle: 45,\r\n    simulateTouch: true,\r\n    shortSwipes: true,\r\n    longSwipes: true,\r\n    longSwipesRatio: 0.5,\r\n    longSwipesMs: 300,\r\n    followFinger: true,\r\n    allowTouchMove: true,\r\n    threshold: 5,\r\n    touchMoveStopPropagation: false,\r\n    touchStartPreventDefault: true,\r\n    touchStartForcePreventDefault: false,\r\n    touchReleaseOnEdges: false,\r\n    // Unique Navigation Elements\r\n    uniqueNavElements: true,\r\n    // Resistance\r\n    resistance: true,\r\n    resistanceRatio: 0.85,\r\n    // Progress\r\n    watchSlidesProgress: false,\r\n    // Cursor\r\n    grabCursor: false,\r\n    // Clicks\r\n    preventClicks: true,\r\n    preventClicksPropagation: true,\r\n    slideToClickedSlide: false,\r\n    // loop\r\n    loop: false,\r\n    loopAddBlankSlides: true,\r\n    loopAdditionalSlides: 0,\r\n    loopPreventsSliding: true,\r\n    // rewind\r\n    rewind: false,\r\n    // Swiping/no swiping\r\n    allowSlidePrev: true,\r\n    allowSlideNext: true,\r\n    swipeHandler: null,\r\n    // '.swipe-handler',\r\n    noSwiping: true,\r\n    noSwipingClass: 'swiper-no-swiping',\r\n    noSwipingSelector: null,\r\n    // Passive Listeners\r\n    passiveListeners: true,\r\n    maxBackfaceHiddenSlides: 10,\r\n    // NS\r\n    containerModifierClass: 'swiper-',\r\n    // NEW\r\n    slideClass: 'swiper-slide',\r\n    slideBlankClass: 'swiper-slide-blank',\r\n    slideActiveClass: 'swiper-slide-active',\r\n    slideVisibleClass: 'swiper-slide-visible',\r\n    slideFullyVisibleClass: 'swiper-slide-fully-visible',\r\n    slideNextClass: 'swiper-slide-next',\r\n    slidePrevClass: 'swiper-slide-prev',\r\n    wrapperClass: 'swiper-wrapper',\r\n    lazyPreloaderClass: 'swiper-lazy-preloader',\r\n    lazyPreloadPrevNext: 0,\r\n    // Callbacks\r\n    runCallbacksOnInit: true,\r\n    // Internals\r\n    _emitClasses: false\r\n  };\r\n\r\n  function moduleExtendParams(params, allModulesParams) {\r\n    return function extendParams(obj) {\r\n      if (obj === void 0) {\r\n        obj = {};\r\n      }\r\n      const moduleParamName = Object.keys(obj)[0];\r\n      const moduleParams = obj[moduleParamName];\r\n      if (typeof moduleParams !== 'object' || moduleParams === null) {\r\n        extend(allModulesParams, obj);\r\n        return;\r\n      }\r\n      if (params[moduleParamName] === true) {\r\n        params[moduleParamName] = {\r\n          enabled: true\r\n        };\r\n      }\r\n      if (moduleParamName === 'navigation' && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].prevEl && !params[moduleParamName].nextEl) {\r\n        params[moduleParamName].auto = true;\r\n      }\r\n      if (['pagination', 'scrollbar'].indexOf(moduleParamName) >= 0 && params[moduleParamName] && params[moduleParamName].enabled && !params[moduleParamName].el) {\r\n        params[moduleParamName].auto = true;\r\n      }\r\n      if (!(moduleParamName in params && 'enabled' in moduleParams)) {\r\n        extend(allModulesParams, obj);\r\n        return;\r\n      }\r\n      if (typeof params[moduleParamName] === 'object' && !('enabled' in params[moduleParamName])) {\r\n        params[moduleParamName].enabled = true;\r\n      }\r\n      if (!params[moduleParamName]) params[moduleParamName] = {\r\n        enabled: false\r\n      };\r\n      extend(allModulesParams, obj);\r\n    };\r\n  }\r\n\r\n  /* eslint no-param-reassign: \"off\" */\r\n  const prototypes = {\r\n    eventsEmitter,\r\n    update,\r\n    translate,\r\n    transition,\r\n    slide,\r\n    loop,\r\n    grabCursor,\r\n    events: events$1,\r\n    breakpoints,\r\n    checkOverflow: checkOverflow$1,\r\n    classes\r\n  };\r\n  const extendedDefaults = {};\r\n  class Swiper {\r\n    constructor() {\r\n      let el;\r\n      let params;\r\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n        args[_key] = arguments[_key];\r\n      }\r\n      if (args.length === 1 && args[0].constructor && Object.prototype.toString.call(args[0]).slice(8, -1) === 'Object') {\r\n        params = args[0];\r\n      } else {\r\n        [el, params] = args;\r\n      }\r\n      if (!params) params = {};\r\n      params = extend({}, params);\r\n      if (el && !params.el) params.el = el;\r\n      const document = getDocument();\r\n      if (params.el && typeof params.el === 'string' && document.querySelectorAll(params.el).length > 1) {\r\n        const swipers = [];\r\n        document.querySelectorAll(params.el).forEach(containerEl => {\r\n          const newParams = extend({}, params, {\r\n            el: containerEl\r\n          });\r\n          swipers.push(new Swiper(newParams));\r\n        });\r\n        // eslint-disable-next-line no-constructor-return\r\n        return swipers;\r\n      }\r\n\r\n      // Swiper Instance\r\n      const swiper = this;\r\n      swiper.__swiper__ = true;\r\n      swiper.support = getSupport();\r\n      swiper.device = getDevice({\r\n        userAgent: params.userAgent\r\n      });\r\n      swiper.browser = getBrowser();\r\n      swiper.eventsListeners = {};\r\n      swiper.eventsAnyListeners = [];\r\n      swiper.modules = [...swiper.__modules__];\r\n      if (params.modules && Array.isArray(params.modules)) {\r\n        swiper.modules.push(...params.modules);\r\n      }\r\n      const allModulesParams = {};\r\n      swiper.modules.forEach(mod => {\r\n        mod({\r\n          params,\r\n          swiper,\r\n          extendParams: moduleExtendParams(params, allModulesParams),\r\n          on: swiper.on.bind(swiper),\r\n          once: swiper.once.bind(swiper),\r\n          off: swiper.off.bind(swiper),\r\n          emit: swiper.emit.bind(swiper)\r\n        });\r\n      });\r\n\r\n      // Extend defaults with modules params\r\n      const swiperParams = extend({}, defaults, allModulesParams);\r\n\r\n      // Extend defaults with passed params\r\n      swiper.params = extend({}, swiperParams, extendedDefaults, params);\r\n      swiper.originalParams = extend({}, swiper.params);\r\n      swiper.passedParams = extend({}, params);\r\n\r\n      // add event listeners\r\n      if (swiper.params && swiper.params.on) {\r\n        Object.keys(swiper.params.on).forEach(eventName => {\r\n          swiper.on(eventName, swiper.params.on[eventName]);\r\n        });\r\n      }\r\n      if (swiper.params && swiper.params.onAny) {\r\n        swiper.onAny(swiper.params.onAny);\r\n      }\r\n\r\n      // Extend Swiper\r\n      Object.assign(swiper, {\r\n        enabled: swiper.params.enabled,\r\n        el,\r\n        // Classes\r\n        classNames: [],\r\n        // Slides\r\n        slides: [],\r\n        slidesGrid: [],\r\n        snapGrid: [],\r\n        slidesSizesGrid: [],\r\n        // isDirection\r\n        isHorizontal() {\r\n          return swiper.params.direction === 'horizontal';\r\n        },\r\n        isVertical() {\r\n          return swiper.params.direction === 'vertical';\r\n        },\r\n        // Indexes\r\n        activeIndex: 0,\r\n        realIndex: 0,\r\n        //\r\n        isBeginning: true,\r\n        isEnd: false,\r\n        // Props\r\n        translate: 0,\r\n        previousTranslate: 0,\r\n        progress: 0,\r\n        velocity: 0,\r\n        animating: false,\r\n        cssOverflowAdjustment() {\r\n          // Returns 0 unless `translate` is > 2**23\r\n          // Should be subtracted from css values to prevent overflow\r\n          return Math.trunc(this.translate / 2 ** 23) * 2 ** 23;\r\n        },\r\n        // Locks\r\n        allowSlideNext: swiper.params.allowSlideNext,\r\n        allowSlidePrev: swiper.params.allowSlidePrev,\r\n        // Touch Events\r\n        touchEventsData: {\r\n          isTouched: undefined,\r\n          isMoved: undefined,\r\n          allowTouchCallbacks: undefined,\r\n          touchStartTime: undefined,\r\n          isScrolling: undefined,\r\n          currentTranslate: undefined,\r\n          startTranslate: undefined,\r\n          allowThresholdMove: undefined,\r\n          // Form elements to match\r\n          focusableElements: swiper.params.focusableElements,\r\n          // Last click time\r\n          lastClickTime: 0,\r\n          clickTimeout: undefined,\r\n          // Velocities\r\n          velocities: [],\r\n          allowMomentumBounce: undefined,\r\n          startMoving: undefined,\r\n          pointerId: null,\r\n          touchId: null\r\n        },\r\n        // Clicks\r\n        allowClick: true,\r\n        // Touches\r\n        allowTouchMove: swiper.params.allowTouchMove,\r\n        touches: {\r\n          startX: 0,\r\n          startY: 0,\r\n          currentX: 0,\r\n          currentY: 0,\r\n          diff: 0\r\n        },\r\n        // Images\r\n        imagesToLoad: [],\r\n        imagesLoaded: 0\r\n      });\r\n      swiper.emit('_swiper');\r\n\r\n      // Init\r\n      if (swiper.params.init) {\r\n        swiper.init();\r\n      }\r\n\r\n      // Return app instance\r\n      // eslint-disable-next-line no-constructor-return\r\n      return swiper;\r\n    }\r\n    getDirectionLabel(property) {\r\n      if (this.isHorizontal()) {\r\n        return property;\r\n      }\r\n      // prettier-ignore\r\n      return {\r\n        'width': 'height',\r\n        'margin-top': 'margin-left',\r\n        'margin-bottom ': 'margin-right',\r\n        'margin-left': 'margin-top',\r\n        'margin-right': 'margin-bottom',\r\n        'padding-left': 'padding-top',\r\n        'padding-right': 'padding-bottom',\r\n        'marginRight': 'marginBottom'\r\n      }[property];\r\n    }\r\n    getSlideIndex(slideEl) {\r\n      const {\r\n        slidesEl,\r\n        params\r\n      } = this;\r\n      const slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n      const firstSlideIndex = elementIndex(slides[0]);\r\n      return elementIndex(slideEl) - firstSlideIndex;\r\n    }\r\n    getSlideIndexByData(index) {\r\n      return this.getSlideIndex(this.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') * 1 === index)[0]);\r\n    }\r\n    recalcSlides() {\r\n      const swiper = this;\r\n      const {\r\n        slidesEl,\r\n        params\r\n      } = swiper;\r\n      swiper.slides = elementChildren(slidesEl, `.${params.slideClass}, swiper-slide`);\r\n    }\r\n    enable() {\r\n      const swiper = this;\r\n      if (swiper.enabled) return;\r\n      swiper.enabled = true;\r\n      if (swiper.params.grabCursor) {\r\n        swiper.setGrabCursor();\r\n      }\r\n      swiper.emit('enable');\r\n    }\r\n    disable() {\r\n      const swiper = this;\r\n      if (!swiper.enabled) return;\r\n      swiper.enabled = false;\r\n      if (swiper.params.grabCursor) {\r\n        swiper.unsetGrabCursor();\r\n      }\r\n      swiper.emit('disable');\r\n    }\r\n    setProgress(progress, speed) {\r\n      const swiper = this;\r\n      progress = Math.min(Math.max(progress, 0), 1);\r\n      const min = swiper.minTranslate();\r\n      const max = swiper.maxTranslate();\r\n      const current = (max - min) * progress + min;\r\n      swiper.translateTo(current, typeof speed === 'undefined' ? 0 : speed);\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    }\r\n    emitContainerClasses() {\r\n      const swiper = this;\r\n      if (!swiper.params._emitClasses || !swiper.el) return;\r\n      const cls = swiper.el.className.split(' ').filter(className => {\r\n        return className.indexOf('swiper') === 0 || className.indexOf(swiper.params.containerModifierClass) === 0;\r\n      });\r\n      swiper.emit('_containerClasses', cls.join(' '));\r\n    }\r\n    getSlideClasses(slideEl) {\r\n      const swiper = this;\r\n      if (swiper.destroyed) return '';\r\n      return slideEl.className.split(' ').filter(className => {\r\n        return className.indexOf('swiper-slide') === 0 || className.indexOf(swiper.params.slideClass) === 0;\r\n      }).join(' ');\r\n    }\r\n    emitSlidesClasses() {\r\n      const swiper = this;\r\n      if (!swiper.params._emitClasses || !swiper.el) return;\r\n      const updates = [];\r\n      swiper.slides.forEach(slideEl => {\r\n        const classNames = swiper.getSlideClasses(slideEl);\r\n        updates.push({\r\n          slideEl,\r\n          classNames\r\n        });\r\n        swiper.emit('_slideClass', slideEl, classNames);\r\n      });\r\n      swiper.emit('_slideClasses', updates);\r\n    }\r\n    slidesPerViewDynamic(view, exact) {\r\n      if (view === void 0) {\r\n        view = 'current';\r\n      }\r\n      if (exact === void 0) {\r\n        exact = false;\r\n      }\r\n      const swiper = this;\r\n      const {\r\n        params,\r\n        slides,\r\n        slidesGrid,\r\n        slidesSizesGrid,\r\n        size: swiperSize,\r\n        activeIndex\r\n      } = swiper;\r\n      let spv = 1;\r\n      if (typeof params.slidesPerView === 'number') return params.slidesPerView;\r\n      if (params.centeredSlides) {\r\n        let slideSize = slides[activeIndex] ? Math.ceil(slides[activeIndex].swiperSlideSize) : 0;\r\n        let breakLoop;\r\n        for (let i = activeIndex + 1; i < slides.length; i += 1) {\r\n          if (slides[i] && !breakLoop) {\r\n            slideSize += Math.ceil(slides[i].swiperSlideSize);\r\n            spv += 1;\r\n            if (slideSize > swiperSize) breakLoop = true;\r\n          }\r\n        }\r\n        for (let i = activeIndex - 1; i >= 0; i -= 1) {\r\n          if (slides[i] && !breakLoop) {\r\n            slideSize += slides[i].swiperSlideSize;\r\n            spv += 1;\r\n            if (slideSize > swiperSize) breakLoop = true;\r\n          }\r\n        }\r\n      } else {\r\n        // eslint-disable-next-line\r\n        if (view === 'current') {\r\n          for (let i = activeIndex + 1; i < slides.length; i += 1) {\r\n            const slideInView = exact ? slidesGrid[i] + slidesSizesGrid[i] - slidesGrid[activeIndex] < swiperSize : slidesGrid[i] - slidesGrid[activeIndex] < swiperSize;\r\n            if (slideInView) {\r\n              spv += 1;\r\n            }\r\n          }\r\n        } else {\r\n          // previous\r\n          for (let i = activeIndex - 1; i >= 0; i -= 1) {\r\n            const slideInView = slidesGrid[activeIndex] - slidesGrid[i] < swiperSize;\r\n            if (slideInView) {\r\n              spv += 1;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return spv;\r\n    }\r\n    update() {\r\n      const swiper = this;\r\n      if (!swiper || swiper.destroyed) return;\r\n      const {\r\n        snapGrid,\r\n        params\r\n      } = swiper;\r\n      // Breakpoints\r\n      if (params.breakpoints) {\r\n        swiper.setBreakpoint();\r\n      }\r\n      [...swiper.el.querySelectorAll('[loading=\"lazy\"]')].forEach(imageEl => {\r\n        if (imageEl.complete) {\r\n          processLazyPreloader(swiper, imageEl);\r\n        }\r\n      });\r\n      swiper.updateSize();\r\n      swiper.updateSlides();\r\n      swiper.updateProgress();\r\n      swiper.updateSlidesClasses();\r\n      function setTranslate() {\r\n        const translateValue = swiper.rtlTranslate ? swiper.translate * -1 : swiper.translate;\r\n        const newTranslate = Math.min(Math.max(translateValue, swiper.maxTranslate()), swiper.minTranslate());\r\n        swiper.setTranslate(newTranslate);\r\n        swiper.updateActiveIndex();\r\n        swiper.updateSlidesClasses();\r\n      }\r\n      let translated;\r\n      if (params.freeMode && params.freeMode.enabled && !params.cssMode) {\r\n        setTranslate();\r\n        if (params.autoHeight) {\r\n          swiper.updateAutoHeight();\r\n        }\r\n      } else {\r\n        if ((params.slidesPerView === 'auto' || params.slidesPerView > 1) && swiper.isEnd && !params.centeredSlides) {\r\n          const slides = swiper.virtual && params.virtual.enabled ? swiper.virtual.slides : swiper.slides;\r\n          translated = swiper.slideTo(slides.length - 1, 0, false, true);\r\n        } else {\r\n          translated = swiper.slideTo(swiper.activeIndex, 0, false, true);\r\n        }\r\n        if (!translated) {\r\n          setTranslate();\r\n        }\r\n      }\r\n      if (params.watchOverflow && snapGrid !== swiper.snapGrid) {\r\n        swiper.checkOverflow();\r\n      }\r\n      swiper.emit('update');\r\n    }\r\n    changeDirection(newDirection, needUpdate) {\r\n      if (needUpdate === void 0) {\r\n        needUpdate = true;\r\n      }\r\n      const swiper = this;\r\n      const currentDirection = swiper.params.direction;\r\n      if (!newDirection) {\r\n        // eslint-disable-next-line\r\n        newDirection = currentDirection === 'horizontal' ? 'vertical' : 'horizontal';\r\n      }\r\n      if (newDirection === currentDirection || newDirection !== 'horizontal' && newDirection !== 'vertical') {\r\n        return swiper;\r\n      }\r\n      swiper.el.classList.remove(`${swiper.params.containerModifierClass}${currentDirection}`);\r\n      swiper.el.classList.add(`${swiper.params.containerModifierClass}${newDirection}`);\r\n      swiper.emitContainerClasses();\r\n      swiper.params.direction = newDirection;\r\n      swiper.slides.forEach(slideEl => {\r\n        if (newDirection === 'vertical') {\r\n          slideEl.style.width = '';\r\n        } else {\r\n          slideEl.style.height = '';\r\n        }\r\n      });\r\n      swiper.emit('changeDirection');\r\n      if (needUpdate) swiper.update();\r\n      return swiper;\r\n    }\r\n    changeLanguageDirection(direction) {\r\n      const swiper = this;\r\n      if (swiper.rtl && direction === 'rtl' || !swiper.rtl && direction === 'ltr') return;\r\n      swiper.rtl = direction === 'rtl';\r\n      swiper.rtlTranslate = swiper.params.direction === 'horizontal' && swiper.rtl;\r\n      if (swiper.rtl) {\r\n        swiper.el.classList.add(`${swiper.params.containerModifierClass}rtl`);\r\n        swiper.el.dir = 'rtl';\r\n      } else {\r\n        swiper.el.classList.remove(`${swiper.params.containerModifierClass}rtl`);\r\n        swiper.el.dir = 'ltr';\r\n      }\r\n      swiper.update();\r\n    }\r\n    mount(element) {\r\n      const swiper = this;\r\n      if (swiper.mounted) return true;\r\n\r\n      // Find el\r\n      let el = element || swiper.params.el;\r\n      if (typeof el === 'string') {\r\n        el = document.querySelector(el);\r\n      }\r\n      if (!el) {\r\n        return false;\r\n      }\r\n      el.swiper = swiper;\r\n      if (el.parentNode && el.parentNode.host && el.parentNode.host.nodeName === swiper.params.swiperElementNodeName.toUpperCase()) {\r\n        swiper.isElement = true;\r\n      }\r\n      const getWrapperSelector = () => {\r\n        return `.${(swiper.params.wrapperClass || '').trim().split(' ').join('.')}`;\r\n      };\r\n      const getWrapper = () => {\r\n        if (el && el.shadowRoot && el.shadowRoot.querySelector) {\r\n          const res = el.shadowRoot.querySelector(getWrapperSelector());\r\n          // Children needs to return slot items\r\n          return res;\r\n        }\r\n        return elementChildren(el, getWrapperSelector())[0];\r\n      };\r\n      // Find Wrapper\r\n      let wrapperEl = getWrapper();\r\n      if (!wrapperEl && swiper.params.createElements) {\r\n        wrapperEl = createElement('div', swiper.params.wrapperClass);\r\n        el.append(wrapperEl);\r\n        elementChildren(el, `.${swiper.params.slideClass}`).forEach(slideEl => {\r\n          wrapperEl.append(slideEl);\r\n        });\r\n      }\r\n      Object.assign(swiper, {\r\n        el,\r\n        wrapperEl,\r\n        slidesEl: swiper.isElement && !el.parentNode.host.slideSlots ? el.parentNode.host : wrapperEl,\r\n        hostEl: swiper.isElement ? el.parentNode.host : el,\r\n        mounted: true,\r\n        // RTL\r\n        rtl: el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl',\r\n        rtlTranslate: swiper.params.direction === 'horizontal' && (el.dir.toLowerCase() === 'rtl' || elementStyle(el, 'direction') === 'rtl'),\r\n        wrongRTL: elementStyle(wrapperEl, 'display') === '-webkit-box'\r\n      });\r\n      return true;\r\n    }\r\n    init(el) {\r\n      const swiper = this;\r\n      if (swiper.initialized) return swiper;\r\n      const mounted = swiper.mount(el);\r\n      if (mounted === false) return swiper;\r\n      swiper.emit('beforeInit');\r\n\r\n      // Set breakpoint\r\n      if (swiper.params.breakpoints) {\r\n        swiper.setBreakpoint();\r\n      }\r\n\r\n      // Add Classes\r\n      swiper.addClasses();\r\n\r\n      // Update size\r\n      swiper.updateSize();\r\n\r\n      // Update slides\r\n      swiper.updateSlides();\r\n      if (swiper.params.watchOverflow) {\r\n        swiper.checkOverflow();\r\n      }\r\n\r\n      // Set Grab Cursor\r\n      if (swiper.params.grabCursor && swiper.enabled) {\r\n        swiper.setGrabCursor();\r\n      }\r\n\r\n      // Slide To Initial Slide\r\n      if (swiper.params.loop && swiper.virtual && swiper.params.virtual.enabled) {\r\n        swiper.slideTo(swiper.params.initialSlide + swiper.virtual.slidesBefore, 0, swiper.params.runCallbacksOnInit, false, true);\r\n      } else {\r\n        swiper.slideTo(swiper.params.initialSlide, 0, swiper.params.runCallbacksOnInit, false, true);\r\n      }\r\n\r\n      // Create loop\r\n      if (swiper.params.loop) {\r\n        swiper.loopCreate();\r\n      }\r\n\r\n      // Attach events\r\n      swiper.attachEvents();\r\n      const lazyElements = [...swiper.el.querySelectorAll('[loading=\"lazy\"]')];\r\n      if (swiper.isElement) {\r\n        lazyElements.push(...swiper.hostEl.querySelectorAll('[loading=\"lazy\"]'));\r\n      }\r\n      lazyElements.forEach(imageEl => {\r\n        if (imageEl.complete) {\r\n          processLazyPreloader(swiper, imageEl);\r\n        } else {\r\n          imageEl.addEventListener('load', e => {\r\n            processLazyPreloader(swiper, e.target);\r\n          });\r\n        }\r\n      });\r\n      preload(swiper);\r\n\r\n      // Init Flag\r\n      swiper.initialized = true;\r\n      preload(swiper);\r\n\r\n      // Emit\r\n      swiper.emit('init');\r\n      swiper.emit('afterInit');\r\n      return swiper;\r\n    }\r\n    destroy(deleteInstance, cleanStyles) {\r\n      if (deleteInstance === void 0) {\r\n        deleteInstance = true;\r\n      }\r\n      if (cleanStyles === void 0) {\r\n        cleanStyles = true;\r\n      }\r\n      const swiper = this;\r\n      const {\r\n        params,\r\n        el,\r\n        wrapperEl,\r\n        slides\r\n      } = swiper;\r\n      if (typeof swiper.params === 'undefined' || swiper.destroyed) {\r\n        return null;\r\n      }\r\n      swiper.emit('beforeDestroy');\r\n\r\n      // Init Flag\r\n      swiper.initialized = false;\r\n\r\n      // Detach events\r\n      swiper.detachEvents();\r\n\r\n      // Destroy loop\r\n      if (params.loop) {\r\n        swiper.loopDestroy();\r\n      }\r\n\r\n      // Cleanup styles\r\n      if (cleanStyles) {\r\n        swiper.removeClasses();\r\n        if (el && typeof el !== 'string') {\r\n          el.removeAttribute('style');\r\n        }\r\n        if (wrapperEl) {\r\n          wrapperEl.removeAttribute('style');\r\n        }\r\n        if (slides && slides.length) {\r\n          slides.forEach(slideEl => {\r\n            slideEl.classList.remove(params.slideVisibleClass, params.slideFullyVisibleClass, params.slideActiveClass, params.slideNextClass, params.slidePrevClass);\r\n            slideEl.removeAttribute('style');\r\n            slideEl.removeAttribute('data-swiper-slide-index');\r\n          });\r\n        }\r\n      }\r\n      swiper.emit('destroy');\r\n\r\n      // Detach emitter events\r\n      Object.keys(swiper.eventsListeners).forEach(eventName => {\r\n        swiper.off(eventName);\r\n      });\r\n      if (deleteInstance !== false) {\r\n        if (swiper.el && typeof swiper.el !== 'string') {\r\n          swiper.el.swiper = null;\r\n        }\r\n        deleteProps(swiper);\r\n      }\r\n      swiper.destroyed = true;\r\n      return null;\r\n    }\r\n    static extendDefaults(newDefaults) {\r\n      extend(extendedDefaults, newDefaults);\r\n    }\r\n    static get extendedDefaults() {\r\n      return extendedDefaults;\r\n    }\r\n    static get defaults() {\r\n      return defaults;\r\n    }\r\n    static installModule(mod) {\r\n      if (!Swiper.prototype.__modules__) Swiper.prototype.__modules__ = [];\r\n      const modules = Swiper.prototype.__modules__;\r\n      if (typeof mod === 'function' && modules.indexOf(mod) < 0) {\r\n        modules.push(mod);\r\n      }\r\n    }\r\n    static use(module) {\r\n      if (Array.isArray(module)) {\r\n        module.forEach(m => Swiper.installModule(m));\r\n        return Swiper;\r\n      }\r\n      Swiper.installModule(module);\r\n      return Swiper;\r\n    }\r\n  }\r\n  Object.keys(prototypes).forEach(prototypeGroup => {\r\n    Object.keys(prototypes[prototypeGroup]).forEach(protoMethod => {\r\n      Swiper.prototype[protoMethod] = prototypes[prototypeGroup][protoMethod];\r\n    });\r\n  });\r\n  Swiper.use([Resize, Observer]);\r\n\r\n  function Virtual(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    extendParams({\r\n      virtual: {\r\n        enabled: false,\r\n        slides: [],\r\n        cache: true,\r\n        renderSlide: null,\r\n        renderExternal: null,\r\n        renderExternalUpdate: true,\r\n        addSlidesBefore: 0,\r\n        addSlidesAfter: 0\r\n      }\r\n    });\r\n    let cssModeTimeout;\r\n    const document = getDocument();\r\n    swiper.virtual = {\r\n      cache: {},\r\n      from: undefined,\r\n      to: undefined,\r\n      slides: [],\r\n      offset: 0,\r\n      slidesGrid: []\r\n    };\r\n    const tempDOM = document.createElement('div');\r\n    function renderSlide(slide, index) {\r\n      const params = swiper.params.virtual;\r\n      if (params.cache && swiper.virtual.cache[index]) {\r\n        return swiper.virtual.cache[index];\r\n      }\r\n      // eslint-disable-next-line\r\n      let slideEl;\r\n      if (params.renderSlide) {\r\n        slideEl = params.renderSlide.call(swiper, slide, index);\r\n        if (typeof slideEl === 'string') {\r\n          tempDOM.innerHTML = slideEl;\r\n          slideEl = tempDOM.children[0];\r\n        }\r\n      } else if (swiper.isElement) {\r\n        slideEl = createElement('swiper-slide');\r\n      } else {\r\n        slideEl = createElement('div', swiper.params.slideClass);\r\n      }\r\n      slideEl.setAttribute('data-swiper-slide-index', index);\r\n      if (!params.renderSlide) {\r\n        slideEl.innerHTML = slide;\r\n      }\r\n      if (params.cache) {\r\n        swiper.virtual.cache[index] = slideEl;\r\n      }\r\n      return slideEl;\r\n    }\r\n    function update(force, beforeInit) {\r\n      const {\r\n        slidesPerView,\r\n        slidesPerGroup,\r\n        centeredSlides,\r\n        loop: isLoop,\r\n        initialSlide\r\n      } = swiper.params;\r\n      if (beforeInit && !isLoop && initialSlide > 0) {\r\n        return;\r\n      }\r\n      const {\r\n        addSlidesBefore,\r\n        addSlidesAfter\r\n      } = swiper.params.virtual;\r\n      const {\r\n        from: previousFrom,\r\n        to: previousTo,\r\n        slides,\r\n        slidesGrid: previousSlidesGrid,\r\n        offset: previousOffset\r\n      } = swiper.virtual;\r\n      if (!swiper.params.cssMode) {\r\n        swiper.updateActiveIndex();\r\n      }\r\n      const activeIndex = swiper.activeIndex || 0;\r\n      let offsetProp;\r\n      if (swiper.rtlTranslate) offsetProp = 'right';else offsetProp = swiper.isHorizontal() ? 'left' : 'top';\r\n      let slidesAfter;\r\n      let slidesBefore;\r\n      if (centeredSlides) {\r\n        slidesAfter = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesAfter;\r\n        slidesBefore = Math.floor(slidesPerView / 2) + slidesPerGroup + addSlidesBefore;\r\n      } else {\r\n        slidesAfter = slidesPerView + (slidesPerGroup - 1) + addSlidesAfter;\r\n        slidesBefore = (isLoop ? slidesPerView : slidesPerGroup) + addSlidesBefore;\r\n      }\r\n      let from = activeIndex - slidesBefore;\r\n      let to = activeIndex + slidesAfter;\r\n      if (!isLoop) {\r\n        from = Math.max(from, 0);\r\n        to = Math.min(to, slides.length - 1);\r\n      }\r\n      let offset = (swiper.slidesGrid[from] || 0) - (swiper.slidesGrid[0] || 0);\r\n      if (isLoop && activeIndex >= slidesBefore) {\r\n        from -= slidesBefore;\r\n        if (!centeredSlides) offset += swiper.slidesGrid[0];\r\n      } else if (isLoop && activeIndex < slidesBefore) {\r\n        from = -slidesBefore;\r\n        if (centeredSlides) offset += swiper.slidesGrid[0];\r\n      }\r\n      Object.assign(swiper.virtual, {\r\n        from,\r\n        to,\r\n        offset,\r\n        slidesGrid: swiper.slidesGrid,\r\n        slidesBefore,\r\n        slidesAfter\r\n      });\r\n      function onRendered() {\r\n        swiper.updateSlides();\r\n        swiper.updateProgress();\r\n        swiper.updateSlidesClasses();\r\n        emit('virtualUpdate');\r\n      }\r\n      if (previousFrom === from && previousTo === to && !force) {\r\n        if (swiper.slidesGrid !== previousSlidesGrid && offset !== previousOffset) {\r\n          swiper.slides.forEach(slideEl => {\r\n            slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\r\n          });\r\n        }\r\n        swiper.updateProgress();\r\n        emit('virtualUpdate');\r\n        return;\r\n      }\r\n      if (swiper.params.virtual.renderExternal) {\r\n        swiper.params.virtual.renderExternal.call(swiper, {\r\n          offset,\r\n          from,\r\n          to,\r\n          slides: function getSlides() {\r\n            const slidesToRender = [];\r\n            for (let i = from; i <= to; i += 1) {\r\n              slidesToRender.push(slides[i]);\r\n            }\r\n            return slidesToRender;\r\n          }()\r\n        });\r\n        if (swiper.params.virtual.renderExternalUpdate) {\r\n          onRendered();\r\n        } else {\r\n          emit('virtualUpdate');\r\n        }\r\n        return;\r\n      }\r\n      const prependIndexes = [];\r\n      const appendIndexes = [];\r\n      const getSlideIndex = index => {\r\n        let slideIndex = index;\r\n        if (index < 0) {\r\n          slideIndex = slides.length + index;\r\n        } else if (slideIndex >= slides.length) {\r\n          // eslint-disable-next-line\r\n          slideIndex = slideIndex - slides.length;\r\n        }\r\n        return slideIndex;\r\n      };\r\n      if (force) {\r\n        swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`)).forEach(slideEl => {\r\n          slideEl.remove();\r\n        });\r\n      } else {\r\n        for (let i = previousFrom; i <= previousTo; i += 1) {\r\n          if (i < from || i > to) {\r\n            const slideIndex = getSlideIndex(i);\r\n            swiper.slides.filter(el => el.matches(`.${swiper.params.slideClass}[data-swiper-slide-index=\"${slideIndex}\"], swiper-slide[data-swiper-slide-index=\"${slideIndex}\"]`)).forEach(slideEl => {\r\n              slideEl.remove();\r\n            });\r\n          }\r\n        }\r\n      }\r\n      const loopFrom = isLoop ? -slides.length : 0;\r\n      const loopTo = isLoop ? slides.length * 2 : slides.length;\r\n      for (let i = loopFrom; i < loopTo; i += 1) {\r\n        if (i >= from && i <= to) {\r\n          const slideIndex = getSlideIndex(i);\r\n          if (typeof previousTo === 'undefined' || force) {\r\n            appendIndexes.push(slideIndex);\r\n          } else {\r\n            if (i > previousTo) appendIndexes.push(slideIndex);\r\n            if (i < previousFrom) prependIndexes.push(slideIndex);\r\n          }\r\n        }\r\n      }\r\n      appendIndexes.forEach(index => {\r\n        swiper.slidesEl.append(renderSlide(slides[index], index));\r\n      });\r\n      if (isLoop) {\r\n        for (let i = prependIndexes.length - 1; i >= 0; i -= 1) {\r\n          const index = prependIndexes[i];\r\n          swiper.slidesEl.prepend(renderSlide(slides[index], index));\r\n        }\r\n      } else {\r\n        prependIndexes.sort((a, b) => b - a);\r\n        prependIndexes.forEach(index => {\r\n          swiper.slidesEl.prepend(renderSlide(slides[index], index));\r\n        });\r\n      }\r\n      elementChildren(swiper.slidesEl, '.swiper-slide, swiper-slide').forEach(slideEl => {\r\n        slideEl.style[offsetProp] = `${offset - Math.abs(swiper.cssOverflowAdjustment())}px`;\r\n      });\r\n      onRendered();\r\n    }\r\n    function appendSlide(slides) {\r\n      if (typeof slides === 'object' && 'length' in slides) {\r\n        for (let i = 0; i < slides.length; i += 1) {\r\n          if (slides[i]) swiper.virtual.slides.push(slides[i]);\r\n        }\r\n      } else {\r\n        swiper.virtual.slides.push(slides);\r\n      }\r\n      update(true);\r\n    }\r\n    function prependSlide(slides) {\r\n      const activeIndex = swiper.activeIndex;\r\n      let newActiveIndex = activeIndex + 1;\r\n      let numberOfNewSlides = 1;\r\n      if (Array.isArray(slides)) {\r\n        for (let i = 0; i < slides.length; i += 1) {\r\n          if (slides[i]) swiper.virtual.slides.unshift(slides[i]);\r\n        }\r\n        newActiveIndex = activeIndex + slides.length;\r\n        numberOfNewSlides = slides.length;\r\n      } else {\r\n        swiper.virtual.slides.unshift(slides);\r\n      }\r\n      if (swiper.params.virtual.cache) {\r\n        const cache = swiper.virtual.cache;\r\n        const newCache = {};\r\n        Object.keys(cache).forEach(cachedIndex => {\r\n          const cachedEl = cache[cachedIndex];\r\n          const cachedElIndex = cachedEl.getAttribute('data-swiper-slide-index');\r\n          if (cachedElIndex) {\r\n            cachedEl.setAttribute('data-swiper-slide-index', parseInt(cachedElIndex, 10) + numberOfNewSlides);\r\n          }\r\n          newCache[parseInt(cachedIndex, 10) + numberOfNewSlides] = cachedEl;\r\n        });\r\n        swiper.virtual.cache = newCache;\r\n      }\r\n      update(true);\r\n      swiper.slideTo(newActiveIndex, 0);\r\n    }\r\n    function removeSlide(slidesIndexes) {\r\n      if (typeof slidesIndexes === 'undefined' || slidesIndexes === null) return;\r\n      let activeIndex = swiper.activeIndex;\r\n      if (Array.isArray(slidesIndexes)) {\r\n        for (let i = slidesIndexes.length - 1; i >= 0; i -= 1) {\r\n          if (swiper.params.virtual.cache) {\r\n            delete swiper.virtual.cache[slidesIndexes[i]];\r\n            // shift cache indexes\r\n            Object.keys(swiper.virtual.cache).forEach(key => {\r\n              if (key > slidesIndexes) {\r\n                swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\r\n                swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);\r\n                delete swiper.virtual.cache[key];\r\n              }\r\n            });\r\n          }\r\n          swiper.virtual.slides.splice(slidesIndexes[i], 1);\r\n          if (slidesIndexes[i] < activeIndex) activeIndex -= 1;\r\n          activeIndex = Math.max(activeIndex, 0);\r\n        }\r\n      } else {\r\n        if (swiper.params.virtual.cache) {\r\n          delete swiper.virtual.cache[slidesIndexes];\r\n          // shift cache indexes\r\n          Object.keys(swiper.virtual.cache).forEach(key => {\r\n            if (key > slidesIndexes) {\r\n              swiper.virtual.cache[key - 1] = swiper.virtual.cache[key];\r\n              swiper.virtual.cache[key - 1].setAttribute('data-swiper-slide-index', key - 1);\r\n              delete swiper.virtual.cache[key];\r\n            }\r\n          });\r\n        }\r\n        swiper.virtual.slides.splice(slidesIndexes, 1);\r\n        if (slidesIndexes < activeIndex) activeIndex -= 1;\r\n        activeIndex = Math.max(activeIndex, 0);\r\n      }\r\n      update(true);\r\n      swiper.slideTo(activeIndex, 0);\r\n    }\r\n    function removeAllSlides() {\r\n      swiper.virtual.slides = [];\r\n      if (swiper.params.virtual.cache) {\r\n        swiper.virtual.cache = {};\r\n      }\r\n      update(true);\r\n      swiper.slideTo(0, 0);\r\n    }\r\n    on('beforeInit', () => {\r\n      if (!swiper.params.virtual.enabled) return;\r\n      let domSlidesAssigned;\r\n      if (typeof swiper.passedParams.virtual.slides === 'undefined') {\r\n        const slides = [...swiper.slidesEl.children].filter(el => el.matches(`.${swiper.params.slideClass}, swiper-slide`));\r\n        if (slides && slides.length) {\r\n          swiper.virtual.slides = [...slides];\r\n          domSlidesAssigned = true;\r\n          slides.forEach((slideEl, slideIndex) => {\r\n            slideEl.setAttribute('data-swiper-slide-index', slideIndex);\r\n            swiper.virtual.cache[slideIndex] = slideEl;\r\n            slideEl.remove();\r\n          });\r\n        }\r\n      }\r\n      if (!domSlidesAssigned) {\r\n        swiper.virtual.slides = swiper.params.virtual.slides;\r\n      }\r\n      swiper.classNames.push(`${swiper.params.containerModifierClass}virtual`);\r\n      swiper.params.watchSlidesProgress = true;\r\n      swiper.originalParams.watchSlidesProgress = true;\r\n      update(false, true);\r\n    });\r\n    on('setTranslate', () => {\r\n      if (!swiper.params.virtual.enabled) return;\r\n      if (swiper.params.cssMode && !swiper._immediateVirtual) {\r\n        clearTimeout(cssModeTimeout);\r\n        cssModeTimeout = setTimeout(() => {\r\n          update();\r\n        }, 100);\r\n      } else {\r\n        update();\r\n      }\r\n    });\r\n    on('init update resize', () => {\r\n      if (!swiper.params.virtual.enabled) return;\r\n      if (swiper.params.cssMode) {\r\n        setCSSProperty(swiper.wrapperEl, '--swiper-virtual-size', `${swiper.virtualSize}px`);\r\n      }\r\n    });\r\n    Object.assign(swiper.virtual, {\r\n      appendSlide,\r\n      prependSlide,\r\n      removeSlide,\r\n      removeAllSlides,\r\n      update\r\n    });\r\n  }\r\n\r\n  /* eslint-disable consistent-return */\r\n  function Keyboard(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const document = getDocument();\r\n    const window = getWindow();\r\n    swiper.keyboard = {\r\n      enabled: false\r\n    };\r\n    extendParams({\r\n      keyboard: {\r\n        enabled: false,\r\n        onlyInViewport: true,\r\n        pageUpDown: true\r\n      }\r\n    });\r\n    function handle(event) {\r\n      if (!swiper.enabled) return;\r\n      const {\r\n        rtlTranslate: rtl\r\n      } = swiper;\r\n      let e = event;\r\n      if (e.originalEvent) e = e.originalEvent; // jquery fix\r\n      const kc = e.keyCode || e.charCode;\r\n      const pageUpDown = swiper.params.keyboard.pageUpDown;\r\n      const isPageUp = pageUpDown && kc === 33;\r\n      const isPageDown = pageUpDown && kc === 34;\r\n      const isArrowLeft = kc === 37;\r\n      const isArrowRight = kc === 39;\r\n      const isArrowUp = kc === 38;\r\n      const isArrowDown = kc === 40;\r\n      // Directions locks\r\n      if (!swiper.allowSlideNext && (swiper.isHorizontal() && isArrowRight || swiper.isVertical() && isArrowDown || isPageDown)) {\r\n        return false;\r\n      }\r\n      if (!swiper.allowSlidePrev && (swiper.isHorizontal() && isArrowLeft || swiper.isVertical() && isArrowUp || isPageUp)) {\r\n        return false;\r\n      }\r\n      if (e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) {\r\n        return undefined;\r\n      }\r\n      if (document.activeElement && document.activeElement.nodeName && (document.activeElement.nodeName.toLowerCase() === 'input' || document.activeElement.nodeName.toLowerCase() === 'textarea')) {\r\n        return undefined;\r\n      }\r\n      if (swiper.params.keyboard.onlyInViewport && (isPageUp || isPageDown || isArrowLeft || isArrowRight || isArrowUp || isArrowDown)) {\r\n        let inView = false;\r\n        // Check that swiper should be inside of visible area of window\r\n        if (elementParents(swiper.el, `.${swiper.params.slideClass}, swiper-slide`).length > 0 && elementParents(swiper.el, `.${swiper.params.slideActiveClass}`).length === 0) {\r\n          return undefined;\r\n        }\r\n        const el = swiper.el;\r\n        const swiperWidth = el.clientWidth;\r\n        const swiperHeight = el.clientHeight;\r\n        const windowWidth = window.innerWidth;\r\n        const windowHeight = window.innerHeight;\r\n        const swiperOffset = elementOffset(el);\r\n        if (rtl) swiperOffset.left -= el.scrollLeft;\r\n        const swiperCoord = [[swiperOffset.left, swiperOffset.top], [swiperOffset.left + swiperWidth, swiperOffset.top], [swiperOffset.left, swiperOffset.top + swiperHeight], [swiperOffset.left + swiperWidth, swiperOffset.top + swiperHeight]];\r\n        for (let i = 0; i < swiperCoord.length; i += 1) {\r\n          const point = swiperCoord[i];\r\n          if (point[0] >= 0 && point[0] <= windowWidth && point[1] >= 0 && point[1] <= windowHeight) {\r\n            if (point[0] === 0 && point[1] === 0) continue; // eslint-disable-line\r\n            inView = true;\r\n          }\r\n        }\r\n        if (!inView) return undefined;\r\n      }\r\n      if (swiper.isHorizontal()) {\r\n        if (isPageUp || isPageDown || isArrowLeft || isArrowRight) {\r\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n        }\r\n        if ((isPageDown || isArrowRight) && !rtl || (isPageUp || isArrowLeft) && rtl) swiper.slideNext();\r\n        if ((isPageUp || isArrowLeft) && !rtl || (isPageDown || isArrowRight) && rtl) swiper.slidePrev();\r\n      } else {\r\n        if (isPageUp || isPageDown || isArrowUp || isArrowDown) {\r\n          if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n        }\r\n        if (isPageDown || isArrowDown) swiper.slideNext();\r\n        if (isPageUp || isArrowUp) swiper.slidePrev();\r\n      }\r\n      emit('keyPress', kc);\r\n      return undefined;\r\n    }\r\n    function enable() {\r\n      if (swiper.keyboard.enabled) return;\r\n      document.addEventListener('keydown', handle);\r\n      swiper.keyboard.enabled = true;\r\n    }\r\n    function disable() {\r\n      if (!swiper.keyboard.enabled) return;\r\n      document.removeEventListener('keydown', handle);\r\n      swiper.keyboard.enabled = false;\r\n    }\r\n    on('init', () => {\r\n      if (swiper.params.keyboard.enabled) {\r\n        enable();\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      if (swiper.keyboard.enabled) {\r\n        disable();\r\n      }\r\n    });\r\n    Object.assign(swiper.keyboard, {\r\n      enable,\r\n      disable\r\n    });\r\n  }\r\n\r\n  /* eslint-disable consistent-return */\r\n  function Mousewheel(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const window = getWindow();\r\n    extendParams({\r\n      mousewheel: {\r\n        enabled: false,\r\n        releaseOnEdges: false,\r\n        invert: false,\r\n        forceToAxis: false,\r\n        sensitivity: 1,\r\n        eventsTarget: 'container',\r\n        thresholdDelta: null,\r\n        thresholdTime: null,\r\n        noMousewheelClass: 'swiper-no-mousewheel'\r\n      }\r\n    });\r\n    swiper.mousewheel = {\r\n      enabled: false\r\n    };\r\n    let timeout;\r\n    let lastScrollTime = now();\r\n    let lastEventBeforeSnap;\r\n    const recentWheelEvents = [];\r\n    function normalize(e) {\r\n      // Reasonable defaults\r\n      const PIXEL_STEP = 10;\r\n      const LINE_HEIGHT = 40;\r\n      const PAGE_HEIGHT = 800;\r\n      let sX = 0;\r\n      let sY = 0; // spinX, spinY\r\n      let pX = 0;\r\n      let pY = 0; // pixelX, pixelY\r\n\r\n      // Legacy\r\n      if ('detail' in e) {\r\n        sY = e.detail;\r\n      }\r\n      if ('wheelDelta' in e) {\r\n        sY = -e.wheelDelta / 120;\r\n      }\r\n      if ('wheelDeltaY' in e) {\r\n        sY = -e.wheelDeltaY / 120;\r\n      }\r\n      if ('wheelDeltaX' in e) {\r\n        sX = -e.wheelDeltaX / 120;\r\n      }\r\n\r\n      // side scrolling on FF with DOMMouseScroll\r\n      if ('axis' in e && e.axis === e.HORIZONTAL_AXIS) {\r\n        sX = sY;\r\n        sY = 0;\r\n      }\r\n      pX = sX * PIXEL_STEP;\r\n      pY = sY * PIXEL_STEP;\r\n      if ('deltaY' in e) {\r\n        pY = e.deltaY;\r\n      }\r\n      if ('deltaX' in e) {\r\n        pX = e.deltaX;\r\n      }\r\n      if (e.shiftKey && !pX) {\r\n        // if user scrolls with shift he wants horizontal scroll\r\n        pX = pY;\r\n        pY = 0;\r\n      }\r\n      if ((pX || pY) && e.deltaMode) {\r\n        if (e.deltaMode === 1) {\r\n          // delta in LINE units\r\n          pX *= LINE_HEIGHT;\r\n          pY *= LINE_HEIGHT;\r\n        } else {\r\n          // delta in PAGE units\r\n          pX *= PAGE_HEIGHT;\r\n          pY *= PAGE_HEIGHT;\r\n        }\r\n      }\r\n\r\n      // Fall-back if spin cannot be determined\r\n      if (pX && !sX) {\r\n        sX = pX < 1 ? -1 : 1;\r\n      }\r\n      if (pY && !sY) {\r\n        sY = pY < 1 ? -1 : 1;\r\n      }\r\n      return {\r\n        spinX: sX,\r\n        spinY: sY,\r\n        pixelX: pX,\r\n        pixelY: pY\r\n      };\r\n    }\r\n    function handleMouseEnter() {\r\n      if (!swiper.enabled) return;\r\n      swiper.mouseEntered = true;\r\n    }\r\n    function handleMouseLeave() {\r\n      if (!swiper.enabled) return;\r\n      swiper.mouseEntered = false;\r\n    }\r\n    function animateSlider(newEvent) {\r\n      if (swiper.params.mousewheel.thresholdDelta && newEvent.delta < swiper.params.mousewheel.thresholdDelta) {\r\n        // Prevent if delta of wheel scroll delta is below configured threshold\r\n        return false;\r\n      }\r\n      if (swiper.params.mousewheel.thresholdTime && now() - lastScrollTime < swiper.params.mousewheel.thresholdTime) {\r\n        // Prevent if time between scrolls is below configured threshold\r\n        return false;\r\n      }\r\n\r\n      // If the movement is NOT big enough and\r\n      // if the last time the user scrolled was too close to the current one (avoid continuously triggering the slider):\r\n      //   Don't go any further (avoid insignificant scroll movement).\r\n      if (newEvent.delta >= 6 && now() - lastScrollTime < 60) {\r\n        // Return false as a default\r\n        return true;\r\n      }\r\n      // If user is scrolling towards the end:\r\n      //   If the slider hasn't hit the latest slide or\r\n      //   if the slider is a loop and\r\n      //   if the slider isn't moving right now:\r\n      //     Go to next slide and\r\n      //     emit a scroll event.\r\n      // Else (the user is scrolling towards the beginning) and\r\n      // if the slider hasn't hit the first slide or\r\n      // if the slider is a loop and\r\n      // if the slider isn't moving right now:\r\n      //   Go to prev slide and\r\n      //   emit a scroll event.\r\n      if (newEvent.direction < 0) {\r\n        if ((!swiper.isEnd || swiper.params.loop) && !swiper.animating) {\r\n          swiper.slideNext();\r\n          emit('scroll', newEvent.raw);\r\n        }\r\n      } else if ((!swiper.isBeginning || swiper.params.loop) && !swiper.animating) {\r\n        swiper.slidePrev();\r\n        emit('scroll', newEvent.raw);\r\n      }\r\n      // If you got here is because an animation has been triggered so store the current time\r\n      lastScrollTime = new window.Date().getTime();\r\n      // Return false as a default\r\n      return false;\r\n    }\r\n    function releaseScroll(newEvent) {\r\n      const params = swiper.params.mousewheel;\r\n      if (newEvent.direction < 0) {\r\n        if (swiper.isEnd && !swiper.params.loop && params.releaseOnEdges) {\r\n          // Return true to animate scroll on edges\r\n          return true;\r\n        }\r\n      } else if (swiper.isBeginning && !swiper.params.loop && params.releaseOnEdges) {\r\n        // Return true to animate scroll on edges\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    function handle(event) {\r\n      let e = event;\r\n      let disableParentSwiper = true;\r\n      if (!swiper.enabled) return;\r\n\r\n      // Ignore event if the target or its parents have the swiper-no-mousewheel class\r\n      if (event.target.closest(`.${swiper.params.mousewheel.noMousewheelClass}`)) return;\r\n      const params = swiper.params.mousewheel;\r\n      if (swiper.params.cssMode) {\r\n        e.preventDefault();\r\n      }\r\n      let targetEl = swiper.el;\r\n      if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n        targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\r\n      }\r\n      const targetElContainsTarget = targetEl && targetEl.contains(e.target);\r\n      if (!swiper.mouseEntered && !targetElContainsTarget && !params.releaseOnEdges) return true;\r\n      if (e.originalEvent) e = e.originalEvent; // jquery fix\r\n      let delta = 0;\r\n      const rtlFactor = swiper.rtlTranslate ? -1 : 1;\r\n      const data = normalize(e);\r\n      if (params.forceToAxis) {\r\n        if (swiper.isHorizontal()) {\r\n          if (Math.abs(data.pixelX) > Math.abs(data.pixelY)) delta = -data.pixelX * rtlFactor;else return true;\r\n        } else if (Math.abs(data.pixelY) > Math.abs(data.pixelX)) delta = -data.pixelY;else return true;\r\n      } else {\r\n        delta = Math.abs(data.pixelX) > Math.abs(data.pixelY) ? -data.pixelX * rtlFactor : -data.pixelY;\r\n      }\r\n      if (delta === 0) return true;\r\n      if (params.invert) delta = -delta;\r\n\r\n      // Get the scroll positions\r\n      let positions = swiper.getTranslate() + delta * params.sensitivity;\r\n      if (positions >= swiper.minTranslate()) positions = swiper.minTranslate();\r\n      if (positions <= swiper.maxTranslate()) positions = swiper.maxTranslate();\r\n\r\n      // When loop is true:\r\n      //     the disableParentSwiper will be true.\r\n      // When loop is false:\r\n      //     if the scroll positions is not on edge,\r\n      //     then the disableParentSwiper will be true.\r\n      //     if the scroll on edge positions,\r\n      //     then the disableParentSwiper will be false.\r\n      disableParentSwiper = swiper.params.loop ? true : !(positions === swiper.minTranslate() || positions === swiper.maxTranslate());\r\n      if (disableParentSwiper && swiper.params.nested) e.stopPropagation();\r\n      if (!swiper.params.freeMode || !swiper.params.freeMode.enabled) {\r\n        // Register the new event in a variable which stores the relevant data\r\n        const newEvent = {\r\n          time: now(),\r\n          delta: Math.abs(delta),\r\n          direction: Math.sign(delta),\r\n          raw: event\r\n        };\r\n\r\n        // Keep the most recent events\r\n        if (recentWheelEvents.length >= 2) {\r\n          recentWheelEvents.shift(); // only store the last N events\r\n        }\r\n\r\n        const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n        recentWheelEvents.push(newEvent);\r\n\r\n        // If there is at least one previous recorded event:\r\n        //   If direction has changed or\r\n        //   if the scroll is quicker than the previous one:\r\n        //     Animate the slider.\r\n        // Else (this is the first time the wheel is moved):\r\n        //     Animate the slider.\r\n        if (prevEvent) {\r\n          if (newEvent.direction !== prevEvent.direction || newEvent.delta > prevEvent.delta || newEvent.time > prevEvent.time + 150) {\r\n            animateSlider(newEvent);\r\n          }\r\n        } else {\r\n          animateSlider(newEvent);\r\n        }\r\n\r\n        // If it's time to release the scroll:\r\n        //   Return now so you don't hit the preventDefault.\r\n        if (releaseScroll(newEvent)) {\r\n          return true;\r\n        }\r\n      } else {\r\n        // Freemode or scrollContainer:\r\n\r\n        // If we recently snapped after a momentum scroll, then ignore wheel events\r\n        // to give time for the deceleration to finish. Stop ignoring after 500 msecs\r\n        // or if it's a new scroll (larger delta or inverse sign as last event before\r\n        // an end-of-momentum snap).\r\n        const newEvent = {\r\n          time: now(),\r\n          delta: Math.abs(delta),\r\n          direction: Math.sign(delta)\r\n        };\r\n        const ignoreWheelEvents = lastEventBeforeSnap && newEvent.time < lastEventBeforeSnap.time + 500 && newEvent.delta <= lastEventBeforeSnap.delta && newEvent.direction === lastEventBeforeSnap.direction;\r\n        if (!ignoreWheelEvents) {\r\n          lastEventBeforeSnap = undefined;\r\n          let position = swiper.getTranslate() + delta * params.sensitivity;\r\n          const wasBeginning = swiper.isBeginning;\r\n          const wasEnd = swiper.isEnd;\r\n          if (position >= swiper.minTranslate()) position = swiper.minTranslate();\r\n          if (position <= swiper.maxTranslate()) position = swiper.maxTranslate();\r\n          swiper.setTransition(0);\r\n          swiper.setTranslate(position);\r\n          swiper.updateProgress();\r\n          swiper.updateActiveIndex();\r\n          swiper.updateSlidesClasses();\r\n          if (!wasBeginning && swiper.isBeginning || !wasEnd && swiper.isEnd) {\r\n            swiper.updateSlidesClasses();\r\n          }\r\n          if (swiper.params.loop) {\r\n            swiper.loopFix({\r\n              direction: newEvent.direction < 0 ? 'next' : 'prev',\r\n              byMousewheel: true\r\n            });\r\n          }\r\n          if (swiper.params.freeMode.sticky) {\r\n            // When wheel scrolling starts with sticky (aka snap) enabled, then detect\r\n            // the end of a momentum scroll by storing recent (N=15?) wheel events.\r\n            // 1. do all N events have decreasing or same (absolute value) delta?\r\n            // 2. did all N events arrive in the last M (M=500?) msecs?\r\n            // 3. does the earliest event have an (absolute value) delta that's\r\n            //    at least P (P=1?) larger than the most recent event's delta?\r\n            // 4. does the latest event have a delta that's smaller than Q (Q=6?) pixels?\r\n            // If 1-4 are \"yes\" then we're near the end of a momentum scroll deceleration.\r\n            // Snap immediately and ignore remaining wheel events in this scroll.\r\n            // See comment above for \"remaining wheel events in this scroll\" determination.\r\n            // If 1-4 aren't satisfied, then wait to snap until 500ms after the last event.\r\n            clearTimeout(timeout);\r\n            timeout = undefined;\r\n            if (recentWheelEvents.length >= 15) {\r\n              recentWheelEvents.shift(); // only store the last N events\r\n            }\r\n\r\n            const prevEvent = recentWheelEvents.length ? recentWheelEvents[recentWheelEvents.length - 1] : undefined;\r\n            const firstEvent = recentWheelEvents[0];\r\n            recentWheelEvents.push(newEvent);\r\n            if (prevEvent && (newEvent.delta > prevEvent.delta || newEvent.direction !== prevEvent.direction)) {\r\n              // Increasing or reverse-sign delta means the user started scrolling again. Clear the wheel event log.\r\n              recentWheelEvents.splice(0);\r\n            } else if (recentWheelEvents.length >= 15 && newEvent.time - firstEvent.time < 500 && firstEvent.delta - newEvent.delta >= 1 && newEvent.delta <= 6) {\r\n              // We're at the end of the deceleration of a momentum scroll, so there's no need\r\n              // to wait for more events. Snap ASAP on the next tick.\r\n              // Also, because there's some remaining momentum we'll bias the snap in the\r\n              // direction of the ongoing scroll because it's better UX for the scroll to snap\r\n              // in the same direction as the scroll instead of reversing to snap.  Therefore,\r\n              // if it's already scrolled more than 20% in the current direction, keep going.\r\n              const snapToThreshold = delta > 0 ? 0.8 : 0.2;\r\n              lastEventBeforeSnap = newEvent;\r\n              recentWheelEvents.splice(0);\r\n              timeout = nextTick(() => {\r\n                if (swiper.destroyed || !swiper.params) return;\r\n                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n              }, 0); // no delay; move on next tick\r\n            }\r\n\r\n            if (!timeout) {\r\n              // if we get here, then we haven't detected the end of a momentum scroll, so\r\n              // we'll consider a scroll \"complete\" when there haven't been any wheel events\r\n              // for 500ms.\r\n              timeout = nextTick(() => {\r\n                if (swiper.destroyed || !swiper.params) return;\r\n                const snapToThreshold = 0.5;\r\n                lastEventBeforeSnap = newEvent;\r\n                recentWheelEvents.splice(0);\r\n                swiper.slideToClosest(swiper.params.speed, true, undefined, snapToThreshold);\r\n              }, 500);\r\n            }\r\n          }\r\n\r\n          // Emit event\r\n          if (!ignoreWheelEvents) emit('scroll', e);\r\n\r\n          // Stop autoplay\r\n          if (swiper.params.autoplay && swiper.params.autoplayDisableOnInteraction) swiper.autoplay.stop();\r\n          // Return page scroll on edge positions\r\n          if (params.releaseOnEdges && (position === swiper.minTranslate() || position === swiper.maxTranslate())) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n      if (e.preventDefault) e.preventDefault();else e.returnValue = false;\r\n      return false;\r\n    }\r\n    function events(method) {\r\n      let targetEl = swiper.el;\r\n      if (swiper.params.mousewheel.eventsTarget !== 'container') {\r\n        targetEl = document.querySelector(swiper.params.mousewheel.eventsTarget);\r\n      }\r\n      targetEl[method]('mouseenter', handleMouseEnter);\r\n      targetEl[method]('mouseleave', handleMouseLeave);\r\n      targetEl[method]('wheel', handle);\r\n    }\r\n    function enable() {\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.removeEventListener('wheel', handle);\r\n        return true;\r\n      }\r\n      if (swiper.mousewheel.enabled) return false;\r\n      events('addEventListener');\r\n      swiper.mousewheel.enabled = true;\r\n      return true;\r\n    }\r\n    function disable() {\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.addEventListener(event, handle);\r\n        return true;\r\n      }\r\n      if (!swiper.mousewheel.enabled) return false;\r\n      events('removeEventListener');\r\n      swiper.mousewheel.enabled = false;\r\n      return true;\r\n    }\r\n    on('init', () => {\r\n      if (!swiper.params.mousewheel.enabled && swiper.params.cssMode) {\r\n        disable();\r\n      }\r\n      if (swiper.params.mousewheel.enabled) enable();\r\n    });\r\n    on('destroy', () => {\r\n      if (swiper.params.cssMode) {\r\n        enable();\r\n      }\r\n      if (swiper.mousewheel.enabled) disable();\r\n    });\r\n    Object.assign(swiper.mousewheel, {\r\n      enable,\r\n      disable\r\n    });\r\n  }\r\n\r\n  function createElementIfNotDefined(swiper, originalParams, params, checkProps) {\r\n    if (swiper.params.createElements) {\r\n      Object.keys(checkProps).forEach(key => {\r\n        if (!params[key] && params.auto === true) {\r\n          let element = elementChildren(swiper.el, `.${checkProps[key]}`)[0];\r\n          if (!element) {\r\n            element = createElement('div', checkProps[key]);\r\n            element.className = checkProps[key];\r\n            swiper.el.append(element);\r\n          }\r\n          params[key] = element;\r\n          originalParams[key] = element;\r\n        }\r\n      });\r\n    }\r\n    return params;\r\n  }\r\n\r\n  function Navigation(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    extendParams({\r\n      navigation: {\r\n        nextEl: null,\r\n        prevEl: null,\r\n        hideOnClick: false,\r\n        disabledClass: 'swiper-button-disabled',\r\n        hiddenClass: 'swiper-button-hidden',\r\n        lockClass: 'swiper-button-lock',\r\n        navigationDisabledClass: 'swiper-navigation-disabled'\r\n      }\r\n    });\r\n    swiper.navigation = {\r\n      nextEl: null,\r\n      prevEl: null\r\n    };\r\n    function getEl(el) {\r\n      let res;\r\n      if (el && typeof el === 'string' && swiper.isElement) {\r\n        res = swiper.el.querySelector(el);\r\n        if (res) return res;\r\n      }\r\n      if (el) {\r\n        if (typeof el === 'string') res = [...document.querySelectorAll(el)];\r\n        if (swiper.params.uniqueNavElements && typeof el === 'string' && res && res.length > 1 && swiper.el.querySelectorAll(el).length === 1) {\r\n          res = swiper.el.querySelector(el);\r\n        } else if (res && res.length === 1) {\r\n          res = res[0];\r\n        }\r\n      }\r\n      if (el && !res) return el;\r\n      // if (Array.isArray(res) && res.length === 1) res = res[0];\r\n      return res;\r\n    }\r\n    function toggleEl(el, disabled) {\r\n      const params = swiper.params.navigation;\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        if (subEl) {\r\n          subEl.classList[disabled ? 'add' : 'remove'](...params.disabledClass.split(' '));\r\n          if (subEl.tagName === 'BUTTON') subEl.disabled = disabled;\r\n          if (swiper.params.watchOverflow && swiper.enabled) {\r\n            subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\r\n          }\r\n        }\r\n      });\r\n    }\r\n    function update() {\r\n      // Update Navigation Buttons\r\n      const {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation;\r\n      if (swiper.params.loop) {\r\n        toggleEl(prevEl, false);\r\n        toggleEl(nextEl, false);\r\n        return;\r\n      }\r\n      toggleEl(prevEl, swiper.isBeginning && !swiper.params.rewind);\r\n      toggleEl(nextEl, swiper.isEnd && !swiper.params.rewind);\r\n    }\r\n    function onPrevClick(e) {\r\n      e.preventDefault();\r\n      if (swiper.isBeginning && !swiper.params.loop && !swiper.params.rewind) return;\r\n      swiper.slidePrev();\r\n      emit('navigationPrev');\r\n    }\r\n    function onNextClick(e) {\r\n      e.preventDefault();\r\n      if (swiper.isEnd && !swiper.params.loop && !swiper.params.rewind) return;\r\n      swiper.slideNext();\r\n      emit('navigationNext');\r\n    }\r\n    function init() {\r\n      const params = swiper.params.navigation;\r\n      swiper.params.navigation = createElementIfNotDefined(swiper, swiper.originalParams.navigation, swiper.params.navigation, {\r\n        nextEl: 'swiper-button-next',\r\n        prevEl: 'swiper-button-prev'\r\n      });\r\n      if (!(params.nextEl || params.prevEl)) return;\r\n      let nextEl = getEl(params.nextEl);\r\n      let prevEl = getEl(params.prevEl);\r\n      Object.assign(swiper.navigation, {\r\n        nextEl,\r\n        prevEl\r\n      });\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      const initButton = (el, dir) => {\r\n        if (el) {\r\n          el.addEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\r\n        }\r\n        if (!swiper.enabled && el) {\r\n          el.classList.add(...params.lockClass.split(' '));\r\n        }\r\n      };\r\n      nextEl.forEach(el => initButton(el, 'next'));\r\n      prevEl.forEach(el => initButton(el, 'prev'));\r\n    }\r\n    function destroy() {\r\n      let {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation;\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      const destroyButton = (el, dir) => {\r\n        el.removeEventListener('click', dir === 'next' ? onNextClick : onPrevClick);\r\n        el.classList.remove(...swiper.params.navigation.disabledClass.split(' '));\r\n      };\r\n      nextEl.forEach(el => destroyButton(el, 'next'));\r\n      prevEl.forEach(el => destroyButton(el, 'prev'));\r\n    }\r\n    on('init', () => {\r\n      if (swiper.params.navigation.enabled === false) {\r\n        // eslint-disable-next-line\r\n        disable();\r\n      } else {\r\n        init();\r\n        update();\r\n      }\r\n    });\r\n    on('toEdge fromEdge lock unlock', () => {\r\n      update();\r\n    });\r\n    on('destroy', () => {\r\n      destroy();\r\n    });\r\n    on('enable disable', () => {\r\n      let {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation;\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      if (swiper.enabled) {\r\n        update();\r\n        return;\r\n      }\r\n      [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.add(swiper.params.navigation.lockClass));\r\n    });\r\n    on('click', (_s, e) => {\r\n      let {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation;\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      const targetEl = e.target;\r\n      let targetIsButton = prevEl.includes(targetEl) || nextEl.includes(targetEl);\r\n      if (swiper.isElement && !targetIsButton) {\r\n        const path = e.path || e.composedPath && e.composedPath();\r\n        if (path) {\r\n          targetIsButton = path.find(pathEl => nextEl.includes(pathEl) || prevEl.includes(pathEl));\r\n        }\r\n      }\r\n      if (swiper.params.navigation.hideOnClick && !targetIsButton) {\r\n        if (swiper.pagination && swiper.params.pagination && swiper.params.pagination.clickable && (swiper.pagination.el === targetEl || swiper.pagination.el.contains(targetEl))) return;\r\n        let isHidden;\r\n        if (nextEl.length) {\r\n          isHidden = nextEl[0].classList.contains(swiper.params.navigation.hiddenClass);\r\n        } else if (prevEl.length) {\r\n          isHidden = prevEl[0].classList.contains(swiper.params.navigation.hiddenClass);\r\n        }\r\n        if (isHidden === true) {\r\n          emit('navigationShow');\r\n        } else {\r\n          emit('navigationHide');\r\n        }\r\n        [...nextEl, ...prevEl].filter(el => !!el).forEach(el => el.classList.toggle(swiper.params.navigation.hiddenClass));\r\n      }\r\n    });\r\n    const enable = () => {\r\n      swiper.el.classList.remove(...swiper.params.navigation.navigationDisabledClass.split(' '));\r\n      init();\r\n      update();\r\n    };\r\n    const disable = () => {\r\n      swiper.el.classList.add(...swiper.params.navigation.navigationDisabledClass.split(' '));\r\n      destroy();\r\n    };\r\n    Object.assign(swiper.navigation, {\r\n      enable,\r\n      disable,\r\n      update,\r\n      init,\r\n      destroy\r\n    });\r\n  }\r\n\r\n  function classesToSelector(classes) {\r\n    if (classes === void 0) {\r\n      classes = '';\r\n    }\r\n    return `.${classes.trim().replace(/([\\.:!+\\/])/g, '\\\\$1') // eslint-disable-line\r\n  .replace(/ /g, '.')}`;\r\n  }\r\n\r\n  function Pagination(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const pfx = 'swiper-pagination';\r\n    extendParams({\r\n      pagination: {\r\n        el: null,\r\n        bulletElement: 'span',\r\n        clickable: false,\r\n        hideOnClick: false,\r\n        renderBullet: null,\r\n        renderProgressbar: null,\r\n        renderFraction: null,\r\n        renderCustom: null,\r\n        progressbarOpposite: false,\r\n        type: 'bullets',\r\n        // 'bullets' or 'progressbar' or 'fraction' or 'custom'\r\n        dynamicBullets: false,\r\n        dynamicMainBullets: 1,\r\n        formatFractionCurrent: number => number,\r\n        formatFractionTotal: number => number,\r\n        bulletClass: `${pfx}-bullet`,\r\n        bulletActiveClass: `${pfx}-bullet-active`,\r\n        modifierClass: `${pfx}-`,\r\n        currentClass: `${pfx}-current`,\r\n        totalClass: `${pfx}-total`,\r\n        hiddenClass: `${pfx}-hidden`,\r\n        progressbarFillClass: `${pfx}-progressbar-fill`,\r\n        progressbarOppositeClass: `${pfx}-progressbar-opposite`,\r\n        clickableClass: `${pfx}-clickable`,\r\n        lockClass: `${pfx}-lock`,\r\n        horizontalClass: `${pfx}-horizontal`,\r\n        verticalClass: `${pfx}-vertical`,\r\n        paginationDisabledClass: `${pfx}-disabled`\r\n      }\r\n    });\r\n    swiper.pagination = {\r\n      el: null,\r\n      bullets: []\r\n    };\r\n    let bulletSize;\r\n    let dynamicBulletIndex = 0;\r\n    function isPaginationDisabled() {\r\n      return !swiper.params.pagination.el || !swiper.pagination.el || Array.isArray(swiper.pagination.el) && swiper.pagination.el.length === 0;\r\n    }\r\n    function setSideBullets(bulletEl, position) {\r\n      const {\r\n        bulletActiveClass\r\n      } = swiper.params.pagination;\r\n      if (!bulletEl) return;\r\n      bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\r\n      if (bulletEl) {\r\n        bulletEl.classList.add(`${bulletActiveClass}-${position}`);\r\n        bulletEl = bulletEl[`${position === 'prev' ? 'previous' : 'next'}ElementSibling`];\r\n        if (bulletEl) {\r\n          bulletEl.classList.add(`${bulletActiveClass}-${position}-${position}`);\r\n        }\r\n      }\r\n    }\r\n    function getMoveDirection(prevIndex, nextIndex, length) {\r\n      prevIndex = prevIndex % length;\r\n      nextIndex = nextIndex % length;\r\n      if (nextIndex === prevIndex + 1) {\r\n        return 'next';\r\n      } else if (nextIndex === prevIndex - 1) {\r\n        return 'previous';\r\n      }\r\n      return;\r\n    }\r\n    function onBulletClick(e) {\r\n      const bulletEl = e.target.closest(classesToSelector(swiper.params.pagination.bulletClass));\r\n      if (!bulletEl) {\r\n        return;\r\n      }\r\n      e.preventDefault();\r\n      const index = elementIndex(bulletEl) * swiper.params.slidesPerGroup;\r\n      if (swiper.params.loop) {\r\n        if (swiper.realIndex === index) return;\r\n        const moveDirection = getMoveDirection(swiper.realIndex, index, swiper.slides.length);\r\n        if (moveDirection === 'next') {\r\n          swiper.slideNext();\r\n        } else if (moveDirection === 'previous') {\r\n          swiper.slidePrev();\r\n        } else {\r\n          swiper.slideToLoop(index);\r\n        }\r\n      } else {\r\n        swiper.slideTo(index);\r\n      }\r\n    }\r\n    function update() {\r\n      // Render || Update Pagination bullets/items\r\n      const rtl = swiper.rtl;\r\n      const params = swiper.params.pagination;\r\n      if (isPaginationDisabled()) return;\r\n      let el = swiper.pagination.el;\r\n      el = makeElementsArray(el);\r\n      // Current/Total\r\n      let current;\r\n      let previousIndex;\r\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.slides.length;\r\n      const total = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\r\n      if (swiper.params.loop) {\r\n        previousIndex = swiper.previousRealIndex || 0;\r\n        current = swiper.params.slidesPerGroup > 1 ? Math.floor(swiper.realIndex / swiper.params.slidesPerGroup) : swiper.realIndex;\r\n      } else if (typeof swiper.snapIndex !== 'undefined') {\r\n        current = swiper.snapIndex;\r\n        previousIndex = swiper.previousSnapIndex;\r\n      } else {\r\n        previousIndex = swiper.previousIndex || 0;\r\n        current = swiper.activeIndex || 0;\r\n      }\r\n      // Types\r\n      if (params.type === 'bullets' && swiper.pagination.bullets && swiper.pagination.bullets.length > 0) {\r\n        const bullets = swiper.pagination.bullets;\r\n        let firstIndex;\r\n        let lastIndex;\r\n        let midIndex;\r\n        if (params.dynamicBullets) {\r\n          bulletSize = elementOuterSize(bullets[0], swiper.isHorizontal() ? 'width' : 'height', true);\r\n          el.forEach(subEl => {\r\n            subEl.style[swiper.isHorizontal() ? 'width' : 'height'] = `${bulletSize * (params.dynamicMainBullets + 4)}px`;\r\n          });\r\n          if (params.dynamicMainBullets > 1 && previousIndex !== undefined) {\r\n            dynamicBulletIndex += current - (previousIndex || 0);\r\n            if (dynamicBulletIndex > params.dynamicMainBullets - 1) {\r\n              dynamicBulletIndex = params.dynamicMainBullets - 1;\r\n            } else if (dynamicBulletIndex < 0) {\r\n              dynamicBulletIndex = 0;\r\n            }\r\n          }\r\n          firstIndex = Math.max(current - dynamicBulletIndex, 0);\r\n          lastIndex = firstIndex + (Math.min(bullets.length, params.dynamicMainBullets) - 1);\r\n          midIndex = (lastIndex + firstIndex) / 2;\r\n        }\r\n        bullets.forEach(bulletEl => {\r\n          const classesToRemove = [...['', '-next', '-next-next', '-prev', '-prev-prev', '-main'].map(suffix => `${params.bulletActiveClass}${suffix}`)].map(s => typeof s === 'string' && s.includes(' ') ? s.split(' ') : s).flat();\r\n          bulletEl.classList.remove(...classesToRemove);\r\n        });\r\n        if (el.length > 1) {\r\n          bullets.forEach(bullet => {\r\n            const bulletIndex = elementIndex(bullet);\r\n            if (bulletIndex === current) {\r\n              bullet.classList.add(...params.bulletActiveClass.split(' '));\r\n            } else if (swiper.isElement) {\r\n              bullet.setAttribute('part', 'bullet');\r\n            }\r\n            if (params.dynamicBullets) {\r\n              if (bulletIndex >= firstIndex && bulletIndex <= lastIndex) {\r\n                bullet.classList.add(...`${params.bulletActiveClass}-main`.split(' '));\r\n              }\r\n              if (bulletIndex === firstIndex) {\r\n                setSideBullets(bullet, 'prev');\r\n              }\r\n              if (bulletIndex === lastIndex) {\r\n                setSideBullets(bullet, 'next');\r\n              }\r\n            }\r\n          });\r\n        } else {\r\n          const bullet = bullets[current];\r\n          if (bullet) {\r\n            bullet.classList.add(...params.bulletActiveClass.split(' '));\r\n          }\r\n          if (swiper.isElement) {\r\n            bullets.forEach((bulletEl, bulletIndex) => {\r\n              bulletEl.setAttribute('part', bulletIndex === current ? 'bullet-active' : 'bullet');\r\n            });\r\n          }\r\n          if (params.dynamicBullets) {\r\n            const firstDisplayedBullet = bullets[firstIndex];\r\n            const lastDisplayedBullet = bullets[lastIndex];\r\n            for (let i = firstIndex; i <= lastIndex; i += 1) {\r\n              if (bullets[i]) {\r\n                bullets[i].classList.add(...`${params.bulletActiveClass}-main`.split(' '));\r\n              }\r\n            }\r\n            setSideBullets(firstDisplayedBullet, 'prev');\r\n            setSideBullets(lastDisplayedBullet, 'next');\r\n          }\r\n        }\r\n        if (params.dynamicBullets) {\r\n          const dynamicBulletsLength = Math.min(bullets.length, params.dynamicMainBullets + 4);\r\n          const bulletsOffset = (bulletSize * dynamicBulletsLength - bulletSize) / 2 - midIndex * bulletSize;\r\n          const offsetProp = rtl ? 'right' : 'left';\r\n          bullets.forEach(bullet => {\r\n            bullet.style[swiper.isHorizontal() ? offsetProp : 'top'] = `${bulletsOffset}px`;\r\n          });\r\n        }\r\n      }\r\n      el.forEach((subEl, subElIndex) => {\r\n        if (params.type === 'fraction') {\r\n          subEl.querySelectorAll(classesToSelector(params.currentClass)).forEach(fractionEl => {\r\n            fractionEl.textContent = params.formatFractionCurrent(current + 1);\r\n          });\r\n          subEl.querySelectorAll(classesToSelector(params.totalClass)).forEach(totalEl => {\r\n            totalEl.textContent = params.formatFractionTotal(total);\r\n          });\r\n        }\r\n        if (params.type === 'progressbar') {\r\n          let progressbarDirection;\r\n          if (params.progressbarOpposite) {\r\n            progressbarDirection = swiper.isHorizontal() ? 'vertical' : 'horizontal';\r\n          } else {\r\n            progressbarDirection = swiper.isHorizontal() ? 'horizontal' : 'vertical';\r\n          }\r\n          const scale = (current + 1) / total;\r\n          let scaleX = 1;\r\n          let scaleY = 1;\r\n          if (progressbarDirection === 'horizontal') {\r\n            scaleX = scale;\r\n          } else {\r\n            scaleY = scale;\r\n          }\r\n          subEl.querySelectorAll(classesToSelector(params.progressbarFillClass)).forEach(progressEl => {\r\n            progressEl.style.transform = `translate3d(0,0,0) scaleX(${scaleX}) scaleY(${scaleY})`;\r\n            progressEl.style.transitionDuration = `${swiper.params.speed}ms`;\r\n          });\r\n        }\r\n        if (params.type === 'custom' && params.renderCustom) {\r\n          subEl.innerHTML = params.renderCustom(swiper, current + 1, total);\r\n          if (subElIndex === 0) emit('paginationRender', subEl);\r\n        } else {\r\n          if (subElIndex === 0) emit('paginationRender', subEl);\r\n          emit('paginationUpdate', subEl);\r\n        }\r\n        if (swiper.params.watchOverflow && swiper.enabled) {\r\n          subEl.classList[swiper.isLocked ? 'add' : 'remove'](params.lockClass);\r\n        }\r\n      });\r\n    }\r\n    function render() {\r\n      // Render Container\r\n      const params = swiper.params.pagination;\r\n      if (isPaginationDisabled()) return;\r\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : swiper.grid && swiper.params.grid.rows > 1 ? swiper.slides.length / Math.ceil(swiper.params.grid.rows) : swiper.slides.length;\r\n      let el = swiper.pagination.el;\r\n      el = makeElementsArray(el);\r\n      let paginationHTML = '';\r\n      if (params.type === 'bullets') {\r\n        let numberOfBullets = swiper.params.loop ? Math.ceil(slidesLength / swiper.params.slidesPerGroup) : swiper.snapGrid.length;\r\n        if (swiper.params.freeMode && swiper.params.freeMode.enabled && numberOfBullets > slidesLength) {\r\n          numberOfBullets = slidesLength;\r\n        }\r\n        for (let i = 0; i < numberOfBullets; i += 1) {\r\n          if (params.renderBullet) {\r\n            paginationHTML += params.renderBullet.call(swiper, i, params.bulletClass);\r\n          } else {\r\n            // prettier-ignore\r\n            paginationHTML += `<${params.bulletElement} ${swiper.isElement ? 'part=\"bullet\"' : ''} class=\"${params.bulletClass}\"></${params.bulletElement}>`;\r\n          }\r\n        }\r\n      }\r\n      if (params.type === 'fraction') {\r\n        if (params.renderFraction) {\r\n          paginationHTML = params.renderFraction.call(swiper, params.currentClass, params.totalClass);\r\n        } else {\r\n          paginationHTML = `<span class=\"${params.currentClass}\"></span>` + ' / ' + `<span class=\"${params.totalClass}\"></span>`;\r\n        }\r\n      }\r\n      if (params.type === 'progressbar') {\r\n        if (params.renderProgressbar) {\r\n          paginationHTML = params.renderProgressbar.call(swiper, params.progressbarFillClass);\r\n        } else {\r\n          paginationHTML = `<span class=\"${params.progressbarFillClass}\"></span>`;\r\n        }\r\n      }\r\n      swiper.pagination.bullets = [];\r\n      el.forEach(subEl => {\r\n        if (params.type !== 'custom') {\r\n          subEl.innerHTML = paginationHTML || '';\r\n        }\r\n        if (params.type === 'bullets') {\r\n          swiper.pagination.bullets.push(...subEl.querySelectorAll(classesToSelector(params.bulletClass)));\r\n        }\r\n      });\r\n      if (params.type !== 'custom') {\r\n        emit('paginationRender', el[0]);\r\n      }\r\n    }\r\n    function init() {\r\n      swiper.params.pagination = createElementIfNotDefined(swiper, swiper.originalParams.pagination, swiper.params.pagination, {\r\n        el: 'swiper-pagination'\r\n      });\r\n      const params = swiper.params.pagination;\r\n      if (!params.el) return;\r\n      let el;\r\n      if (typeof params.el === 'string' && swiper.isElement) {\r\n        el = swiper.el.querySelector(params.el);\r\n      }\r\n      if (!el && typeof params.el === 'string') {\r\n        el = [...document.querySelectorAll(params.el)];\r\n      }\r\n      if (!el) {\r\n        el = params.el;\r\n      }\r\n      if (!el || el.length === 0) return;\r\n      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && Array.isArray(el) && el.length > 1) {\r\n        el = [...swiper.el.querySelectorAll(params.el)];\r\n        // check if it belongs to another nested Swiper\r\n        if (el.length > 1) {\r\n          el = el.filter(subEl => {\r\n            if (elementParents(subEl, '.swiper')[0] !== swiper.el) return false;\r\n            return true;\r\n          })[0];\r\n        }\r\n      }\r\n      if (Array.isArray(el) && el.length === 1) el = el[0];\r\n      Object.assign(swiper.pagination, {\r\n        el\r\n      });\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        if (params.type === 'bullets' && params.clickable) {\r\n          subEl.classList.add(...(params.clickableClass || '').split(' '));\r\n        }\r\n        subEl.classList.add(params.modifierClass + params.type);\r\n        subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n        if (params.type === 'bullets' && params.dynamicBullets) {\r\n          subEl.classList.add(`${params.modifierClass}${params.type}-dynamic`);\r\n          dynamicBulletIndex = 0;\r\n          if (params.dynamicMainBullets < 1) {\r\n            params.dynamicMainBullets = 1;\r\n          }\r\n        }\r\n        if (params.type === 'progressbar' && params.progressbarOpposite) {\r\n          subEl.classList.add(params.progressbarOppositeClass);\r\n        }\r\n        if (params.clickable) {\r\n          subEl.addEventListener('click', onBulletClick);\r\n        }\r\n        if (!swiper.enabled) {\r\n          subEl.classList.add(params.lockClass);\r\n        }\r\n      });\r\n    }\r\n    function destroy() {\r\n      const params = swiper.params.pagination;\r\n      if (isPaginationDisabled()) return;\r\n      let el = swiper.pagination.el;\r\n      if (el) {\r\n        el = makeElementsArray(el);\r\n        el.forEach(subEl => {\r\n          subEl.classList.remove(params.hiddenClass);\r\n          subEl.classList.remove(params.modifierClass + params.type);\r\n          subEl.classList.remove(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n          if (params.clickable) {\r\n            subEl.classList.remove(...(params.clickableClass || '').split(' '));\r\n            subEl.removeEventListener('click', onBulletClick);\r\n          }\r\n        });\r\n      }\r\n      if (swiper.pagination.bullets) swiper.pagination.bullets.forEach(subEl => subEl.classList.remove(...params.bulletActiveClass.split(' ')));\r\n    }\r\n    on('changeDirection', () => {\r\n      if (!swiper.pagination || !swiper.pagination.el) return;\r\n      const params = swiper.params.pagination;\r\n      let {\r\n        el\r\n      } = swiper.pagination;\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.classList.remove(params.horizontalClass, params.verticalClass);\r\n        subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n      });\r\n    });\r\n    on('init', () => {\r\n      if (swiper.params.pagination.enabled === false) {\r\n        // eslint-disable-next-line\r\n        disable();\r\n      } else {\r\n        init();\r\n        render();\r\n        update();\r\n      }\r\n    });\r\n    on('activeIndexChange', () => {\r\n      if (typeof swiper.snapIndex === 'undefined') {\r\n        update();\r\n      }\r\n    });\r\n    on('snapIndexChange', () => {\r\n      update();\r\n    });\r\n    on('snapGridLengthChange', () => {\r\n      render();\r\n      update();\r\n    });\r\n    on('destroy', () => {\r\n      destroy();\r\n    });\r\n    on('enable disable', () => {\r\n      let {\r\n        el\r\n      } = swiper.pagination;\r\n      if (el) {\r\n        el = makeElementsArray(el);\r\n        el.forEach(subEl => subEl.classList[swiper.enabled ? 'remove' : 'add'](swiper.params.pagination.lockClass));\r\n      }\r\n    });\r\n    on('lock unlock', () => {\r\n      update();\r\n    });\r\n    on('click', (_s, e) => {\r\n      const targetEl = e.target;\r\n      const el = makeElementsArray(swiper.pagination.el);\r\n      if (swiper.params.pagination.el && swiper.params.pagination.hideOnClick && el && el.length > 0 && !targetEl.classList.contains(swiper.params.pagination.bulletClass)) {\r\n        if (swiper.navigation && (swiper.navigation.nextEl && targetEl === swiper.navigation.nextEl || swiper.navigation.prevEl && targetEl === swiper.navigation.prevEl)) return;\r\n        const isHidden = el[0].classList.contains(swiper.params.pagination.hiddenClass);\r\n        if (isHidden === true) {\r\n          emit('paginationShow');\r\n        } else {\r\n          emit('paginationHide');\r\n        }\r\n        el.forEach(subEl => subEl.classList.toggle(swiper.params.pagination.hiddenClass));\r\n      }\r\n    });\r\n    const enable = () => {\r\n      swiper.el.classList.remove(swiper.params.pagination.paginationDisabledClass);\r\n      let {\r\n        el\r\n      } = swiper.pagination;\r\n      if (el) {\r\n        el = makeElementsArray(el);\r\n        el.forEach(subEl => subEl.classList.remove(swiper.params.pagination.paginationDisabledClass));\r\n      }\r\n      init();\r\n      render();\r\n      update();\r\n    };\r\n    const disable = () => {\r\n      swiper.el.classList.add(swiper.params.pagination.paginationDisabledClass);\r\n      let {\r\n        el\r\n      } = swiper.pagination;\r\n      if (el) {\r\n        el = makeElementsArray(el);\r\n        el.forEach(subEl => subEl.classList.add(swiper.params.pagination.paginationDisabledClass));\r\n      }\r\n      destroy();\r\n    };\r\n    Object.assign(swiper.pagination, {\r\n      enable,\r\n      disable,\r\n      render,\r\n      update,\r\n      init,\r\n      destroy\r\n    });\r\n  }\r\n\r\n  function Scrollbar(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const document = getDocument();\r\n    let isTouched = false;\r\n    let timeout = null;\r\n    let dragTimeout = null;\r\n    let dragStartPos;\r\n    let dragSize;\r\n    let trackSize;\r\n    let divider;\r\n    extendParams({\r\n      scrollbar: {\r\n        el: null,\r\n        dragSize: 'auto',\r\n        hide: false,\r\n        draggable: false,\r\n        snapOnRelease: true,\r\n        lockClass: 'swiper-scrollbar-lock',\r\n        dragClass: 'swiper-scrollbar-drag',\r\n        scrollbarDisabledClass: 'swiper-scrollbar-disabled',\r\n        horizontalClass: `swiper-scrollbar-horizontal`,\r\n        verticalClass: `swiper-scrollbar-vertical`\r\n      }\r\n    });\r\n    swiper.scrollbar = {\r\n      el: null,\r\n      dragEl: null\r\n    };\r\n    function setTranslate() {\r\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n      const {\r\n        scrollbar,\r\n        rtlTranslate: rtl\r\n      } = swiper;\r\n      const {\r\n        dragEl,\r\n        el\r\n      } = scrollbar;\r\n      const params = swiper.params.scrollbar;\r\n      const progress = swiper.params.loop ? swiper.progressLoop : swiper.progress;\r\n      let newSize = dragSize;\r\n      let newPos = (trackSize - dragSize) * progress;\r\n      if (rtl) {\r\n        newPos = -newPos;\r\n        if (newPos > 0) {\r\n          newSize = dragSize - newPos;\r\n          newPos = 0;\r\n        } else if (-newPos + dragSize > trackSize) {\r\n          newSize = trackSize + newPos;\r\n        }\r\n      } else if (newPos < 0) {\r\n        newSize = dragSize + newPos;\r\n        newPos = 0;\r\n      } else if (newPos + dragSize > trackSize) {\r\n        newSize = trackSize - newPos;\r\n      }\r\n      if (swiper.isHorizontal()) {\r\n        dragEl.style.transform = `translate3d(${newPos}px, 0, 0)`;\r\n        dragEl.style.width = `${newSize}px`;\r\n      } else {\r\n        dragEl.style.transform = `translate3d(0px, ${newPos}px, 0)`;\r\n        dragEl.style.height = `${newSize}px`;\r\n      }\r\n      if (params.hide) {\r\n        clearTimeout(timeout);\r\n        el.style.opacity = 1;\r\n        timeout = setTimeout(() => {\r\n          el.style.opacity = 0;\r\n          el.style.transitionDuration = '400ms';\r\n        }, 1000);\r\n      }\r\n    }\r\n    function setTransition(duration) {\r\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n      swiper.scrollbar.dragEl.style.transitionDuration = `${duration}ms`;\r\n    }\r\n    function updateSize() {\r\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n      const {\r\n        scrollbar\r\n      } = swiper;\r\n      const {\r\n        dragEl,\r\n        el\r\n      } = scrollbar;\r\n      dragEl.style.width = '';\r\n      dragEl.style.height = '';\r\n      trackSize = swiper.isHorizontal() ? el.offsetWidth : el.offsetHeight;\r\n      divider = swiper.size / (swiper.virtualSize + swiper.params.slidesOffsetBefore - (swiper.params.centeredSlides ? swiper.snapGrid[0] : 0));\r\n      if (swiper.params.scrollbar.dragSize === 'auto') {\r\n        dragSize = trackSize * divider;\r\n      } else {\r\n        dragSize = parseInt(swiper.params.scrollbar.dragSize, 10);\r\n      }\r\n      if (swiper.isHorizontal()) {\r\n        dragEl.style.width = `${dragSize}px`;\r\n      } else {\r\n        dragEl.style.height = `${dragSize}px`;\r\n      }\r\n      if (divider >= 1) {\r\n        el.style.display = 'none';\r\n      } else {\r\n        el.style.display = '';\r\n      }\r\n      if (swiper.params.scrollbar.hide) {\r\n        el.style.opacity = 0;\r\n      }\r\n      if (swiper.params.watchOverflow && swiper.enabled) {\r\n        scrollbar.el.classList[swiper.isLocked ? 'add' : 'remove'](swiper.params.scrollbar.lockClass);\r\n      }\r\n    }\r\n    function getPointerPosition(e) {\r\n      return swiper.isHorizontal() ? e.clientX : e.clientY;\r\n    }\r\n    function setDragPosition(e) {\r\n      const {\r\n        scrollbar,\r\n        rtlTranslate: rtl\r\n      } = swiper;\r\n      const {\r\n        el\r\n      } = scrollbar;\r\n      let positionRatio;\r\n      positionRatio = (getPointerPosition(e) - elementOffset(el)[swiper.isHorizontal() ? 'left' : 'top'] - (dragStartPos !== null ? dragStartPos : dragSize / 2)) / (trackSize - dragSize);\r\n      positionRatio = Math.max(Math.min(positionRatio, 1), 0);\r\n      if (rtl) {\r\n        positionRatio = 1 - positionRatio;\r\n      }\r\n      const position = swiper.minTranslate() + (swiper.maxTranslate() - swiper.minTranslate()) * positionRatio;\r\n      swiper.updateProgress(position);\r\n      swiper.setTranslate(position);\r\n      swiper.updateActiveIndex();\r\n      swiper.updateSlidesClasses();\r\n    }\r\n    function onDragStart(e) {\r\n      const params = swiper.params.scrollbar;\r\n      const {\r\n        scrollbar,\r\n        wrapperEl\r\n      } = swiper;\r\n      const {\r\n        el,\r\n        dragEl\r\n      } = scrollbar;\r\n      isTouched = true;\r\n      dragStartPos = e.target === dragEl ? getPointerPosition(e) - e.target.getBoundingClientRect()[swiper.isHorizontal() ? 'left' : 'top'] : null;\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      wrapperEl.style.transitionDuration = '100ms';\r\n      dragEl.style.transitionDuration = '100ms';\r\n      setDragPosition(e);\r\n      clearTimeout(dragTimeout);\r\n      el.style.transitionDuration = '0ms';\r\n      if (params.hide) {\r\n        el.style.opacity = 1;\r\n      }\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.style['scroll-snap-type'] = 'none';\r\n      }\r\n      emit('scrollbarDragStart', e);\r\n    }\r\n    function onDragMove(e) {\r\n      const {\r\n        scrollbar,\r\n        wrapperEl\r\n      } = swiper;\r\n      const {\r\n        el,\r\n        dragEl\r\n      } = scrollbar;\r\n      if (!isTouched) return;\r\n      if (e.preventDefault && e.cancelable) e.preventDefault();else e.returnValue = false;\r\n      setDragPosition(e);\r\n      wrapperEl.style.transitionDuration = '0ms';\r\n      el.style.transitionDuration = '0ms';\r\n      dragEl.style.transitionDuration = '0ms';\r\n      emit('scrollbarDragMove', e);\r\n    }\r\n    function onDragEnd(e) {\r\n      const params = swiper.params.scrollbar;\r\n      const {\r\n        scrollbar,\r\n        wrapperEl\r\n      } = swiper;\r\n      const {\r\n        el\r\n      } = scrollbar;\r\n      if (!isTouched) return;\r\n      isTouched = false;\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.style['scroll-snap-type'] = '';\r\n        wrapperEl.style.transitionDuration = '';\r\n      }\r\n      if (params.hide) {\r\n        clearTimeout(dragTimeout);\r\n        dragTimeout = nextTick(() => {\r\n          el.style.opacity = 0;\r\n          el.style.transitionDuration = '400ms';\r\n        }, 1000);\r\n      }\r\n      emit('scrollbarDragEnd', e);\r\n      if (params.snapOnRelease) {\r\n        swiper.slideToClosest();\r\n      }\r\n    }\r\n    function events(method) {\r\n      const {\r\n        scrollbar,\r\n        params\r\n      } = swiper;\r\n      const el = scrollbar.el;\r\n      if (!el) return;\r\n      const target = el;\r\n      const activeListener = params.passiveListeners ? {\r\n        passive: false,\r\n        capture: false\r\n      } : false;\r\n      const passiveListener = params.passiveListeners ? {\r\n        passive: true,\r\n        capture: false\r\n      } : false;\r\n      if (!target) return;\r\n      const eventMethod = method === 'on' ? 'addEventListener' : 'removeEventListener';\r\n      target[eventMethod]('pointerdown', onDragStart, activeListener);\r\n      document[eventMethod]('pointermove', onDragMove, activeListener);\r\n      document[eventMethod]('pointerup', onDragEnd, passiveListener);\r\n    }\r\n    function enableDraggable() {\r\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n      events('on');\r\n    }\r\n    function disableDraggable() {\r\n      if (!swiper.params.scrollbar.el || !swiper.scrollbar.el) return;\r\n      events('off');\r\n    }\r\n    function init() {\r\n      const {\r\n        scrollbar,\r\n        el: swiperEl\r\n      } = swiper;\r\n      swiper.params.scrollbar = createElementIfNotDefined(swiper, swiper.originalParams.scrollbar, swiper.params.scrollbar, {\r\n        el: 'swiper-scrollbar'\r\n      });\r\n      const params = swiper.params.scrollbar;\r\n      if (!params.el) return;\r\n      let el;\r\n      if (typeof params.el === 'string' && swiper.isElement) {\r\n        el = swiper.el.querySelector(params.el);\r\n      }\r\n      if (!el && typeof params.el === 'string') {\r\n        el = document.querySelectorAll(params.el);\r\n        if (!el.length) return;\r\n      } else if (!el) {\r\n        el = params.el;\r\n      }\r\n      if (swiper.params.uniqueNavElements && typeof params.el === 'string' && el.length > 1 && swiperEl.querySelectorAll(params.el).length === 1) {\r\n        el = swiperEl.querySelector(params.el);\r\n      }\r\n      if (el.length > 0) el = el[0];\r\n      el.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n      let dragEl;\r\n      if (el) {\r\n        dragEl = el.querySelector(classesToSelector(swiper.params.scrollbar.dragClass));\r\n        if (!dragEl) {\r\n          dragEl = createElement('div', swiper.params.scrollbar.dragClass);\r\n          el.append(dragEl);\r\n        }\r\n      }\r\n      Object.assign(scrollbar, {\r\n        el,\r\n        dragEl\r\n      });\r\n      if (params.draggable) {\r\n        enableDraggable();\r\n      }\r\n      if (el) {\r\n        el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));\r\n      }\r\n    }\r\n    function destroy() {\r\n      const params = swiper.params.scrollbar;\r\n      const el = swiper.scrollbar.el;\r\n      if (el) {\r\n        el.classList.remove(...classesToTokens(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass));\r\n      }\r\n      disableDraggable();\r\n    }\r\n    on('changeDirection', () => {\r\n      if (!swiper.scrollbar || !swiper.scrollbar.el) return;\r\n      const params = swiper.params.scrollbar;\r\n      let {\r\n        el\r\n      } = swiper.scrollbar;\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.classList.remove(params.horizontalClass, params.verticalClass);\r\n        subEl.classList.add(swiper.isHorizontal() ? params.horizontalClass : params.verticalClass);\r\n      });\r\n    });\r\n    on('init', () => {\r\n      if (swiper.params.scrollbar.enabled === false) {\r\n        // eslint-disable-next-line\r\n        disable();\r\n      } else {\r\n        init();\r\n        updateSize();\r\n        setTranslate();\r\n      }\r\n    });\r\n    on('update resize observerUpdate lock unlock changeDirection', () => {\r\n      updateSize();\r\n    });\r\n    on('setTranslate', () => {\r\n      setTranslate();\r\n    });\r\n    on('setTransition', (_s, duration) => {\r\n      setTransition(duration);\r\n    });\r\n    on('enable disable', () => {\r\n      const {\r\n        el\r\n      } = swiper.scrollbar;\r\n      if (el) {\r\n        el.classList[swiper.enabled ? 'remove' : 'add'](...classesToTokens(swiper.params.scrollbar.lockClass));\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      destroy();\r\n    });\r\n    const enable = () => {\r\n      swiper.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\r\n      if (swiper.scrollbar.el) {\r\n        swiper.scrollbar.el.classList.remove(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\r\n      }\r\n      init();\r\n      updateSize();\r\n      setTranslate();\r\n    };\r\n    const disable = () => {\r\n      swiper.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\r\n      if (swiper.scrollbar.el) {\r\n        swiper.scrollbar.el.classList.add(...classesToTokens(swiper.params.scrollbar.scrollbarDisabledClass));\r\n      }\r\n      destroy();\r\n    };\r\n    Object.assign(swiper.scrollbar, {\r\n      enable,\r\n      disable,\r\n      updateSize,\r\n      setTranslate,\r\n      init,\r\n      destroy\r\n    });\r\n  }\r\n\r\n  function Parallax(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      parallax: {\r\n        enabled: false\r\n      }\r\n    });\r\n    const elementsSelector = '[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]';\r\n    const setTransform = (el, progress) => {\r\n      const {\r\n        rtl\r\n      } = swiper;\r\n      const rtlFactor = rtl ? -1 : 1;\r\n      const p = el.getAttribute('data-swiper-parallax') || '0';\r\n      let x = el.getAttribute('data-swiper-parallax-x');\r\n      let y = el.getAttribute('data-swiper-parallax-y');\r\n      const scale = el.getAttribute('data-swiper-parallax-scale');\r\n      const opacity = el.getAttribute('data-swiper-parallax-opacity');\r\n      const rotate = el.getAttribute('data-swiper-parallax-rotate');\r\n      if (x || y) {\r\n        x = x || '0';\r\n        y = y || '0';\r\n      } else if (swiper.isHorizontal()) {\r\n        x = p;\r\n        y = '0';\r\n      } else {\r\n        y = p;\r\n        x = '0';\r\n      }\r\n      if (x.indexOf('%') >= 0) {\r\n        x = `${parseInt(x, 10) * progress * rtlFactor}%`;\r\n      } else {\r\n        x = `${x * progress * rtlFactor}px`;\r\n      }\r\n      if (y.indexOf('%') >= 0) {\r\n        y = `${parseInt(y, 10) * progress}%`;\r\n      } else {\r\n        y = `${y * progress}px`;\r\n      }\r\n      if (typeof opacity !== 'undefined' && opacity !== null) {\r\n        const currentOpacity = opacity - (opacity - 1) * (1 - Math.abs(progress));\r\n        el.style.opacity = currentOpacity;\r\n      }\r\n      let transform = `translate3d(${x}, ${y}, 0px)`;\r\n      if (typeof scale !== 'undefined' && scale !== null) {\r\n        const currentScale = scale - (scale - 1) * (1 - Math.abs(progress));\r\n        transform += ` scale(${currentScale})`;\r\n      }\r\n      if (rotate && typeof rotate !== 'undefined' && rotate !== null) {\r\n        const currentRotate = rotate * progress * -1;\r\n        transform += ` rotate(${currentRotate}deg)`;\r\n      }\r\n      el.style.transform = transform;\r\n    };\r\n    const setTranslate = () => {\r\n      const {\r\n        el,\r\n        slides,\r\n        progress,\r\n        snapGrid,\r\n        isElement\r\n      } = swiper;\r\n      const elements = elementChildren(el, elementsSelector);\r\n      if (swiper.isElement) {\r\n        elements.push(...elementChildren(swiper.hostEl, elementsSelector));\r\n      }\r\n      elements.forEach(subEl => {\r\n        setTransform(subEl, progress);\r\n      });\r\n      slides.forEach((slideEl, slideIndex) => {\r\n        let slideProgress = slideEl.progress;\r\n        if (swiper.params.slidesPerGroup > 1 && swiper.params.slidesPerView !== 'auto') {\r\n          slideProgress += Math.ceil(slideIndex / 2) - progress * (snapGrid.length - 1);\r\n        }\r\n        slideProgress = Math.min(Math.max(slideProgress, -1), 1);\r\n        slideEl.querySelectorAll(`${elementsSelector}, [data-swiper-parallax-rotate]`).forEach(subEl => {\r\n          setTransform(subEl, slideProgress);\r\n        });\r\n      });\r\n    };\r\n    const setTransition = function (duration) {\r\n      if (duration === void 0) {\r\n        duration = swiper.params.speed;\r\n      }\r\n      const {\r\n        el,\r\n        hostEl\r\n      } = swiper;\r\n      const elements = [...el.querySelectorAll(elementsSelector)];\r\n      if (swiper.isElement) {\r\n        elements.push(...hostEl.querySelectorAll(elementsSelector));\r\n      }\r\n      elements.forEach(parallaxEl => {\r\n        let parallaxDuration = parseInt(parallaxEl.getAttribute('data-swiper-parallax-duration'), 10) || duration;\r\n        if (duration === 0) parallaxDuration = 0;\r\n        parallaxEl.style.transitionDuration = `${parallaxDuration}ms`;\r\n      });\r\n    };\r\n    on('beforeInit', () => {\r\n      if (!swiper.params.parallax.enabled) return;\r\n      swiper.params.watchSlidesProgress = true;\r\n      swiper.originalParams.watchSlidesProgress = true;\r\n    });\r\n    on('init', () => {\r\n      if (!swiper.params.parallax.enabled) return;\r\n      setTranslate();\r\n    });\r\n    on('setTranslate', () => {\r\n      if (!swiper.params.parallax.enabled) return;\r\n      setTranslate();\r\n    });\r\n    on('setTransition', (_swiper, duration) => {\r\n      if (!swiper.params.parallax.enabled) return;\r\n      setTransition(duration);\r\n    });\r\n  }\r\n\r\n  function Zoom(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit\r\n    } = _ref;\r\n    const window = getWindow();\r\n    extendParams({\r\n      zoom: {\r\n        enabled: false,\r\n        limitToOriginalSize: false,\r\n        maxRatio: 3,\r\n        minRatio: 1,\r\n        toggle: true,\r\n        containerClass: 'swiper-zoom-container',\r\n        zoomedSlideClass: 'swiper-slide-zoomed'\r\n      }\r\n    });\r\n    swiper.zoom = {\r\n      enabled: false\r\n    };\r\n    let currentScale = 1;\r\n    let isScaling = false;\r\n    let fakeGestureTouched;\r\n    let fakeGestureMoved;\r\n    const evCache = [];\r\n    const gesture = {\r\n      originX: 0,\r\n      originY: 0,\r\n      slideEl: undefined,\r\n      slideWidth: undefined,\r\n      slideHeight: undefined,\r\n      imageEl: undefined,\r\n      imageWrapEl: undefined,\r\n      maxRatio: 3\r\n    };\r\n    const image = {\r\n      isTouched: undefined,\r\n      isMoved: undefined,\r\n      currentX: undefined,\r\n      currentY: undefined,\r\n      minX: undefined,\r\n      minY: undefined,\r\n      maxX: undefined,\r\n      maxY: undefined,\r\n      width: undefined,\r\n      height: undefined,\r\n      startX: undefined,\r\n      startY: undefined,\r\n      touchesStart: {},\r\n      touchesCurrent: {}\r\n    };\r\n    const velocity = {\r\n      x: undefined,\r\n      y: undefined,\r\n      prevPositionX: undefined,\r\n      prevPositionY: undefined,\r\n      prevTime: undefined\r\n    };\r\n    let scale = 1;\r\n    Object.defineProperty(swiper.zoom, 'scale', {\r\n      get() {\r\n        return scale;\r\n      },\r\n      set(value) {\r\n        if (scale !== value) {\r\n          const imageEl = gesture.imageEl;\r\n          const slideEl = gesture.slideEl;\r\n          emit('zoomChange', value, imageEl, slideEl);\r\n        }\r\n        scale = value;\r\n      }\r\n    });\r\n    function getDistanceBetweenTouches() {\r\n      if (evCache.length < 2) return 1;\r\n      const x1 = evCache[0].pageX;\r\n      const y1 = evCache[0].pageY;\r\n      const x2 = evCache[1].pageX;\r\n      const y2 = evCache[1].pageY;\r\n      const distance = Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);\r\n      return distance;\r\n    }\r\n    function getMaxRatio() {\r\n      const params = swiper.params.zoom;\r\n      const maxRatio = gesture.imageWrapEl.getAttribute('data-swiper-zoom') || params.maxRatio;\r\n      if (params.limitToOriginalSize && gesture.imageEl && gesture.imageEl.naturalWidth) {\r\n        const imageMaxRatio = gesture.imageEl.naturalWidth / gesture.imageEl.offsetWidth;\r\n        return Math.min(imageMaxRatio, maxRatio);\r\n      }\r\n      return maxRatio;\r\n    }\r\n    function getScaleOrigin() {\r\n      if (evCache.length < 2) return {\r\n        x: null,\r\n        y: null\r\n      };\r\n      const box = gesture.imageEl.getBoundingClientRect();\r\n      return [(evCache[0].pageX + (evCache[1].pageX - evCache[0].pageX) / 2 - box.x - window.scrollX) / currentScale, (evCache[0].pageY + (evCache[1].pageY - evCache[0].pageY) / 2 - box.y - window.scrollY) / currentScale];\r\n    }\r\n    function getSlideSelector() {\r\n      return swiper.isElement ? `swiper-slide` : `.${swiper.params.slideClass}`;\r\n    }\r\n    function eventWithinSlide(e) {\r\n      const slideSelector = getSlideSelector();\r\n      if (e.target.matches(slideSelector)) return true;\r\n      if (swiper.slides.filter(slideEl => slideEl.contains(e.target)).length > 0) return true;\r\n      return false;\r\n    }\r\n    function eventWithinZoomContainer(e) {\r\n      const selector = `.${swiper.params.zoom.containerClass}`;\r\n      if (e.target.matches(selector)) return true;\r\n      if ([...swiper.hostEl.querySelectorAll(selector)].filter(containerEl => containerEl.contains(e.target)).length > 0) return true;\r\n      return false;\r\n    }\r\n\r\n    // Events\r\n    function onGestureStart(e) {\r\n      if (e.pointerType === 'mouse') {\r\n        evCache.splice(0, evCache.length);\r\n      }\r\n      if (!eventWithinSlide(e)) return;\r\n      const params = swiper.params.zoom;\r\n      fakeGestureTouched = false;\r\n      fakeGestureMoved = false;\r\n      evCache.push(e);\r\n      if (evCache.length < 2) {\r\n        return;\r\n      }\r\n      fakeGestureTouched = true;\r\n      gesture.scaleStart = getDistanceBetweenTouches();\r\n      if (!gesture.slideEl) {\r\n        gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n        if (!gesture.slideEl) gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n        if (imageEl) {\r\n          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n        }\r\n        gesture.imageEl = imageEl;\r\n        if (imageEl) {\r\n          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\r\n        } else {\r\n          gesture.imageWrapEl = undefined;\r\n        }\r\n        if (!gesture.imageWrapEl) {\r\n          gesture.imageEl = undefined;\r\n          return;\r\n        }\r\n        gesture.maxRatio = getMaxRatio();\r\n      }\r\n      if (gesture.imageEl) {\r\n        const [originX, originY] = getScaleOrigin();\r\n        gesture.originX = originX;\r\n        gesture.originY = originY;\r\n        gesture.imageEl.style.transitionDuration = '0ms';\r\n      }\r\n      isScaling = true;\r\n    }\r\n    function onGestureChange(e) {\r\n      if (!eventWithinSlide(e)) return;\r\n      const params = swiper.params.zoom;\r\n      const zoom = swiper.zoom;\r\n      const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\r\n      if (pointerIndex >= 0) evCache[pointerIndex] = e;\r\n      if (evCache.length < 2) {\r\n        return;\r\n      }\r\n      fakeGestureMoved = true;\r\n      gesture.scaleMove = getDistanceBetweenTouches();\r\n      if (!gesture.imageEl) {\r\n        return;\r\n      }\r\n      zoom.scale = gesture.scaleMove / gesture.scaleStart * currentScale;\r\n      if (zoom.scale > gesture.maxRatio) {\r\n        zoom.scale = gesture.maxRatio - 1 + (zoom.scale - gesture.maxRatio + 1) ** 0.5;\r\n      }\r\n      if (zoom.scale < params.minRatio) {\r\n        zoom.scale = params.minRatio + 1 - (params.minRatio - zoom.scale + 1) ** 0.5;\r\n      }\r\n      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n    }\r\n    function onGestureEnd(e) {\r\n      if (!eventWithinSlide(e)) return;\r\n      if (e.pointerType === 'mouse' && e.type === 'pointerout') return;\r\n      const params = swiper.params.zoom;\r\n      const zoom = swiper.zoom;\r\n      const pointerIndex = evCache.findIndex(cachedEv => cachedEv.pointerId === e.pointerId);\r\n      if (pointerIndex >= 0) evCache.splice(pointerIndex, 1);\r\n      if (!fakeGestureTouched || !fakeGestureMoved) {\r\n        return;\r\n      }\r\n      fakeGestureTouched = false;\r\n      fakeGestureMoved = false;\r\n      if (!gesture.imageEl) return;\r\n      zoom.scale = Math.max(Math.min(zoom.scale, gesture.maxRatio), params.minRatio);\r\n      gesture.imageEl.style.transitionDuration = `${swiper.params.speed}ms`;\r\n      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n      currentScale = zoom.scale;\r\n      isScaling = false;\r\n      if (zoom.scale > 1 && gesture.slideEl) {\r\n        gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\r\n      } else if (zoom.scale <= 1 && gesture.slideEl) {\r\n        gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\r\n      }\r\n      if (zoom.scale === 1) {\r\n        gesture.originX = 0;\r\n        gesture.originY = 0;\r\n        gesture.slideEl = undefined;\r\n      }\r\n    }\r\n    let allowTouchMoveTimeout;\r\n    function allowTouchMove() {\r\n      swiper.touchEventsData.preventTouchMoveFromPointerMove = false;\r\n    }\r\n    function preventTouchMove() {\r\n      clearTimeout(allowTouchMoveTimeout);\r\n      swiper.touchEventsData.preventTouchMoveFromPointerMove = true;\r\n      allowTouchMoveTimeout = setTimeout(() => {\r\n        allowTouchMove();\r\n      });\r\n    }\r\n    function onTouchStart(e) {\r\n      const device = swiper.device;\r\n      if (!gesture.imageEl) return;\r\n      if (image.isTouched) return;\r\n      if (device.android && e.cancelable) e.preventDefault();\r\n      image.isTouched = true;\r\n      const event = evCache.length > 0 ? evCache[0] : e;\r\n      image.touchesStart.x = event.pageX;\r\n      image.touchesStart.y = event.pageY;\r\n    }\r\n    function onTouchMove(e) {\r\n      if (!eventWithinSlide(e) || !eventWithinZoomContainer(e)) {\r\n        return;\r\n      }\r\n      const zoom = swiper.zoom;\r\n      if (!gesture.imageEl) {\r\n        return;\r\n      }\r\n      if (!image.isTouched || !gesture.slideEl) {\r\n        return;\r\n      }\r\n      if (!image.isMoved) {\r\n        image.width = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\r\n        image.height = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\r\n        image.startX = getTranslate(gesture.imageWrapEl, 'x') || 0;\r\n        image.startY = getTranslate(gesture.imageWrapEl, 'y') || 0;\r\n        gesture.slideWidth = gesture.slideEl.offsetWidth;\r\n        gesture.slideHeight = gesture.slideEl.offsetHeight;\r\n        gesture.imageWrapEl.style.transitionDuration = '0ms';\r\n      }\r\n      // Define if we need image drag\r\n      const scaledWidth = image.width * zoom.scale;\r\n      const scaledHeight = image.height * zoom.scale;\r\n      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\r\n      image.maxX = -image.minX;\r\n      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\r\n      image.maxY = -image.minY;\r\n      image.touchesCurrent.x = evCache.length > 0 ? evCache[0].pageX : e.pageX;\r\n      image.touchesCurrent.y = evCache.length > 0 ? evCache[0].pageY : e.pageY;\r\n      const touchesDiff = Math.max(Math.abs(image.touchesCurrent.x - image.touchesStart.x), Math.abs(image.touchesCurrent.y - image.touchesStart.y));\r\n      if (touchesDiff > 5) {\r\n        swiper.allowClick = false;\r\n      }\r\n      if (!image.isMoved && !isScaling) {\r\n        if (swiper.isHorizontal() && (Math.floor(image.minX) === Math.floor(image.startX) && image.touchesCurrent.x < image.touchesStart.x || Math.floor(image.maxX) === Math.floor(image.startX) && image.touchesCurrent.x > image.touchesStart.x)) {\r\n          image.isTouched = false;\r\n          allowTouchMove();\r\n          return;\r\n        }\r\n        if (!swiper.isHorizontal() && (Math.floor(image.minY) === Math.floor(image.startY) && image.touchesCurrent.y < image.touchesStart.y || Math.floor(image.maxY) === Math.floor(image.startY) && image.touchesCurrent.y > image.touchesStart.y)) {\r\n          image.isTouched = false;\r\n          allowTouchMove();\r\n          return;\r\n        }\r\n      }\r\n      if (e.cancelable) {\r\n        e.preventDefault();\r\n      }\r\n      e.stopPropagation();\r\n      preventTouchMove();\r\n      image.isMoved = true;\r\n      const scaleRatio = (zoom.scale - currentScale) / (gesture.maxRatio - swiper.params.zoom.minRatio);\r\n      const {\r\n        originX,\r\n        originY\r\n      } = gesture;\r\n      image.currentX = image.touchesCurrent.x - image.touchesStart.x + image.startX + scaleRatio * (image.width - originX * 2);\r\n      image.currentY = image.touchesCurrent.y - image.touchesStart.y + image.startY + scaleRatio * (image.height - originY * 2);\r\n      if (image.currentX < image.minX) {\r\n        image.currentX = image.minX + 1 - (image.minX - image.currentX + 1) ** 0.8;\r\n      }\r\n      if (image.currentX > image.maxX) {\r\n        image.currentX = image.maxX - 1 + (image.currentX - image.maxX + 1) ** 0.8;\r\n      }\r\n      if (image.currentY < image.minY) {\r\n        image.currentY = image.minY + 1 - (image.minY - image.currentY + 1) ** 0.8;\r\n      }\r\n      if (image.currentY > image.maxY) {\r\n        image.currentY = image.maxY - 1 + (image.currentY - image.maxY + 1) ** 0.8;\r\n      }\r\n\r\n      // Velocity\r\n      if (!velocity.prevPositionX) velocity.prevPositionX = image.touchesCurrent.x;\r\n      if (!velocity.prevPositionY) velocity.prevPositionY = image.touchesCurrent.y;\r\n      if (!velocity.prevTime) velocity.prevTime = Date.now();\r\n      velocity.x = (image.touchesCurrent.x - velocity.prevPositionX) / (Date.now() - velocity.prevTime) / 2;\r\n      velocity.y = (image.touchesCurrent.y - velocity.prevPositionY) / (Date.now() - velocity.prevTime) / 2;\r\n      if (Math.abs(image.touchesCurrent.x - velocity.prevPositionX) < 2) velocity.x = 0;\r\n      if (Math.abs(image.touchesCurrent.y - velocity.prevPositionY) < 2) velocity.y = 0;\r\n      velocity.prevPositionX = image.touchesCurrent.x;\r\n      velocity.prevPositionY = image.touchesCurrent.y;\r\n      velocity.prevTime = Date.now();\r\n      gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\r\n    }\r\n    function onTouchEnd() {\r\n      const zoom = swiper.zoom;\r\n      if (!gesture.imageEl) return;\r\n      if (!image.isTouched || !image.isMoved) {\r\n        image.isTouched = false;\r\n        image.isMoved = false;\r\n        return;\r\n      }\r\n      image.isTouched = false;\r\n      image.isMoved = false;\r\n      let momentumDurationX = 300;\r\n      let momentumDurationY = 300;\r\n      const momentumDistanceX = velocity.x * momentumDurationX;\r\n      const newPositionX = image.currentX + momentumDistanceX;\r\n      const momentumDistanceY = velocity.y * momentumDurationY;\r\n      const newPositionY = image.currentY + momentumDistanceY;\r\n\r\n      // Fix duration\r\n      if (velocity.x !== 0) momentumDurationX = Math.abs((newPositionX - image.currentX) / velocity.x);\r\n      if (velocity.y !== 0) momentumDurationY = Math.abs((newPositionY - image.currentY) / velocity.y);\r\n      const momentumDuration = Math.max(momentumDurationX, momentumDurationY);\r\n      image.currentX = newPositionX;\r\n      image.currentY = newPositionY;\r\n      // Define if we need image drag\r\n      const scaledWidth = image.width * zoom.scale;\r\n      const scaledHeight = image.height * zoom.scale;\r\n      image.minX = Math.min(gesture.slideWidth / 2 - scaledWidth / 2, 0);\r\n      image.maxX = -image.minX;\r\n      image.minY = Math.min(gesture.slideHeight / 2 - scaledHeight / 2, 0);\r\n      image.maxY = -image.minY;\r\n      image.currentX = Math.max(Math.min(image.currentX, image.maxX), image.minX);\r\n      image.currentY = Math.max(Math.min(image.currentY, image.maxY), image.minY);\r\n      gesture.imageWrapEl.style.transitionDuration = `${momentumDuration}ms`;\r\n      gesture.imageWrapEl.style.transform = `translate3d(${image.currentX}px, ${image.currentY}px,0)`;\r\n    }\r\n    function onTransitionEnd() {\r\n      const zoom = swiper.zoom;\r\n      if (gesture.slideEl && swiper.activeIndex !== swiper.slides.indexOf(gesture.slideEl)) {\r\n        if (gesture.imageEl) {\r\n          gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\r\n        }\r\n        if (gesture.imageWrapEl) {\r\n          gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\r\n        }\r\n        gesture.slideEl.classList.remove(`${swiper.params.zoom.zoomedSlideClass}`);\r\n        zoom.scale = 1;\r\n        currentScale = 1;\r\n        gesture.slideEl = undefined;\r\n        gesture.imageEl = undefined;\r\n        gesture.imageWrapEl = undefined;\r\n        gesture.originX = 0;\r\n        gesture.originY = 0;\r\n      }\r\n    }\r\n    function zoomIn(e) {\r\n      const zoom = swiper.zoom;\r\n      const params = swiper.params.zoom;\r\n      if (!gesture.slideEl) {\r\n        if (e && e.target) {\r\n          gesture.slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n        }\r\n        if (!gesture.slideEl) {\r\n          if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\r\n            gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\r\n          } else {\r\n            gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n          }\r\n        }\r\n        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n        if (imageEl) {\r\n          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n        }\r\n        gesture.imageEl = imageEl;\r\n        if (imageEl) {\r\n          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\r\n        } else {\r\n          gesture.imageWrapEl = undefined;\r\n        }\r\n      }\r\n      if (!gesture.imageEl || !gesture.imageWrapEl) return;\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.style.overflow = 'hidden';\r\n        swiper.wrapperEl.style.touchAction = 'none';\r\n      }\r\n      gesture.slideEl.classList.add(`${params.zoomedSlideClass}`);\r\n      let touchX;\r\n      let touchY;\r\n      let offsetX;\r\n      let offsetY;\r\n      let diffX;\r\n      let diffY;\r\n      let translateX;\r\n      let translateY;\r\n      let imageWidth;\r\n      let imageHeight;\r\n      let scaledWidth;\r\n      let scaledHeight;\r\n      let translateMinX;\r\n      let translateMinY;\r\n      let translateMaxX;\r\n      let translateMaxY;\r\n      let slideWidth;\r\n      let slideHeight;\r\n      if (typeof image.touchesStart.x === 'undefined' && e) {\r\n        touchX = e.pageX;\r\n        touchY = e.pageY;\r\n      } else {\r\n        touchX = image.touchesStart.x;\r\n        touchY = image.touchesStart.y;\r\n      }\r\n      const forceZoomRatio = typeof e === 'number' ? e : null;\r\n      if (currentScale === 1 && forceZoomRatio) {\r\n        touchX = undefined;\r\n        touchY = undefined;\r\n        image.touchesStart.x = undefined;\r\n        image.touchesStart.y = undefined;\r\n      }\r\n      const maxRatio = getMaxRatio();\r\n      zoom.scale = forceZoomRatio || maxRatio;\r\n      currentScale = forceZoomRatio || maxRatio;\r\n      if (e && !(currentScale === 1 && forceZoomRatio)) {\r\n        slideWidth = gesture.slideEl.offsetWidth;\r\n        slideHeight = gesture.slideEl.offsetHeight;\r\n        offsetX = elementOffset(gesture.slideEl).left + window.scrollX;\r\n        offsetY = elementOffset(gesture.slideEl).top + window.scrollY;\r\n        diffX = offsetX + slideWidth / 2 - touchX;\r\n        diffY = offsetY + slideHeight / 2 - touchY;\r\n        imageWidth = gesture.imageEl.offsetWidth || gesture.imageEl.clientWidth;\r\n        imageHeight = gesture.imageEl.offsetHeight || gesture.imageEl.clientHeight;\r\n        scaledWidth = imageWidth * zoom.scale;\r\n        scaledHeight = imageHeight * zoom.scale;\r\n        translateMinX = Math.min(slideWidth / 2 - scaledWidth / 2, 0);\r\n        translateMinY = Math.min(slideHeight / 2 - scaledHeight / 2, 0);\r\n        translateMaxX = -translateMinX;\r\n        translateMaxY = -translateMinY;\r\n        translateX = diffX * zoom.scale;\r\n        translateY = diffY * zoom.scale;\r\n        if (translateX < translateMinX) {\r\n          translateX = translateMinX;\r\n        }\r\n        if (translateX > translateMaxX) {\r\n          translateX = translateMaxX;\r\n        }\r\n        if (translateY < translateMinY) {\r\n          translateY = translateMinY;\r\n        }\r\n        if (translateY > translateMaxY) {\r\n          translateY = translateMaxY;\r\n        }\r\n      } else {\r\n        translateX = 0;\r\n        translateY = 0;\r\n      }\r\n      if (forceZoomRatio && zoom.scale === 1) {\r\n        gesture.originX = 0;\r\n        gesture.originY = 0;\r\n      }\r\n      gesture.imageWrapEl.style.transitionDuration = '300ms';\r\n      gesture.imageWrapEl.style.transform = `translate3d(${translateX}px, ${translateY}px,0)`;\r\n      gesture.imageEl.style.transitionDuration = '300ms';\r\n      gesture.imageEl.style.transform = `translate3d(0,0,0) scale(${zoom.scale})`;\r\n    }\r\n    function zoomOut() {\r\n      const zoom = swiper.zoom;\r\n      const params = swiper.params.zoom;\r\n      if (!gesture.slideEl) {\r\n        if (swiper.params.virtual && swiper.params.virtual.enabled && swiper.virtual) {\r\n          gesture.slideEl = elementChildren(swiper.slidesEl, `.${swiper.params.slideActiveClass}`)[0];\r\n        } else {\r\n          gesture.slideEl = swiper.slides[swiper.activeIndex];\r\n        }\r\n        let imageEl = gesture.slideEl.querySelector(`.${params.containerClass}`);\r\n        if (imageEl) {\r\n          imageEl = imageEl.querySelectorAll('picture, img, svg, canvas, .swiper-zoom-target')[0];\r\n        }\r\n        gesture.imageEl = imageEl;\r\n        if (imageEl) {\r\n          gesture.imageWrapEl = elementParents(gesture.imageEl, `.${params.containerClass}`)[0];\r\n        } else {\r\n          gesture.imageWrapEl = undefined;\r\n        }\r\n      }\r\n      if (!gesture.imageEl || !gesture.imageWrapEl) return;\r\n      if (swiper.params.cssMode) {\r\n        swiper.wrapperEl.style.overflow = '';\r\n        swiper.wrapperEl.style.touchAction = '';\r\n      }\r\n      zoom.scale = 1;\r\n      currentScale = 1;\r\n      image.touchesStart.x = undefined;\r\n      image.touchesStart.y = undefined;\r\n      gesture.imageWrapEl.style.transitionDuration = '300ms';\r\n      gesture.imageWrapEl.style.transform = 'translate3d(0,0,0)';\r\n      gesture.imageEl.style.transitionDuration = '300ms';\r\n      gesture.imageEl.style.transform = 'translate3d(0,0,0) scale(1)';\r\n      gesture.slideEl.classList.remove(`${params.zoomedSlideClass}`);\r\n      gesture.slideEl = undefined;\r\n      gesture.originX = 0;\r\n      gesture.originY = 0;\r\n    }\r\n\r\n    // Toggle Zoom\r\n    function zoomToggle(e) {\r\n      const zoom = swiper.zoom;\r\n      if (zoom.scale && zoom.scale !== 1) {\r\n        // Zoom Out\r\n        zoomOut();\r\n      } else {\r\n        // Zoom In\r\n        zoomIn(e);\r\n      }\r\n    }\r\n    function getListeners() {\r\n      const passiveListener = swiper.params.passiveListeners ? {\r\n        passive: true,\r\n        capture: false\r\n      } : false;\r\n      const activeListenerWithCapture = swiper.params.passiveListeners ? {\r\n        passive: false,\r\n        capture: true\r\n      } : true;\r\n      return {\r\n        passiveListener,\r\n        activeListenerWithCapture\r\n      };\r\n    }\r\n\r\n    // Attach/Detach Events\r\n    function enable() {\r\n      const zoom = swiper.zoom;\r\n      if (zoom.enabled) return;\r\n      zoom.enabled = true;\r\n      const {\r\n        passiveListener,\r\n        activeListenerWithCapture\r\n      } = getListeners();\r\n\r\n      // Scale image\r\n      swiper.wrapperEl.addEventListener('pointerdown', onGestureStart, passiveListener);\r\n      swiper.wrapperEl.addEventListener('pointermove', onGestureChange, activeListenerWithCapture);\r\n      ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\r\n        swiper.wrapperEl.addEventListener(eventName, onGestureEnd, passiveListener);\r\n      });\r\n\r\n      // Move image\r\n      swiper.wrapperEl.addEventListener('pointermove', onTouchMove, activeListenerWithCapture);\r\n    }\r\n    function disable() {\r\n      const zoom = swiper.zoom;\r\n      if (!zoom.enabled) return;\r\n      zoom.enabled = false;\r\n      const {\r\n        passiveListener,\r\n        activeListenerWithCapture\r\n      } = getListeners();\r\n\r\n      // Scale image\r\n      swiper.wrapperEl.removeEventListener('pointerdown', onGestureStart, passiveListener);\r\n      swiper.wrapperEl.removeEventListener('pointermove', onGestureChange, activeListenerWithCapture);\r\n      ['pointerup', 'pointercancel', 'pointerout'].forEach(eventName => {\r\n        swiper.wrapperEl.removeEventListener(eventName, onGestureEnd, passiveListener);\r\n      });\r\n\r\n      // Move image\r\n      swiper.wrapperEl.removeEventListener('pointermove', onTouchMove, activeListenerWithCapture);\r\n    }\r\n    on('init', () => {\r\n      if (swiper.params.zoom.enabled) {\r\n        enable();\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      disable();\r\n    });\r\n    on('touchStart', (_s, e) => {\r\n      if (!swiper.zoom.enabled) return;\r\n      onTouchStart(e);\r\n    });\r\n    on('touchEnd', (_s, e) => {\r\n      if (!swiper.zoom.enabled) return;\r\n      onTouchEnd();\r\n    });\r\n    on('doubleTap', (_s, e) => {\r\n      if (!swiper.animating && swiper.params.zoom.enabled && swiper.zoom.enabled && swiper.params.zoom.toggle) {\r\n        zoomToggle(e);\r\n      }\r\n    });\r\n    on('transitionEnd', () => {\r\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled) {\r\n        onTransitionEnd();\r\n      }\r\n    });\r\n    on('slideChange', () => {\r\n      if (swiper.zoom.enabled && swiper.params.zoom.enabled && swiper.params.cssMode) {\r\n        onTransitionEnd();\r\n      }\r\n    });\r\n    Object.assign(swiper.zoom, {\r\n      enable,\r\n      disable,\r\n      in: zoomIn,\r\n      out: zoomOut,\r\n      toggle: zoomToggle\r\n    });\r\n  }\r\n\r\n  /* eslint no-bitwise: [\"error\", { \"allow\": [\">>\"] }] */\r\n  function Controller(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      controller: {\r\n        control: undefined,\r\n        inverse: false,\r\n        by: 'slide' // or 'container'\r\n      }\r\n    });\r\n\r\n    swiper.controller = {\r\n      control: undefined\r\n    };\r\n    function LinearSpline(x, y) {\r\n      const binarySearch = function search() {\r\n        let maxIndex;\r\n        let minIndex;\r\n        let guess;\r\n        return (array, val) => {\r\n          minIndex = -1;\r\n          maxIndex = array.length;\r\n          while (maxIndex - minIndex > 1) {\r\n            guess = maxIndex + minIndex >> 1;\r\n            if (array[guess] <= val) {\r\n              minIndex = guess;\r\n            } else {\r\n              maxIndex = guess;\r\n            }\r\n          }\r\n          return maxIndex;\r\n        };\r\n      }();\r\n      this.x = x;\r\n      this.y = y;\r\n      this.lastIndex = x.length - 1;\r\n      // Given an x value (x2), return the expected y2 value:\r\n      // (x1,y1) is the known point before given value,\r\n      // (x3,y3) is the known point after given value.\r\n      let i1;\r\n      let i3;\r\n      this.interpolate = function interpolate(x2) {\r\n        if (!x2) return 0;\r\n\r\n        // Get the indexes of x1 and x3 (the array indexes before and after given x2):\r\n        i3 = binarySearch(this.x, x2);\r\n        i1 = i3 - 1;\r\n\r\n        // We have our indexes i1 & i3, so we can calculate already:\r\n        // y2 := ((x2−x1) × (y3−y1)) ÷ (x3−x1) + y1\r\n        return (x2 - this.x[i1]) * (this.y[i3] - this.y[i1]) / (this.x[i3] - this.x[i1]) + this.y[i1];\r\n      };\r\n      return this;\r\n    }\r\n    function getInterpolateFunction(c) {\r\n      swiper.controller.spline = swiper.params.loop ? new LinearSpline(swiper.slidesGrid, c.slidesGrid) : new LinearSpline(swiper.snapGrid, c.snapGrid);\r\n    }\r\n    function setTranslate(_t, byController) {\r\n      const controlled = swiper.controller.control;\r\n      let multiplier;\r\n      let controlledTranslate;\r\n      const Swiper = swiper.constructor;\r\n      function setControlledTranslate(c) {\r\n        if (c.destroyed) return;\r\n\r\n        // this will create an Interpolate function based on the snapGrids\r\n        // x is the Grid of the scrolled scroller and y will be the controlled scroller\r\n        // it makes sense to create this only once and recall it for the interpolation\r\n        // the function does a lot of value caching for performance\r\n        const translate = swiper.rtlTranslate ? -swiper.translate : swiper.translate;\r\n        if (swiper.params.controller.by === 'slide') {\r\n          getInterpolateFunction(c);\r\n          // i am not sure why the values have to be multiplicated this way, tried to invert the snapGrid\r\n          // but it did not work out\r\n          controlledTranslate = -swiper.controller.spline.interpolate(-translate);\r\n        }\r\n        if (!controlledTranslate || swiper.params.controller.by === 'container') {\r\n          multiplier = (c.maxTranslate() - c.minTranslate()) / (swiper.maxTranslate() - swiper.minTranslate());\r\n          if (Number.isNaN(multiplier) || !Number.isFinite(multiplier)) {\r\n            multiplier = 1;\r\n          }\r\n          controlledTranslate = (translate - swiper.minTranslate()) * multiplier + c.minTranslate();\r\n        }\r\n        if (swiper.params.controller.inverse) {\r\n          controlledTranslate = c.maxTranslate() - controlledTranslate;\r\n        }\r\n        c.updateProgress(controlledTranslate);\r\n        c.setTranslate(controlledTranslate, swiper);\r\n        c.updateActiveIndex();\r\n        c.updateSlidesClasses();\r\n      }\r\n      if (Array.isArray(controlled)) {\r\n        for (let i = 0; i < controlled.length; i += 1) {\r\n          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n            setControlledTranslate(controlled[i]);\r\n          }\r\n        }\r\n      } else if (controlled instanceof Swiper && byController !== controlled) {\r\n        setControlledTranslate(controlled);\r\n      }\r\n    }\r\n    function setTransition(duration, byController) {\r\n      const Swiper = swiper.constructor;\r\n      const controlled = swiper.controller.control;\r\n      let i;\r\n      function setControlledTransition(c) {\r\n        if (c.destroyed) return;\r\n        c.setTransition(duration, swiper);\r\n        if (duration !== 0) {\r\n          c.transitionStart();\r\n          if (c.params.autoHeight) {\r\n            nextTick(() => {\r\n              c.updateAutoHeight();\r\n            });\r\n          }\r\n          elementTransitionEnd(c.wrapperEl, () => {\r\n            if (!controlled) return;\r\n            c.transitionEnd();\r\n          });\r\n        }\r\n      }\r\n      if (Array.isArray(controlled)) {\r\n        for (i = 0; i < controlled.length; i += 1) {\r\n          if (controlled[i] !== byController && controlled[i] instanceof Swiper) {\r\n            setControlledTransition(controlled[i]);\r\n          }\r\n        }\r\n      } else if (controlled instanceof Swiper && byController !== controlled) {\r\n        setControlledTransition(controlled);\r\n      }\r\n    }\r\n    function removeSpline() {\r\n      if (!swiper.controller.control) return;\r\n      if (swiper.controller.spline) {\r\n        swiper.controller.spline = undefined;\r\n        delete swiper.controller.spline;\r\n      }\r\n    }\r\n    on('beforeInit', () => {\r\n      if (typeof window !== 'undefined' && (\r\n      // eslint-disable-line\r\n      typeof swiper.params.controller.control === 'string' || swiper.params.controller.control instanceof HTMLElement)) {\r\n        const controlElements = typeof swiper.params.controller.control === 'string' ? [...document.querySelectorAll(swiper.params.controller.control)] : [swiper.params.controller.control];\r\n        controlElements.forEach(controlElement => {\r\n          if (!swiper.controller.control) swiper.controller.control = [];\r\n          if (controlElement && controlElement.swiper) {\r\n            swiper.controller.control.push(controlElement.swiper);\r\n          } else if (controlElement) {\r\n            const eventName = `${swiper.params.eventsPrefix}init`;\r\n            const onControllerSwiper = e => {\r\n              swiper.controller.control.push(e.detail[0]);\r\n              swiper.update();\r\n              controlElement.removeEventListener(eventName, onControllerSwiper);\r\n            };\r\n            controlElement.addEventListener(eventName, onControllerSwiper);\r\n          }\r\n        });\r\n        return;\r\n      }\r\n      swiper.controller.control = swiper.params.controller.control;\r\n    });\r\n    on('update', () => {\r\n      removeSpline();\r\n    });\r\n    on('resize', () => {\r\n      removeSpline();\r\n    });\r\n    on('observerUpdate', () => {\r\n      removeSpline();\r\n    });\r\n    on('setTranslate', (_s, translate, byController) => {\r\n      if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n      swiper.controller.setTranslate(translate, byController);\r\n    });\r\n    on('setTransition', (_s, duration, byController) => {\r\n      if (!swiper.controller.control || swiper.controller.control.destroyed) return;\r\n      swiper.controller.setTransition(duration, byController);\r\n    });\r\n    Object.assign(swiper.controller, {\r\n      setTranslate,\r\n      setTransition\r\n    });\r\n  }\r\n\r\n  function A11y(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      a11y: {\r\n        enabled: true,\r\n        notificationClass: 'swiper-notification',\r\n        prevSlideMessage: 'Previous slide',\r\n        nextSlideMessage: 'Next slide',\r\n        firstSlideMessage: 'This is the first slide',\r\n        lastSlideMessage: 'This is the last slide',\r\n        paginationBulletMessage: 'Go to slide {{index}}',\r\n        slideLabelMessage: '{{index}} / {{slidesLength}}',\r\n        containerMessage: null,\r\n        containerRoleDescriptionMessage: null,\r\n        itemRoleDescriptionMessage: null,\r\n        slideRole: 'group',\r\n        id: null,\r\n        scrollOnFocus: true\r\n      }\r\n    });\r\n    swiper.a11y = {\r\n      clicked: false\r\n    };\r\n    let liveRegion = null;\r\n    let preventFocusHandler;\r\n    let focusTargetSlideEl;\r\n    let visibilityChangedTimestamp = new Date().getTime();\r\n    function notify(message) {\r\n      const notification = liveRegion;\r\n      if (notification.length === 0) return;\r\n      notification.innerHTML = '';\r\n      notification.innerHTML = message;\r\n    }\r\n    function getRandomNumber(size) {\r\n      if (size === void 0) {\r\n        size = 16;\r\n      }\r\n      const randomChar = () => Math.round(16 * Math.random()).toString(16);\r\n      return 'x'.repeat(size).replace(/x/g, randomChar);\r\n    }\r\n    function makeElFocusable(el) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('tabIndex', '0');\r\n      });\r\n    }\r\n    function makeElNotFocusable(el) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('tabIndex', '-1');\r\n      });\r\n    }\r\n    function addElRole(el, role) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('role', role);\r\n      });\r\n    }\r\n    function addElRoleDescription(el, description) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-roledescription', description);\r\n      });\r\n    }\r\n    function addElControls(el, controls) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-controls', controls);\r\n      });\r\n    }\r\n    function addElLabel(el, label) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-label', label);\r\n      });\r\n    }\r\n    function addElId(el, id) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('id', id);\r\n      });\r\n    }\r\n    function addElLive(el, live) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-live', live);\r\n      });\r\n    }\r\n    function disableEl(el) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-disabled', true);\r\n      });\r\n    }\r\n    function enableEl(el) {\r\n      el = makeElementsArray(el);\r\n      el.forEach(subEl => {\r\n        subEl.setAttribute('aria-disabled', false);\r\n      });\r\n    }\r\n    function onEnterOrSpaceKey(e) {\r\n      if (e.keyCode !== 13 && e.keyCode !== 32) return;\r\n      const params = swiper.params.a11y;\r\n      const targetEl = e.target;\r\n      if (swiper.pagination && swiper.pagination.el && (targetEl === swiper.pagination.el || swiper.pagination.el.contains(e.target))) {\r\n        if (!e.target.matches(classesToSelector(swiper.params.pagination.bulletClass))) return;\r\n      }\r\n      if (swiper.navigation && swiper.navigation.prevEl && swiper.navigation.nextEl) {\r\n        const prevEls = makeElementsArray(swiper.navigation.prevEl);\r\n        const nextEls = makeElementsArray(swiper.navigation.nextEl);\r\n        if (nextEls.includes(targetEl)) {\r\n          if (!(swiper.isEnd && !swiper.params.loop)) {\r\n            swiper.slideNext();\r\n          }\r\n          if (swiper.isEnd) {\r\n            notify(params.lastSlideMessage);\r\n          } else {\r\n            notify(params.nextSlideMessage);\r\n          }\r\n        }\r\n        if (prevEls.includes(targetEl)) {\r\n          if (!(swiper.isBeginning && !swiper.params.loop)) {\r\n            swiper.slidePrev();\r\n          }\r\n          if (swiper.isBeginning) {\r\n            notify(params.firstSlideMessage);\r\n          } else {\r\n            notify(params.prevSlideMessage);\r\n          }\r\n        }\r\n      }\r\n      if (swiper.pagination && targetEl.matches(classesToSelector(swiper.params.pagination.bulletClass))) {\r\n        targetEl.click();\r\n      }\r\n    }\r\n    function updateNavigation() {\r\n      if (swiper.params.loop || swiper.params.rewind || !swiper.navigation) return;\r\n      const {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation;\r\n      if (prevEl) {\r\n        if (swiper.isBeginning) {\r\n          disableEl(prevEl);\r\n          makeElNotFocusable(prevEl);\r\n        } else {\r\n          enableEl(prevEl);\r\n          makeElFocusable(prevEl);\r\n        }\r\n      }\r\n      if (nextEl) {\r\n        if (swiper.isEnd) {\r\n          disableEl(nextEl);\r\n          makeElNotFocusable(nextEl);\r\n        } else {\r\n          enableEl(nextEl);\r\n          makeElFocusable(nextEl);\r\n        }\r\n      }\r\n    }\r\n    function hasPagination() {\r\n      return swiper.pagination && swiper.pagination.bullets && swiper.pagination.bullets.length;\r\n    }\r\n    function hasClickablePagination() {\r\n      return hasPagination() && swiper.params.pagination.clickable;\r\n    }\r\n    function updatePagination() {\r\n      const params = swiper.params.a11y;\r\n      if (!hasPagination()) return;\r\n      swiper.pagination.bullets.forEach(bulletEl => {\r\n        if (swiper.params.pagination.clickable) {\r\n          makeElFocusable(bulletEl);\r\n          if (!swiper.params.pagination.renderBullet) {\r\n            addElRole(bulletEl, 'button');\r\n            addElLabel(bulletEl, params.paginationBulletMessage.replace(/\\{\\{index\\}\\}/, elementIndex(bulletEl) + 1));\r\n          }\r\n        }\r\n        if (bulletEl.matches(classesToSelector(swiper.params.pagination.bulletActiveClass))) {\r\n          bulletEl.setAttribute('aria-current', 'true');\r\n        } else {\r\n          bulletEl.removeAttribute('aria-current');\r\n        }\r\n      });\r\n    }\r\n    const initNavEl = (el, wrapperId, message) => {\r\n      makeElFocusable(el);\r\n      if (el.tagName !== 'BUTTON') {\r\n        addElRole(el, 'button');\r\n        el.addEventListener('keydown', onEnterOrSpaceKey);\r\n      }\r\n      addElLabel(el, message);\r\n      addElControls(el, wrapperId);\r\n    };\r\n    const handlePointerDown = e => {\r\n      if (focusTargetSlideEl && focusTargetSlideEl !== e.target && !focusTargetSlideEl.contains(e.target)) {\r\n        preventFocusHandler = true;\r\n      }\r\n      swiper.a11y.clicked = true;\r\n    };\r\n    const handlePointerUp = () => {\r\n      preventFocusHandler = false;\r\n      requestAnimationFrame(() => {\r\n        requestAnimationFrame(() => {\r\n          if (!swiper.destroyed) {\r\n            swiper.a11y.clicked = false;\r\n          }\r\n        });\r\n      });\r\n    };\r\n    const onVisibilityChange = e => {\r\n      visibilityChangedTimestamp = new Date().getTime();\r\n    };\r\n    const handleFocus = e => {\r\n      if (swiper.a11y.clicked || !swiper.params.a11y.scrollOnFocus) return;\r\n      if (new Date().getTime() - visibilityChangedTimestamp < 100) return;\r\n      const slideEl = e.target.closest(`.${swiper.params.slideClass}, swiper-slide`);\r\n      if (!slideEl || !swiper.slides.includes(slideEl)) return;\r\n      focusTargetSlideEl = slideEl;\r\n      const isActive = swiper.slides.indexOf(slideEl) === swiper.activeIndex;\r\n      const isVisible = swiper.params.watchSlidesProgress && swiper.visibleSlides && swiper.visibleSlides.includes(slideEl);\r\n      if (isActive || isVisible) return;\r\n      if (e.sourceCapabilities && e.sourceCapabilities.firesTouchEvents) return;\r\n      if (swiper.isHorizontal()) {\r\n        swiper.el.scrollLeft = 0;\r\n      } else {\r\n        swiper.el.scrollTop = 0;\r\n      }\r\n      requestAnimationFrame(() => {\r\n        if (preventFocusHandler) return;\r\n        if (swiper.params.loop) {\r\n          swiper.slideToLoop(parseInt(slideEl.getAttribute('data-swiper-slide-index')), 0);\r\n        } else {\r\n          swiper.slideTo(swiper.slides.indexOf(slideEl), 0);\r\n        }\r\n        preventFocusHandler = false;\r\n      });\r\n    };\r\n    const initSlides = () => {\r\n      const params = swiper.params.a11y;\r\n      if (params.itemRoleDescriptionMessage) {\r\n        addElRoleDescription(swiper.slides, params.itemRoleDescriptionMessage);\r\n      }\r\n      if (params.slideRole) {\r\n        addElRole(swiper.slides, params.slideRole);\r\n      }\r\n      const slidesLength = swiper.slides.length;\r\n      if (params.slideLabelMessage) {\r\n        swiper.slides.forEach((slideEl, index) => {\r\n          const slideIndex = swiper.params.loop ? parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10) : index;\r\n          const ariaLabelMessage = params.slideLabelMessage.replace(/\\{\\{index\\}\\}/, slideIndex + 1).replace(/\\{\\{slidesLength\\}\\}/, slidesLength);\r\n          addElLabel(slideEl, ariaLabelMessage);\r\n        });\r\n      }\r\n    };\r\n    const init = () => {\r\n      const params = swiper.params.a11y;\r\n      swiper.el.append(liveRegion);\r\n\r\n      // Container\r\n      const containerEl = swiper.el;\r\n      if (params.containerRoleDescriptionMessage) {\r\n        addElRoleDescription(containerEl, params.containerRoleDescriptionMessage);\r\n      }\r\n      if (params.containerMessage) {\r\n        addElLabel(containerEl, params.containerMessage);\r\n      }\r\n\r\n      // Wrapper\r\n      const wrapperEl = swiper.wrapperEl;\r\n      const wrapperId = params.id || wrapperEl.getAttribute('id') || `swiper-wrapper-${getRandomNumber(16)}`;\r\n      const live = swiper.params.autoplay && swiper.params.autoplay.enabled ? 'off' : 'polite';\r\n      addElId(wrapperEl, wrapperId);\r\n      addElLive(wrapperEl, live);\r\n\r\n      // Slide\r\n      initSlides();\r\n\r\n      // Navigation\r\n      let {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation ? swiper.navigation : {};\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      if (nextEl) {\r\n        nextEl.forEach(el => initNavEl(el, wrapperId, params.nextSlideMessage));\r\n      }\r\n      if (prevEl) {\r\n        prevEl.forEach(el => initNavEl(el, wrapperId, params.prevSlideMessage));\r\n      }\r\n\r\n      // Pagination\r\n      if (hasClickablePagination()) {\r\n        const paginationEl = makeElementsArray(swiper.pagination.el);\r\n        paginationEl.forEach(el => {\r\n          el.addEventListener('keydown', onEnterOrSpaceKey);\r\n        });\r\n      }\r\n\r\n      // Tab focus\r\n      const document = getDocument();\r\n      document.addEventListener('visibilitychange', onVisibilityChange);\r\n      swiper.el.addEventListener('focus', handleFocus, true);\r\n      swiper.el.addEventListener('focus', handleFocus, true);\r\n      swiper.el.addEventListener('pointerdown', handlePointerDown, true);\r\n      swiper.el.addEventListener('pointerup', handlePointerUp, true);\r\n    };\r\n    function destroy() {\r\n      if (liveRegion) liveRegion.remove();\r\n      let {\r\n        nextEl,\r\n        prevEl\r\n      } = swiper.navigation ? swiper.navigation : {};\r\n      nextEl = makeElementsArray(nextEl);\r\n      prevEl = makeElementsArray(prevEl);\r\n      if (nextEl) {\r\n        nextEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\r\n      }\r\n      if (prevEl) {\r\n        prevEl.forEach(el => el.removeEventListener('keydown', onEnterOrSpaceKey));\r\n      }\r\n\r\n      // Pagination\r\n      if (hasClickablePagination()) {\r\n        const paginationEl = makeElementsArray(swiper.pagination.el);\r\n        paginationEl.forEach(el => {\r\n          el.removeEventListener('keydown', onEnterOrSpaceKey);\r\n        });\r\n      }\r\n      const document = getDocument();\r\n      document.removeEventListener('visibilitychange', onVisibilityChange);\r\n      // Tab focus\r\n      if (swiper.el && typeof swiper.el !== 'string') {\r\n        swiper.el.removeEventListener('focus', handleFocus, true);\r\n        swiper.el.removeEventListener('pointerdown', handlePointerDown, true);\r\n        swiper.el.removeEventListener('pointerup', handlePointerUp, true);\r\n      }\r\n    }\r\n    on('beforeInit', () => {\r\n      liveRegion = createElement('span', swiper.params.a11y.notificationClass);\r\n      liveRegion.setAttribute('aria-live', 'assertive');\r\n      liveRegion.setAttribute('aria-atomic', 'true');\r\n    });\r\n    on('afterInit', () => {\r\n      if (!swiper.params.a11y.enabled) return;\r\n      init();\r\n    });\r\n    on('slidesLengthChange snapGridLengthChange slidesGridLengthChange', () => {\r\n      if (!swiper.params.a11y.enabled) return;\r\n      initSlides();\r\n    });\r\n    on('fromEdge toEdge afterInit lock unlock', () => {\r\n      if (!swiper.params.a11y.enabled) return;\r\n      updateNavigation();\r\n    });\r\n    on('paginationUpdate', () => {\r\n      if (!swiper.params.a11y.enabled) return;\r\n      updatePagination();\r\n    });\r\n    on('destroy', () => {\r\n      if (!swiper.params.a11y.enabled) return;\r\n      destroy();\r\n    });\r\n  }\r\n\r\n  function History(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      history: {\r\n        enabled: false,\r\n        root: '',\r\n        replaceState: false,\r\n        key: 'slides',\r\n        keepQuery: false\r\n      }\r\n    });\r\n    let initialized = false;\r\n    let paths = {};\r\n    const slugify = text => {\r\n      return text.toString().replace(/\\s+/g, '-').replace(/[^\\w-]+/g, '').replace(/--+/g, '-').replace(/^-+/, '').replace(/-+$/, '');\r\n    };\r\n    const getPathValues = urlOverride => {\r\n      const window = getWindow();\r\n      let location;\r\n      if (urlOverride) {\r\n        location = new URL(urlOverride);\r\n      } else {\r\n        location = window.location;\r\n      }\r\n      const pathArray = location.pathname.slice(1).split('/').filter(part => part !== '');\r\n      const total = pathArray.length;\r\n      const key = pathArray[total - 2];\r\n      const value = pathArray[total - 1];\r\n      return {\r\n        key,\r\n        value\r\n      };\r\n    };\r\n    const setHistory = (key, index) => {\r\n      const window = getWindow();\r\n      if (!initialized || !swiper.params.history.enabled) return;\r\n      let location;\r\n      if (swiper.params.url) {\r\n        location = new URL(swiper.params.url);\r\n      } else {\r\n        location = window.location;\r\n      }\r\n      const slide = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${index}\"]`) : swiper.slides[index];\r\n      let value = slugify(slide.getAttribute('data-history'));\r\n      if (swiper.params.history.root.length > 0) {\r\n        let root = swiper.params.history.root;\r\n        if (root[root.length - 1] === '/') root = root.slice(0, root.length - 1);\r\n        value = `${root}/${key ? `${key}/` : ''}${value}`;\r\n      } else if (!location.pathname.includes(key)) {\r\n        value = `${key ? `${key}/` : ''}${value}`;\r\n      }\r\n      if (swiper.params.history.keepQuery) {\r\n        value += location.search;\r\n      }\r\n      const currentState = window.history.state;\r\n      if (currentState && currentState.value === value) {\r\n        return;\r\n      }\r\n      if (swiper.params.history.replaceState) {\r\n        window.history.replaceState({\r\n          value\r\n        }, null, value);\r\n      } else {\r\n        window.history.pushState({\r\n          value\r\n        }, null, value);\r\n      }\r\n    };\r\n    const scrollToSlide = (speed, value, runCallbacks) => {\r\n      if (value) {\r\n        for (let i = 0, length = swiper.slides.length; i < length; i += 1) {\r\n          const slide = swiper.slides[i];\r\n          const slideHistory = slugify(slide.getAttribute('data-history'));\r\n          if (slideHistory === value) {\r\n            const index = swiper.getSlideIndex(slide);\r\n            swiper.slideTo(index, speed, runCallbacks);\r\n          }\r\n        }\r\n      } else {\r\n        swiper.slideTo(0, speed, runCallbacks);\r\n      }\r\n    };\r\n    const setHistoryPopState = () => {\r\n      paths = getPathValues(swiper.params.url);\r\n      scrollToSlide(swiper.params.speed, paths.value, false);\r\n    };\r\n    const init = () => {\r\n      const window = getWindow();\r\n      if (!swiper.params.history) return;\r\n      if (!window.history || !window.history.pushState) {\r\n        swiper.params.history.enabled = false;\r\n        swiper.params.hashNavigation.enabled = true;\r\n        return;\r\n      }\r\n      initialized = true;\r\n      paths = getPathValues(swiper.params.url);\r\n      if (!paths.key && !paths.value) {\r\n        if (!swiper.params.history.replaceState) {\r\n          window.addEventListener('popstate', setHistoryPopState);\r\n        }\r\n        return;\r\n      }\r\n      scrollToSlide(0, paths.value, swiper.params.runCallbacksOnInit);\r\n      if (!swiper.params.history.replaceState) {\r\n        window.addEventListener('popstate', setHistoryPopState);\r\n      }\r\n    };\r\n    const destroy = () => {\r\n      const window = getWindow();\r\n      if (!swiper.params.history.replaceState) {\r\n        window.removeEventListener('popstate', setHistoryPopState);\r\n      }\r\n    };\r\n    on('init', () => {\r\n      if (swiper.params.history.enabled) {\r\n        init();\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      if (swiper.params.history.enabled) {\r\n        destroy();\r\n      }\r\n    });\r\n    on('transitionEnd _freeModeNoMomentumRelease', () => {\r\n      if (initialized) {\r\n        setHistory(swiper.params.history.key, swiper.activeIndex);\r\n      }\r\n    });\r\n    on('slideChange', () => {\r\n      if (initialized && swiper.params.cssMode) {\r\n        setHistory(swiper.params.history.key, swiper.activeIndex);\r\n      }\r\n    });\r\n  }\r\n\r\n  function HashNavigation(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      emit,\r\n      on\r\n    } = _ref;\r\n    let initialized = false;\r\n    const document = getDocument();\r\n    const window = getWindow();\r\n    extendParams({\r\n      hashNavigation: {\r\n        enabled: false,\r\n        replaceState: false,\r\n        watchState: false,\r\n        getSlideIndex(_s, hash) {\r\n          if (swiper.virtual && swiper.params.virtual.enabled) {\r\n            const slideWithHash = swiper.slides.filter(slideEl => slideEl.getAttribute('data-hash') === hash)[0];\r\n            if (!slideWithHash) return 0;\r\n            const index = parseInt(slideWithHash.getAttribute('data-swiper-slide-index'), 10);\r\n            return index;\r\n          }\r\n          return swiper.getSlideIndex(elementChildren(swiper.slidesEl, `.${swiper.params.slideClass}[data-hash=\"${hash}\"], swiper-slide[data-hash=\"${hash}\"]`)[0]);\r\n        }\r\n      }\r\n    });\r\n    const onHashChange = () => {\r\n      emit('hashChange');\r\n      const newHash = document.location.hash.replace('#', '');\r\n      const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\r\n      const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') : '';\r\n      if (newHash !== activeSlideHash) {\r\n        const newIndex = swiper.params.hashNavigation.getSlideIndex(swiper, newHash);\r\n        if (typeof newIndex === 'undefined' || Number.isNaN(newIndex)) return;\r\n        swiper.slideTo(newIndex);\r\n      }\r\n    };\r\n    const setHash = () => {\r\n      if (!initialized || !swiper.params.hashNavigation.enabled) return;\r\n      const activeSlideEl = swiper.virtual && swiper.params.virtual.enabled ? swiper.slidesEl.querySelector(`[data-swiper-slide-index=\"${swiper.activeIndex}\"]`) : swiper.slides[swiper.activeIndex];\r\n      const activeSlideHash = activeSlideEl ? activeSlideEl.getAttribute('data-hash') || activeSlideEl.getAttribute('data-history') : '';\r\n      if (swiper.params.hashNavigation.replaceState && window.history && window.history.replaceState) {\r\n        window.history.replaceState(null, null, `#${activeSlideHash}` || '');\r\n        emit('hashSet');\r\n      } else {\r\n        document.location.hash = activeSlideHash || '';\r\n        emit('hashSet');\r\n      }\r\n    };\r\n    const init = () => {\r\n      if (!swiper.params.hashNavigation.enabled || swiper.params.history && swiper.params.history.enabled) return;\r\n      initialized = true;\r\n      const hash = document.location.hash.replace('#', '');\r\n      if (hash) {\r\n        const speed = 0;\r\n        const index = swiper.params.hashNavigation.getSlideIndex(swiper, hash);\r\n        swiper.slideTo(index || 0, speed, swiper.params.runCallbacksOnInit, true);\r\n      }\r\n      if (swiper.params.hashNavigation.watchState) {\r\n        window.addEventListener('hashchange', onHashChange);\r\n      }\r\n    };\r\n    const destroy = () => {\r\n      if (swiper.params.hashNavigation.watchState) {\r\n        window.removeEventListener('hashchange', onHashChange);\r\n      }\r\n    };\r\n    on('init', () => {\r\n      if (swiper.params.hashNavigation.enabled) {\r\n        init();\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      if (swiper.params.hashNavigation.enabled) {\r\n        destroy();\r\n      }\r\n    });\r\n    on('transitionEnd _freeModeNoMomentumRelease', () => {\r\n      if (initialized) {\r\n        setHash();\r\n      }\r\n    });\r\n    on('slideChange', () => {\r\n      if (initialized && swiper.params.cssMode) {\r\n        setHash();\r\n      }\r\n    });\r\n  }\r\n\r\n  /* eslint no-underscore-dangle: \"off\" */\r\n  /* eslint no-use-before-define: \"off\" */\r\n  function Autoplay(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on,\r\n      emit,\r\n      params\r\n    } = _ref;\r\n    swiper.autoplay = {\r\n      running: false,\r\n      paused: false,\r\n      timeLeft: 0\r\n    };\r\n    extendParams({\r\n      autoplay: {\r\n        enabled: false,\r\n        delay: 3000,\r\n        waitForTransition: true,\r\n        disableOnInteraction: false,\r\n        stopOnLastSlide: false,\r\n        reverseDirection: false,\r\n        pauseOnMouseEnter: false\r\n      }\r\n    });\r\n    let timeout;\r\n    let raf;\r\n    let autoplayDelayTotal = params && params.autoplay ? params.autoplay.delay : 3000;\r\n    let autoplayDelayCurrent = params && params.autoplay ? params.autoplay.delay : 3000;\r\n    let autoplayTimeLeft;\r\n    let autoplayStartTime = new Date().getTime();\r\n    let wasPaused;\r\n    let isTouched;\r\n    let pausedByTouch;\r\n    let touchStartTimeout;\r\n    let slideChanged;\r\n    let pausedByInteraction;\r\n    let pausedByPointerEnter;\r\n    function onTransitionEnd(e) {\r\n      if (!swiper || swiper.destroyed || !swiper.wrapperEl) return;\r\n      if (e.target !== swiper.wrapperEl) return;\r\n      swiper.wrapperEl.removeEventListener('transitionend', onTransitionEnd);\r\n      if (pausedByPointerEnter || e.detail && e.detail.bySwiperTouchMove) {\r\n        return;\r\n      }\r\n      resume();\r\n    }\r\n    const calcTimeLeft = () => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      if (swiper.autoplay.paused) {\r\n        wasPaused = true;\r\n      } else if (wasPaused) {\r\n        autoplayDelayCurrent = autoplayTimeLeft;\r\n        wasPaused = false;\r\n      }\r\n      const timeLeft = swiper.autoplay.paused ? autoplayTimeLeft : autoplayStartTime + autoplayDelayCurrent - new Date().getTime();\r\n      swiper.autoplay.timeLeft = timeLeft;\r\n      emit('autoplayTimeLeft', timeLeft, timeLeft / autoplayDelayTotal);\r\n      raf = requestAnimationFrame(() => {\r\n        calcTimeLeft();\r\n      });\r\n    };\r\n    const getSlideDelay = () => {\r\n      let activeSlideEl;\r\n      if (swiper.virtual && swiper.params.virtual.enabled) {\r\n        activeSlideEl = swiper.slides.filter(slideEl => slideEl.classList.contains('swiper-slide-active'))[0];\r\n      } else {\r\n        activeSlideEl = swiper.slides[swiper.activeIndex];\r\n      }\r\n      if (!activeSlideEl) return undefined;\r\n      const currentSlideDelay = parseInt(activeSlideEl.getAttribute('data-swiper-autoplay'), 10);\r\n      return currentSlideDelay;\r\n    };\r\n    const run = delayForce => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      cancelAnimationFrame(raf);\r\n      calcTimeLeft();\r\n      let delay = typeof delayForce === 'undefined' ? swiper.params.autoplay.delay : delayForce;\r\n      autoplayDelayTotal = swiper.params.autoplay.delay;\r\n      autoplayDelayCurrent = swiper.params.autoplay.delay;\r\n      const currentSlideDelay = getSlideDelay();\r\n      if (!Number.isNaN(currentSlideDelay) && currentSlideDelay > 0 && typeof delayForce === 'undefined') {\r\n        delay = currentSlideDelay;\r\n        autoplayDelayTotal = currentSlideDelay;\r\n        autoplayDelayCurrent = currentSlideDelay;\r\n      }\r\n      autoplayTimeLeft = delay;\r\n      const speed = swiper.params.speed;\r\n      const proceed = () => {\r\n        if (!swiper || swiper.destroyed) return;\r\n        if (swiper.params.autoplay.reverseDirection) {\r\n          if (!swiper.isBeginning || swiper.params.loop || swiper.params.rewind) {\r\n            swiper.slidePrev(speed, true, true);\r\n            emit('autoplay');\r\n          } else if (!swiper.params.autoplay.stopOnLastSlide) {\r\n            swiper.slideTo(swiper.slides.length - 1, speed, true, true);\r\n            emit('autoplay');\r\n          }\r\n        } else {\r\n          if (!swiper.isEnd || swiper.params.loop || swiper.params.rewind) {\r\n            swiper.slideNext(speed, true, true);\r\n            emit('autoplay');\r\n          } else if (!swiper.params.autoplay.stopOnLastSlide) {\r\n            swiper.slideTo(0, speed, true, true);\r\n            emit('autoplay');\r\n          }\r\n        }\r\n        if (swiper.params.cssMode) {\r\n          autoplayStartTime = new Date().getTime();\r\n          requestAnimationFrame(() => {\r\n            run();\r\n          });\r\n        }\r\n      };\r\n      if (delay > 0) {\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => {\r\n          proceed();\r\n        }, delay);\r\n      } else {\r\n        requestAnimationFrame(() => {\r\n          proceed();\r\n        });\r\n      }\r\n\r\n      // eslint-disable-next-line\r\n      return delay;\r\n    };\r\n    const start = () => {\r\n      autoplayStartTime = new Date().getTime();\r\n      swiper.autoplay.running = true;\r\n      run();\r\n      emit('autoplayStart');\r\n    };\r\n    const stop = () => {\r\n      swiper.autoplay.running = false;\r\n      clearTimeout(timeout);\r\n      cancelAnimationFrame(raf);\r\n      emit('autoplayStop');\r\n    };\r\n    const pause = (internal, reset) => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      clearTimeout(timeout);\r\n      if (!internal) {\r\n        pausedByInteraction = true;\r\n      }\r\n      const proceed = () => {\r\n        emit('autoplayPause');\r\n        if (swiper.params.autoplay.waitForTransition) {\r\n          swiper.wrapperEl.addEventListener('transitionend', onTransitionEnd);\r\n        } else {\r\n          resume();\r\n        }\r\n      };\r\n      swiper.autoplay.paused = true;\r\n      if (reset) {\r\n        if (slideChanged) {\r\n          autoplayTimeLeft = swiper.params.autoplay.delay;\r\n        }\r\n        slideChanged = false;\r\n        proceed();\r\n        return;\r\n      }\r\n      const delay = autoplayTimeLeft || swiper.params.autoplay.delay;\r\n      autoplayTimeLeft = delay - (new Date().getTime() - autoplayStartTime);\r\n      if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop) return;\r\n      if (autoplayTimeLeft < 0) autoplayTimeLeft = 0;\r\n      proceed();\r\n    };\r\n    const resume = () => {\r\n      if (swiper.isEnd && autoplayTimeLeft < 0 && !swiper.params.loop || swiper.destroyed || !swiper.autoplay.running) return;\r\n      autoplayStartTime = new Date().getTime();\r\n      if (pausedByInteraction) {\r\n        pausedByInteraction = false;\r\n        run(autoplayTimeLeft);\r\n      } else {\r\n        run();\r\n      }\r\n      swiper.autoplay.paused = false;\r\n      emit('autoplayResume');\r\n    };\r\n    const onVisibilityChange = () => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      const document = getDocument();\r\n      if (document.visibilityState === 'hidden') {\r\n        pausedByInteraction = true;\r\n        pause(true);\r\n      }\r\n      if (document.visibilityState === 'visible') {\r\n        resume();\r\n      }\r\n    };\r\n    const onPointerEnter = e => {\r\n      if (e.pointerType !== 'mouse') return;\r\n      pausedByInteraction = true;\r\n      pausedByPointerEnter = true;\r\n      if (swiper.animating || swiper.autoplay.paused) return;\r\n      pause(true);\r\n    };\r\n    const onPointerLeave = e => {\r\n      if (e.pointerType !== 'mouse') return;\r\n      pausedByPointerEnter = false;\r\n      if (swiper.autoplay.paused) {\r\n        resume();\r\n      }\r\n    };\r\n    const attachMouseEvents = () => {\r\n      if (swiper.params.autoplay.pauseOnMouseEnter) {\r\n        swiper.el.addEventListener('pointerenter', onPointerEnter);\r\n        swiper.el.addEventListener('pointerleave', onPointerLeave);\r\n      }\r\n    };\r\n    const detachMouseEvents = () => {\r\n      if (swiper.el && typeof swiper.el !== 'string') {\r\n        swiper.el.removeEventListener('pointerenter', onPointerEnter);\r\n        swiper.el.removeEventListener('pointerleave', onPointerLeave);\r\n      }\r\n    };\r\n    const attachDocumentEvents = () => {\r\n      const document = getDocument();\r\n      document.addEventListener('visibilitychange', onVisibilityChange);\r\n    };\r\n    const detachDocumentEvents = () => {\r\n      const document = getDocument();\r\n      document.removeEventListener('visibilitychange', onVisibilityChange);\r\n    };\r\n    on('init', () => {\r\n      if (swiper.params.autoplay.enabled) {\r\n        attachMouseEvents();\r\n        attachDocumentEvents();\r\n        start();\r\n      }\r\n    });\r\n    on('destroy', () => {\r\n      detachMouseEvents();\r\n      detachDocumentEvents();\r\n      if (swiper.autoplay.running) {\r\n        stop();\r\n      }\r\n    });\r\n    on('_freeModeStaticRelease', () => {\r\n      if (pausedByTouch || pausedByInteraction) {\r\n        resume();\r\n      }\r\n    });\r\n    on('_freeModeNoMomentumRelease', () => {\r\n      if (!swiper.params.autoplay.disableOnInteraction) {\r\n        pause(true, true);\r\n      } else {\r\n        stop();\r\n      }\r\n    });\r\n    on('beforeTransitionStart', (_s, speed, internal) => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      if (internal || !swiper.params.autoplay.disableOnInteraction) {\r\n        pause(true, true);\r\n      } else {\r\n        stop();\r\n      }\r\n    });\r\n    on('sliderFirstMove', () => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      if (swiper.params.autoplay.disableOnInteraction) {\r\n        stop();\r\n        return;\r\n      }\r\n      isTouched = true;\r\n      pausedByTouch = false;\r\n      pausedByInteraction = false;\r\n      touchStartTimeout = setTimeout(() => {\r\n        pausedByInteraction = true;\r\n        pausedByTouch = true;\r\n        pause(true);\r\n      }, 200);\r\n    });\r\n    on('touchEnd', () => {\r\n      if (swiper.destroyed || !swiper.autoplay.running || !isTouched) return;\r\n      clearTimeout(touchStartTimeout);\r\n      clearTimeout(timeout);\r\n      if (swiper.params.autoplay.disableOnInteraction) {\r\n        pausedByTouch = false;\r\n        isTouched = false;\r\n        return;\r\n      }\r\n      if (pausedByTouch && swiper.params.cssMode) resume();\r\n      pausedByTouch = false;\r\n      isTouched = false;\r\n    });\r\n    on('slideChange', () => {\r\n      if (swiper.destroyed || !swiper.autoplay.running) return;\r\n      slideChanged = true;\r\n    });\r\n    Object.assign(swiper.autoplay, {\r\n      start,\r\n      stop,\r\n      pause,\r\n      resume\r\n    });\r\n  }\r\n\r\n  function Thumb(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      thumbs: {\r\n        swiper: null,\r\n        multipleActiveThumbs: true,\r\n        autoScrollOffset: 0,\r\n        slideThumbActiveClass: 'swiper-slide-thumb-active',\r\n        thumbsContainerClass: 'swiper-thumbs'\r\n      }\r\n    });\r\n    let initialized = false;\r\n    let swiperCreated = false;\r\n    swiper.thumbs = {\r\n      swiper: null\r\n    };\r\n    function onThumbClick() {\r\n      const thumbsSwiper = swiper.thumbs.swiper;\r\n      if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n      const clickedIndex = thumbsSwiper.clickedIndex;\r\n      const clickedSlide = thumbsSwiper.clickedSlide;\r\n      if (clickedSlide && clickedSlide.classList.contains(swiper.params.thumbs.slideThumbActiveClass)) return;\r\n      if (typeof clickedIndex === 'undefined' || clickedIndex === null) return;\r\n      let slideToIndex;\r\n      if (thumbsSwiper.params.loop) {\r\n        slideToIndex = parseInt(thumbsSwiper.clickedSlide.getAttribute('data-swiper-slide-index'), 10);\r\n      } else {\r\n        slideToIndex = clickedIndex;\r\n      }\r\n      if (swiper.params.loop) {\r\n        swiper.slideToLoop(slideToIndex);\r\n      } else {\r\n        swiper.slideTo(slideToIndex);\r\n      }\r\n    }\r\n    function init() {\r\n      const {\r\n        thumbs: thumbsParams\r\n      } = swiper.params;\r\n      if (initialized) return false;\r\n      initialized = true;\r\n      const SwiperClass = swiper.constructor;\r\n      if (thumbsParams.swiper instanceof SwiperClass) {\r\n        swiper.thumbs.swiper = thumbsParams.swiper;\r\n        Object.assign(swiper.thumbs.swiper.originalParams, {\r\n          watchSlidesProgress: true,\r\n          slideToClickedSlide: false\r\n        });\r\n        Object.assign(swiper.thumbs.swiper.params, {\r\n          watchSlidesProgress: true,\r\n          slideToClickedSlide: false\r\n        });\r\n        swiper.thumbs.swiper.update();\r\n      } else if (isObject(thumbsParams.swiper)) {\r\n        const thumbsSwiperParams = Object.assign({}, thumbsParams.swiper);\r\n        Object.assign(thumbsSwiperParams, {\r\n          watchSlidesProgress: true,\r\n          slideToClickedSlide: false\r\n        });\r\n        swiper.thumbs.swiper = new SwiperClass(thumbsSwiperParams);\r\n        swiperCreated = true;\r\n      }\r\n      swiper.thumbs.swiper.el.classList.add(swiper.params.thumbs.thumbsContainerClass);\r\n      swiper.thumbs.swiper.on('tap', onThumbClick);\r\n      return true;\r\n    }\r\n    function update(initial) {\r\n      const thumbsSwiper = swiper.thumbs.swiper;\r\n      if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n      const slidesPerView = thumbsSwiper.params.slidesPerView === 'auto' ? thumbsSwiper.slidesPerViewDynamic() : thumbsSwiper.params.slidesPerView;\r\n\r\n      // Activate thumbs\r\n      let thumbsToActivate = 1;\r\n      const thumbActiveClass = swiper.params.thumbs.slideThumbActiveClass;\r\n      if (swiper.params.slidesPerView > 1 && !swiper.params.centeredSlides) {\r\n        thumbsToActivate = swiper.params.slidesPerView;\r\n      }\r\n      if (!swiper.params.thumbs.multipleActiveThumbs) {\r\n        thumbsToActivate = 1;\r\n      }\r\n      thumbsToActivate = Math.floor(thumbsToActivate);\r\n      thumbsSwiper.slides.forEach(slideEl => slideEl.classList.remove(thumbActiveClass));\r\n      if (thumbsSwiper.params.loop || thumbsSwiper.params.virtual && thumbsSwiper.params.virtual.enabled) {\r\n        for (let i = 0; i < thumbsToActivate; i += 1) {\r\n          elementChildren(thumbsSwiper.slidesEl, `[data-swiper-slide-index=\"${swiper.realIndex + i}\"]`).forEach(slideEl => {\r\n            slideEl.classList.add(thumbActiveClass);\r\n          });\r\n        }\r\n      } else {\r\n        for (let i = 0; i < thumbsToActivate; i += 1) {\r\n          if (thumbsSwiper.slides[swiper.realIndex + i]) {\r\n            thumbsSwiper.slides[swiper.realIndex + i].classList.add(thumbActiveClass);\r\n          }\r\n        }\r\n      }\r\n      const autoScrollOffset = swiper.params.thumbs.autoScrollOffset;\r\n      const useOffset = autoScrollOffset && !thumbsSwiper.params.loop;\r\n      if (swiper.realIndex !== thumbsSwiper.realIndex || useOffset) {\r\n        const currentThumbsIndex = thumbsSwiper.activeIndex;\r\n        let newThumbsIndex;\r\n        let direction;\r\n        if (thumbsSwiper.params.loop) {\r\n          const newThumbsSlide = thumbsSwiper.slides.filter(slideEl => slideEl.getAttribute('data-swiper-slide-index') === `${swiper.realIndex}`)[0];\r\n          newThumbsIndex = thumbsSwiper.slides.indexOf(newThumbsSlide);\r\n          direction = swiper.activeIndex > swiper.previousIndex ? 'next' : 'prev';\r\n        } else {\r\n          newThumbsIndex = swiper.realIndex;\r\n          direction = newThumbsIndex > swiper.previousIndex ? 'next' : 'prev';\r\n        }\r\n        if (useOffset) {\r\n          newThumbsIndex += direction === 'next' ? autoScrollOffset : -1 * autoScrollOffset;\r\n        }\r\n        if (thumbsSwiper.visibleSlidesIndexes && thumbsSwiper.visibleSlidesIndexes.indexOf(newThumbsIndex) < 0) {\r\n          if (thumbsSwiper.params.centeredSlides) {\r\n            if (newThumbsIndex > currentThumbsIndex) {\r\n              newThumbsIndex = newThumbsIndex - Math.floor(slidesPerView / 2) + 1;\r\n            } else {\r\n              newThumbsIndex = newThumbsIndex + Math.floor(slidesPerView / 2) - 1;\r\n            }\r\n          } else if (newThumbsIndex > currentThumbsIndex && thumbsSwiper.params.slidesPerGroup === 1) ;\r\n          thumbsSwiper.slideTo(newThumbsIndex, initial ? 0 : undefined);\r\n        }\r\n      }\r\n    }\r\n    on('beforeInit', () => {\r\n      const {\r\n        thumbs\r\n      } = swiper.params;\r\n      if (!thumbs || !thumbs.swiper) return;\r\n      if (typeof thumbs.swiper === 'string' || thumbs.swiper instanceof HTMLElement) {\r\n        const document = getDocument();\r\n        const getThumbsElementAndInit = () => {\r\n          const thumbsElement = typeof thumbs.swiper === 'string' ? document.querySelector(thumbs.swiper) : thumbs.swiper;\r\n          if (thumbsElement && thumbsElement.swiper) {\r\n            thumbs.swiper = thumbsElement.swiper;\r\n            init();\r\n            update(true);\r\n          } else if (thumbsElement) {\r\n            const eventName = `${swiper.params.eventsPrefix}init`;\r\n            const onThumbsSwiper = e => {\r\n              thumbs.swiper = e.detail[0];\r\n              thumbsElement.removeEventListener(eventName, onThumbsSwiper);\r\n              init();\r\n              update(true);\r\n              thumbs.swiper.update();\r\n              swiper.update();\r\n            };\r\n            thumbsElement.addEventListener(eventName, onThumbsSwiper);\r\n          }\r\n          return thumbsElement;\r\n        };\r\n        const watchForThumbsToAppear = () => {\r\n          if (swiper.destroyed) return;\r\n          const thumbsElement = getThumbsElementAndInit();\r\n          if (!thumbsElement) {\r\n            requestAnimationFrame(watchForThumbsToAppear);\r\n          }\r\n        };\r\n        requestAnimationFrame(watchForThumbsToAppear);\r\n      } else {\r\n        init();\r\n        update(true);\r\n      }\r\n    });\r\n    on('slideChange update resize observerUpdate', () => {\r\n      update();\r\n    });\r\n    on('setTransition', (_s, duration) => {\r\n      const thumbsSwiper = swiper.thumbs.swiper;\r\n      if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n      thumbsSwiper.setTransition(duration);\r\n    });\r\n    on('beforeDestroy', () => {\r\n      const thumbsSwiper = swiper.thumbs.swiper;\r\n      if (!thumbsSwiper || thumbsSwiper.destroyed) return;\r\n      if (swiperCreated) {\r\n        thumbsSwiper.destroy();\r\n      }\r\n    });\r\n    Object.assign(swiper.thumbs, {\r\n      init,\r\n      update\r\n    });\r\n  }\r\n\r\n  function freeMode(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      emit,\r\n      once\r\n    } = _ref;\r\n    extendParams({\r\n      freeMode: {\r\n        enabled: false,\r\n        momentum: true,\r\n        momentumRatio: 1,\r\n        momentumBounce: true,\r\n        momentumBounceRatio: 1,\r\n        momentumVelocityRatio: 1,\r\n        sticky: false,\r\n        minimumVelocity: 0.02\r\n      }\r\n    });\r\n    function onTouchStart() {\r\n      if (swiper.params.cssMode) return;\r\n      const translate = swiper.getTranslate();\r\n      swiper.setTranslate(translate);\r\n      swiper.setTransition(0);\r\n      swiper.touchEventsData.velocities.length = 0;\r\n      swiper.freeMode.onTouchEnd({\r\n        currentPos: swiper.rtl ? swiper.translate : -swiper.translate\r\n      });\r\n    }\r\n    function onTouchMove() {\r\n      if (swiper.params.cssMode) return;\r\n      const {\r\n        touchEventsData: data,\r\n        touches\r\n      } = swiper;\r\n      // Velocity\r\n      if (data.velocities.length === 0) {\r\n        data.velocities.push({\r\n          position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\r\n          time: data.touchStartTime\r\n        });\r\n      }\r\n      data.velocities.push({\r\n        position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\r\n        time: now()\r\n      });\r\n    }\r\n    function onTouchEnd(_ref2) {\r\n      let {\r\n        currentPos\r\n      } = _ref2;\r\n      if (swiper.params.cssMode) return;\r\n      const {\r\n        params,\r\n        wrapperEl,\r\n        rtlTranslate: rtl,\r\n        snapGrid,\r\n        touchEventsData: data\r\n      } = swiper;\r\n      // Time diff\r\n      const touchEndTime = now();\r\n      const timeDiff = touchEndTime - data.touchStartTime;\r\n      if (currentPos < -swiper.minTranslate()) {\r\n        swiper.slideTo(swiper.activeIndex);\r\n        return;\r\n      }\r\n      if (currentPos > -swiper.maxTranslate()) {\r\n        if (swiper.slides.length < snapGrid.length) {\r\n          swiper.slideTo(snapGrid.length - 1);\r\n        } else {\r\n          swiper.slideTo(swiper.slides.length - 1);\r\n        }\r\n        return;\r\n      }\r\n      if (params.freeMode.momentum) {\r\n        if (data.velocities.length > 1) {\r\n          const lastMoveEvent = data.velocities.pop();\r\n          const velocityEvent = data.velocities.pop();\r\n          const distance = lastMoveEvent.position - velocityEvent.position;\r\n          const time = lastMoveEvent.time - velocityEvent.time;\r\n          swiper.velocity = distance / time;\r\n          swiper.velocity /= 2;\r\n          if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\r\n            swiper.velocity = 0;\r\n          }\r\n          // this implies that the user stopped moving a finger then released.\r\n          // There would be no events with distance zero, so the last event is stale.\r\n          if (time > 150 || now() - lastMoveEvent.time > 300) {\r\n            swiper.velocity = 0;\r\n          }\r\n        } else {\r\n          swiper.velocity = 0;\r\n        }\r\n        swiper.velocity *= params.freeMode.momentumVelocityRatio;\r\n        data.velocities.length = 0;\r\n        let momentumDuration = 1000 * params.freeMode.momentumRatio;\r\n        const momentumDistance = swiper.velocity * momentumDuration;\r\n        let newPosition = swiper.translate + momentumDistance;\r\n        if (rtl) newPosition = -newPosition;\r\n        let doBounce = false;\r\n        let afterBouncePosition;\r\n        const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\r\n        let needsLoopFix;\r\n        if (newPosition < swiper.maxTranslate()) {\r\n          if (params.freeMode.momentumBounce) {\r\n            if (newPosition + swiper.maxTranslate() < -bounceAmount) {\r\n              newPosition = swiper.maxTranslate() - bounceAmount;\r\n            }\r\n            afterBouncePosition = swiper.maxTranslate();\r\n            doBounce = true;\r\n            data.allowMomentumBounce = true;\r\n          } else {\r\n            newPosition = swiper.maxTranslate();\r\n          }\r\n          if (params.loop && params.centeredSlides) needsLoopFix = true;\r\n        } else if (newPosition > swiper.minTranslate()) {\r\n          if (params.freeMode.momentumBounce) {\r\n            if (newPosition - swiper.minTranslate() > bounceAmount) {\r\n              newPosition = swiper.minTranslate() + bounceAmount;\r\n            }\r\n            afterBouncePosition = swiper.minTranslate();\r\n            doBounce = true;\r\n            data.allowMomentumBounce = true;\r\n          } else {\r\n            newPosition = swiper.minTranslate();\r\n          }\r\n          if (params.loop && params.centeredSlides) needsLoopFix = true;\r\n        } else if (params.freeMode.sticky) {\r\n          let nextSlide;\r\n          for (let j = 0; j < snapGrid.length; j += 1) {\r\n            if (snapGrid[j] > -newPosition) {\r\n              nextSlide = j;\r\n              break;\r\n            }\r\n          }\r\n          if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\r\n            newPosition = snapGrid[nextSlide];\r\n          } else {\r\n            newPosition = snapGrid[nextSlide - 1];\r\n          }\r\n          newPosition = -newPosition;\r\n        }\r\n        if (needsLoopFix) {\r\n          once('transitionEnd', () => {\r\n            swiper.loopFix();\r\n          });\r\n        }\r\n        // Fix duration\r\n        if (swiper.velocity !== 0) {\r\n          if (rtl) {\r\n            momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\r\n          } else {\r\n            momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\r\n          }\r\n          if (params.freeMode.sticky) {\r\n            // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\r\n            // event, then durations can be 20+ seconds to slide one (or zero!) slides.\r\n            // It's easy to see this when simulating touch with mouse events. To fix this,\r\n            // limit single-slide swipes to the default slide duration. This also has the\r\n            // nice side effect of matching slide speed if the user stopped moving before\r\n            // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\r\n            // For faster swipes, also apply limits (albeit higher ones).\r\n            const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\r\n            const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\r\n            if (moveDistance < currentSlideSize) {\r\n              momentumDuration = params.speed;\r\n            } else if (moveDistance < 2 * currentSlideSize) {\r\n              momentumDuration = params.speed * 1.5;\r\n            } else {\r\n              momentumDuration = params.speed * 2.5;\r\n            }\r\n          }\r\n        } else if (params.freeMode.sticky) {\r\n          swiper.slideToClosest();\r\n          return;\r\n        }\r\n        if (params.freeMode.momentumBounce && doBounce) {\r\n          swiper.updateProgress(afterBouncePosition);\r\n          swiper.setTransition(momentumDuration);\r\n          swiper.setTranslate(newPosition);\r\n          swiper.transitionStart(true, swiper.swipeDirection);\r\n          swiper.animating = true;\r\n          elementTransitionEnd(wrapperEl, () => {\r\n            if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\r\n            emit('momentumBounce');\r\n            swiper.setTransition(params.speed);\r\n            setTimeout(() => {\r\n              swiper.setTranslate(afterBouncePosition);\r\n              elementTransitionEnd(wrapperEl, () => {\r\n                if (!swiper || swiper.destroyed) return;\r\n                swiper.transitionEnd();\r\n              });\r\n            }, 0);\r\n          });\r\n        } else if (swiper.velocity) {\r\n          emit('_freeModeNoMomentumRelease');\r\n          swiper.updateProgress(newPosition);\r\n          swiper.setTransition(momentumDuration);\r\n          swiper.setTranslate(newPosition);\r\n          swiper.transitionStart(true, swiper.swipeDirection);\r\n          if (!swiper.animating) {\r\n            swiper.animating = true;\r\n            elementTransitionEnd(wrapperEl, () => {\r\n              if (!swiper || swiper.destroyed) return;\r\n              swiper.transitionEnd();\r\n            });\r\n          }\r\n        } else {\r\n          swiper.updateProgress(newPosition);\r\n        }\r\n        swiper.updateActiveIndex();\r\n        swiper.updateSlidesClasses();\r\n      } else if (params.freeMode.sticky) {\r\n        swiper.slideToClosest();\r\n        return;\r\n      } else if (params.freeMode) {\r\n        emit('_freeModeNoMomentumRelease');\r\n      }\r\n      if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\r\n        emit('_freeModeStaticRelease');\r\n        swiper.updateProgress();\r\n        swiper.updateActiveIndex();\r\n        swiper.updateSlidesClasses();\r\n      }\r\n    }\r\n    Object.assign(swiper, {\r\n      freeMode: {\r\n        onTouchStart,\r\n        onTouchMove,\r\n        onTouchEnd\r\n      }\r\n    });\r\n  }\r\n\r\n  function Grid(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      grid: {\r\n        rows: 1,\r\n        fill: 'column'\r\n      }\r\n    });\r\n    let slidesNumberEvenToRows;\r\n    let slidesPerRow;\r\n    let numFullColumns;\r\n    let wasMultiRow;\r\n    const getSpaceBetween = () => {\r\n      let spaceBetween = swiper.params.spaceBetween;\r\n      if (typeof spaceBetween === 'string' && spaceBetween.indexOf('%') >= 0) {\r\n        spaceBetween = parseFloat(spaceBetween.replace('%', '')) / 100 * swiper.size;\r\n      } else if (typeof spaceBetween === 'string') {\r\n        spaceBetween = parseFloat(spaceBetween);\r\n      }\r\n      return spaceBetween;\r\n    };\r\n    const initSlides = slides => {\r\n      const {\r\n        slidesPerView\r\n      } = swiper.params;\r\n      const {\r\n        rows,\r\n        fill\r\n      } = swiper.params.grid;\r\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\r\n      numFullColumns = Math.floor(slidesLength / rows);\r\n      if (Math.floor(slidesLength / rows) === slidesLength / rows) {\r\n        slidesNumberEvenToRows = slidesLength;\r\n      } else {\r\n        slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\r\n      }\r\n      if (slidesPerView !== 'auto' && fill === 'row') {\r\n        slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\r\n      }\r\n      slidesPerRow = slidesNumberEvenToRows / rows;\r\n    };\r\n    const unsetSlides = () => {\r\n      if (swiper.slides) {\r\n        swiper.slides.forEach(slide => {\r\n          if (slide.swiperSlideGridSet) {\r\n            slide.style.height = '';\r\n            slide.style[swiper.getDirectionLabel('margin-top')] = '';\r\n          }\r\n        });\r\n      }\r\n    };\r\n    const updateSlide = (i, slide, slides) => {\r\n      const {\r\n        slidesPerGroup\r\n      } = swiper.params;\r\n      const spaceBetween = getSpaceBetween();\r\n      const {\r\n        rows,\r\n        fill\r\n      } = swiper.params.grid;\r\n      const slidesLength = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.slides.length : slides.length;\r\n      // Set slides order\r\n      let newSlideOrderIndex;\r\n      let column;\r\n      let row;\r\n      if (fill === 'row' && slidesPerGroup > 1) {\r\n        const groupIndex = Math.floor(i / (slidesPerGroup * rows));\r\n        const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\r\n        const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\r\n        row = Math.floor(slideIndexInGroup / columnsInGroup);\r\n        column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\r\n        newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\r\n        slide.style.order = newSlideOrderIndex;\r\n      } else if (fill === 'column') {\r\n        column = Math.floor(i / rows);\r\n        row = i - column * rows;\r\n        if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\r\n          row += 1;\r\n          if (row >= rows) {\r\n            row = 0;\r\n            column += 1;\r\n          }\r\n        }\r\n      } else {\r\n        row = Math.floor(i / slidesPerRow);\r\n        column = i - row * slidesPerRow;\r\n      }\r\n      slide.row = row;\r\n      slide.column = column;\r\n      slide.style.height = `calc((100% - ${(rows - 1) * spaceBetween}px) / ${rows})`;\r\n      slide.style[swiper.getDirectionLabel('margin-top')] = row !== 0 ? spaceBetween && `${spaceBetween}px` : '';\r\n      slide.swiperSlideGridSet = true;\r\n    };\r\n    const updateWrapperSize = (slideSize, snapGrid) => {\r\n      const {\r\n        centeredSlides,\r\n        roundLengths\r\n      } = swiper.params;\r\n      const spaceBetween = getSpaceBetween();\r\n      const {\r\n        rows\r\n      } = swiper.params.grid;\r\n      swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\r\n      swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\r\n      if (!swiper.params.cssMode) {\r\n        swiper.wrapperEl.style[swiper.getDirectionLabel('width')] = `${swiper.virtualSize + spaceBetween}px`;\r\n      }\r\n      if (centeredSlides) {\r\n        const newSlidesGrid = [];\r\n        for (let i = 0; i < snapGrid.length; i += 1) {\r\n          let slidesGridItem = snapGrid[i];\r\n          if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\r\n          if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\r\n        }\r\n        snapGrid.splice(0, snapGrid.length);\r\n        snapGrid.push(...newSlidesGrid);\r\n      }\r\n    };\r\n    const onInit = () => {\r\n      wasMultiRow = swiper.params.grid && swiper.params.grid.rows > 1;\r\n    };\r\n    const onUpdate = () => {\r\n      const {\r\n        params,\r\n        el\r\n      } = swiper;\r\n      const isMultiRow = params.grid && params.grid.rows > 1;\r\n      if (wasMultiRow && !isMultiRow) {\r\n        el.classList.remove(`${params.containerModifierClass}grid`, `${params.containerModifierClass}grid-column`);\r\n        numFullColumns = 1;\r\n        swiper.emitContainerClasses();\r\n      } else if (!wasMultiRow && isMultiRow) {\r\n        el.classList.add(`${params.containerModifierClass}grid`);\r\n        if (params.grid.fill === 'column') {\r\n          el.classList.add(`${params.containerModifierClass}grid-column`);\r\n        }\r\n        swiper.emitContainerClasses();\r\n      }\r\n      wasMultiRow = isMultiRow;\r\n    };\r\n    on('init', onInit);\r\n    on('update', onUpdate);\r\n    swiper.grid = {\r\n      initSlides,\r\n      unsetSlides,\r\n      updateSlide,\r\n      updateWrapperSize\r\n    };\r\n  }\r\n\r\n  function appendSlide(slides) {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      slidesEl\r\n    } = swiper;\r\n    if (params.loop) {\r\n      swiper.loopDestroy();\r\n    }\r\n    const appendElement = slideEl => {\r\n      if (typeof slideEl === 'string') {\r\n        const tempDOM = document.createElement('div');\r\n        tempDOM.innerHTML = slideEl;\r\n        slidesEl.append(tempDOM.children[0]);\r\n        tempDOM.innerHTML = '';\r\n      } else {\r\n        slidesEl.append(slideEl);\r\n      }\r\n    };\r\n    if (typeof slides === 'object' && 'length' in slides) {\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        if (slides[i]) appendElement(slides[i]);\r\n      }\r\n    } else {\r\n      appendElement(slides);\r\n    }\r\n    swiper.recalcSlides();\r\n    if (params.loop) {\r\n      swiper.loopCreate();\r\n    }\r\n    if (!params.observer || swiper.isElement) {\r\n      swiper.update();\r\n    }\r\n  }\r\n\r\n  function prependSlide(slides) {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      activeIndex,\r\n      slidesEl\r\n    } = swiper;\r\n    if (params.loop) {\r\n      swiper.loopDestroy();\r\n    }\r\n    let newActiveIndex = activeIndex + 1;\r\n    const prependElement = slideEl => {\r\n      if (typeof slideEl === 'string') {\r\n        const tempDOM = document.createElement('div');\r\n        tempDOM.innerHTML = slideEl;\r\n        slidesEl.prepend(tempDOM.children[0]);\r\n        tempDOM.innerHTML = '';\r\n      } else {\r\n        slidesEl.prepend(slideEl);\r\n      }\r\n    };\r\n    if (typeof slides === 'object' && 'length' in slides) {\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        if (slides[i]) prependElement(slides[i]);\r\n      }\r\n      newActiveIndex = activeIndex + slides.length;\r\n    } else {\r\n      prependElement(slides);\r\n    }\r\n    swiper.recalcSlides();\r\n    if (params.loop) {\r\n      swiper.loopCreate();\r\n    }\r\n    if (!params.observer || swiper.isElement) {\r\n      swiper.update();\r\n    }\r\n    swiper.slideTo(newActiveIndex, 0, false);\r\n  }\r\n\r\n  function addSlide(index, slides) {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      activeIndex,\r\n      slidesEl\r\n    } = swiper;\r\n    let activeIndexBuffer = activeIndex;\r\n    if (params.loop) {\r\n      activeIndexBuffer -= swiper.loopedSlides;\r\n      swiper.loopDestroy();\r\n      swiper.recalcSlides();\r\n    }\r\n    const baseLength = swiper.slides.length;\r\n    if (index <= 0) {\r\n      swiper.prependSlide(slides);\r\n      return;\r\n    }\r\n    if (index >= baseLength) {\r\n      swiper.appendSlide(slides);\r\n      return;\r\n    }\r\n    let newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + 1 : activeIndexBuffer;\r\n    const slidesBuffer = [];\r\n    for (let i = baseLength - 1; i >= index; i -= 1) {\r\n      const currentSlide = swiper.slides[i];\r\n      currentSlide.remove();\r\n      slidesBuffer.unshift(currentSlide);\r\n    }\r\n    if (typeof slides === 'object' && 'length' in slides) {\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        if (slides[i]) slidesEl.append(slides[i]);\r\n      }\r\n      newActiveIndex = activeIndexBuffer > index ? activeIndexBuffer + slides.length : activeIndexBuffer;\r\n    } else {\r\n      slidesEl.append(slides);\r\n    }\r\n    for (let i = 0; i < slidesBuffer.length; i += 1) {\r\n      slidesEl.append(slidesBuffer[i]);\r\n    }\r\n    swiper.recalcSlides();\r\n    if (params.loop) {\r\n      swiper.loopCreate();\r\n    }\r\n    if (!params.observer || swiper.isElement) {\r\n      swiper.update();\r\n    }\r\n    if (params.loop) {\r\n      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\r\n    } else {\r\n      swiper.slideTo(newActiveIndex, 0, false);\r\n    }\r\n  }\r\n\r\n  function removeSlide(slidesIndexes) {\r\n    const swiper = this;\r\n    const {\r\n      params,\r\n      activeIndex\r\n    } = swiper;\r\n    let activeIndexBuffer = activeIndex;\r\n    if (params.loop) {\r\n      activeIndexBuffer -= swiper.loopedSlides;\r\n      swiper.loopDestroy();\r\n    }\r\n    let newActiveIndex = activeIndexBuffer;\r\n    let indexToRemove;\r\n    if (typeof slidesIndexes === 'object' && 'length' in slidesIndexes) {\r\n      for (let i = 0; i < slidesIndexes.length; i += 1) {\r\n        indexToRemove = slidesIndexes[i];\r\n        if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\r\n        if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\r\n      }\r\n      newActiveIndex = Math.max(newActiveIndex, 0);\r\n    } else {\r\n      indexToRemove = slidesIndexes;\r\n      if (swiper.slides[indexToRemove]) swiper.slides[indexToRemove].remove();\r\n      if (indexToRemove < newActiveIndex) newActiveIndex -= 1;\r\n      newActiveIndex = Math.max(newActiveIndex, 0);\r\n    }\r\n    swiper.recalcSlides();\r\n    if (params.loop) {\r\n      swiper.loopCreate();\r\n    }\r\n    if (!params.observer || swiper.isElement) {\r\n      swiper.update();\r\n    }\r\n    if (params.loop) {\r\n      swiper.slideTo(newActiveIndex + swiper.loopedSlides, 0, false);\r\n    } else {\r\n      swiper.slideTo(newActiveIndex, 0, false);\r\n    }\r\n  }\r\n\r\n  function removeAllSlides() {\r\n    const swiper = this;\r\n    const slidesIndexes = [];\r\n    for (let i = 0; i < swiper.slides.length; i += 1) {\r\n      slidesIndexes.push(i);\r\n    }\r\n    swiper.removeSlide(slidesIndexes);\r\n  }\r\n\r\n  function Manipulation(_ref) {\r\n    let {\r\n      swiper\r\n    } = _ref;\r\n    Object.assign(swiper, {\r\n      appendSlide: appendSlide.bind(swiper),\r\n      prependSlide: prependSlide.bind(swiper),\r\n      addSlide: addSlide.bind(swiper),\r\n      removeSlide: removeSlide.bind(swiper),\r\n      removeAllSlides: removeAllSlides.bind(swiper)\r\n    });\r\n  }\r\n\r\n  function effectInit(params) {\r\n    const {\r\n      effect,\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      overwriteParams,\r\n      perspective,\r\n      recreateShadows,\r\n      getEffectParams\r\n    } = params;\r\n    on('beforeInit', () => {\r\n      if (swiper.params.effect !== effect) return;\r\n      swiper.classNames.push(`${swiper.params.containerModifierClass}${effect}`);\r\n      if (perspective && perspective()) {\r\n        swiper.classNames.push(`${swiper.params.containerModifierClass}3d`);\r\n      }\r\n      const overwriteParamsResult = overwriteParams ? overwriteParams() : {};\r\n      Object.assign(swiper.params, overwriteParamsResult);\r\n      Object.assign(swiper.originalParams, overwriteParamsResult);\r\n    });\r\n    on('setTranslate', () => {\r\n      if (swiper.params.effect !== effect) return;\r\n      setTranslate();\r\n    });\r\n    on('setTransition', (_s, duration) => {\r\n      if (swiper.params.effect !== effect) return;\r\n      setTransition(duration);\r\n    });\r\n    on('transitionEnd', () => {\r\n      if (swiper.params.effect !== effect) return;\r\n      if (recreateShadows) {\r\n        if (!getEffectParams || !getEffectParams().slideShadows) return;\r\n        // remove shadows\r\n        swiper.slides.forEach(slideEl => {\r\n          slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => shadowEl.remove());\r\n        });\r\n        // create new one\r\n        recreateShadows();\r\n      }\r\n    });\r\n    let requireUpdateOnVirtual;\r\n    on('virtualUpdate', () => {\r\n      if (swiper.params.effect !== effect) return;\r\n      if (!swiper.slides.length) {\r\n        requireUpdateOnVirtual = true;\r\n      }\r\n      requestAnimationFrame(() => {\r\n        if (requireUpdateOnVirtual && swiper.slides && swiper.slides.length) {\r\n          setTranslate();\r\n          requireUpdateOnVirtual = false;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function effectTarget(effectParams, slideEl) {\r\n    const transformEl = getSlideTransformEl(slideEl);\r\n    if (transformEl !== slideEl) {\r\n      transformEl.style.backfaceVisibility = 'hidden';\r\n      transformEl.style['-webkit-backface-visibility'] = 'hidden';\r\n    }\r\n    return transformEl;\r\n  }\r\n\r\n  function effectVirtualTransitionEnd(_ref) {\r\n    let {\r\n      swiper,\r\n      duration,\r\n      transformElements,\r\n      allSlides\r\n    } = _ref;\r\n    const {\r\n      activeIndex\r\n    } = swiper;\r\n    const getSlide = el => {\r\n      if (!el.parentElement) {\r\n        // assume shadow root\r\n        const slide = swiper.slides.filter(slideEl => slideEl.shadowRoot && slideEl.shadowRoot === el.parentNode)[0];\r\n        return slide;\r\n      }\r\n      return el.parentElement;\r\n    };\r\n    if (swiper.params.virtualTranslate && duration !== 0) {\r\n      let eventTriggered = false;\r\n      let transitionEndTarget;\r\n      if (allSlides) {\r\n        transitionEndTarget = transformElements;\r\n      } else {\r\n        transitionEndTarget = transformElements.filter(transformEl => {\r\n          const el = transformEl.classList.contains('swiper-slide-transform') ? getSlide(transformEl) : transformEl;\r\n          return swiper.getSlideIndex(el) === activeIndex;\r\n        });\r\n      }\r\n      transitionEndTarget.forEach(el => {\r\n        elementTransitionEnd(el, () => {\r\n          if (eventTriggered) return;\r\n          if (!swiper || swiper.destroyed) return;\r\n          eventTriggered = true;\r\n          swiper.animating = false;\r\n          const evt = new window.CustomEvent('transitionend', {\r\n            bubbles: true,\r\n            cancelable: true\r\n          });\r\n          swiper.wrapperEl.dispatchEvent(evt);\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  function EffectFade(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      fadeEffect: {\r\n        crossFade: false\r\n      }\r\n    });\r\n    const setTranslate = () => {\r\n      const {\r\n        slides\r\n      } = swiper;\r\n      const params = swiper.params.fadeEffect;\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        const slideEl = swiper.slides[i];\r\n        const offset = slideEl.swiperSlideOffset;\r\n        let tx = -offset;\r\n        if (!swiper.params.virtualTranslate) tx -= swiper.translate;\r\n        let ty = 0;\r\n        if (!swiper.isHorizontal()) {\r\n          ty = tx;\r\n          tx = 0;\r\n        }\r\n        const slideOpacity = swiper.params.fadeEffect.crossFade ? Math.max(1 - Math.abs(slideEl.progress), 0) : 1 + Math.min(Math.max(slideEl.progress, -1), 0);\r\n        const targetEl = effectTarget(params, slideEl);\r\n        targetEl.style.opacity = slideOpacity;\r\n        targetEl.style.transform = `translate3d(${tx}px, ${ty}px, 0px)`;\r\n      }\r\n    };\r\n    const setTransition = duration => {\r\n      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\r\n      transformElements.forEach(el => {\r\n        el.style.transitionDuration = `${duration}ms`;\r\n      });\r\n      effectVirtualTransitionEnd({\r\n        swiper,\r\n        duration,\r\n        transformElements,\r\n        allSlides: true\r\n      });\r\n    };\r\n    effectInit({\r\n      effect: 'fade',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      overwriteParams: () => ({\r\n        slidesPerView: 1,\r\n        slidesPerGroup: 1,\r\n        watchSlidesProgress: true,\r\n        spaceBetween: 0,\r\n        virtualTranslate: !swiper.params.cssMode\r\n      })\r\n    });\r\n  }\r\n\r\n  function EffectCube(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      cubeEffect: {\r\n        slideShadows: true,\r\n        shadow: true,\r\n        shadowOffset: 20,\r\n        shadowScale: 0.94\r\n      }\r\n    });\r\n    const createSlideShadows = (slideEl, progress, isHorizontal) => {\r\n      let shadowBefore = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n      let shadowAfter = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n      if (!shadowBefore) {\r\n        shadowBefore = createElement('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'left' : 'top'}`.split(' '));\r\n        slideEl.append(shadowBefore);\r\n      }\r\n      if (!shadowAfter) {\r\n        shadowAfter = createElement('div', `swiper-slide-shadow-cube swiper-slide-shadow-${isHorizontal ? 'right' : 'bottom'}`.split(' '));\r\n        slideEl.append(shadowAfter);\r\n      }\r\n      if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\r\n      if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\r\n    };\r\n    const recreateShadows = () => {\r\n      // create new ones\r\n      const isHorizontal = swiper.isHorizontal();\r\n      swiper.slides.forEach(slideEl => {\r\n        const progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n        createSlideShadows(slideEl, progress, isHorizontal);\r\n      });\r\n    };\r\n    const setTranslate = () => {\r\n      const {\r\n        el,\r\n        wrapperEl,\r\n        slides,\r\n        width: swiperWidth,\r\n        height: swiperHeight,\r\n        rtlTranslate: rtl,\r\n        size: swiperSize,\r\n        browser\r\n      } = swiper;\r\n      const r = getRotateFix(swiper);\r\n      const params = swiper.params.cubeEffect;\r\n      const isHorizontal = swiper.isHorizontal();\r\n      const isVirtual = swiper.virtual && swiper.params.virtual.enabled;\r\n      let wrapperRotate = 0;\r\n      let cubeShadowEl;\r\n      if (params.shadow) {\r\n        if (isHorizontal) {\r\n          cubeShadowEl = swiper.wrapperEl.querySelector('.swiper-cube-shadow');\r\n          if (!cubeShadowEl) {\r\n            cubeShadowEl = createElement('div', 'swiper-cube-shadow');\r\n            swiper.wrapperEl.append(cubeShadowEl);\r\n          }\r\n          cubeShadowEl.style.height = `${swiperWidth}px`;\r\n        } else {\r\n          cubeShadowEl = el.querySelector('.swiper-cube-shadow');\r\n          if (!cubeShadowEl) {\r\n            cubeShadowEl = createElement('div', 'swiper-cube-shadow');\r\n            el.append(cubeShadowEl);\r\n          }\r\n        }\r\n      }\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        const slideEl = slides[i];\r\n        let slideIndex = i;\r\n        if (isVirtual) {\r\n          slideIndex = parseInt(slideEl.getAttribute('data-swiper-slide-index'), 10);\r\n        }\r\n        let slideAngle = slideIndex * 90;\r\n        let round = Math.floor(slideAngle / 360);\r\n        if (rtl) {\r\n          slideAngle = -slideAngle;\r\n          round = Math.floor(-slideAngle / 360);\r\n        }\r\n        const progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n        let tx = 0;\r\n        let ty = 0;\r\n        let tz = 0;\r\n        if (slideIndex % 4 === 0) {\r\n          tx = -round * 4 * swiperSize;\r\n          tz = 0;\r\n        } else if ((slideIndex - 1) % 4 === 0) {\r\n          tx = 0;\r\n          tz = -round * 4 * swiperSize;\r\n        } else if ((slideIndex - 2) % 4 === 0) {\r\n          tx = swiperSize + round * 4 * swiperSize;\r\n          tz = swiperSize;\r\n        } else if ((slideIndex - 3) % 4 === 0) {\r\n          tx = -swiperSize;\r\n          tz = 3 * swiperSize + swiperSize * 4 * round;\r\n        }\r\n        if (rtl) {\r\n          tx = -tx;\r\n        }\r\n        if (!isHorizontal) {\r\n          ty = tx;\r\n          tx = 0;\r\n        }\r\n        const transform = `rotateX(${r(isHorizontal ? 0 : -slideAngle)}deg) rotateY(${r(isHorizontal ? slideAngle : 0)}deg) translate3d(${tx}px, ${ty}px, ${tz}px)`;\r\n        if (progress <= 1 && progress > -1) {\r\n          wrapperRotate = slideIndex * 90 + progress * 90;\r\n          if (rtl) wrapperRotate = -slideIndex * 90 - progress * 90;\r\n        }\r\n        slideEl.style.transform = transform;\r\n        if (params.slideShadows) {\r\n          createSlideShadows(slideEl, progress, isHorizontal);\r\n        }\r\n      }\r\n      wrapperEl.style.transformOrigin = `50% 50% -${swiperSize / 2}px`;\r\n      wrapperEl.style['-webkit-transform-origin'] = `50% 50% -${swiperSize / 2}px`;\r\n      if (params.shadow) {\r\n        if (isHorizontal) {\r\n          cubeShadowEl.style.transform = `translate3d(0px, ${swiperWidth / 2 + params.shadowOffset}px, ${-swiperWidth / 2}px) rotateX(89.99deg) rotateZ(0deg) scale(${params.shadowScale})`;\r\n        } else {\r\n          const shadowAngle = Math.abs(wrapperRotate) - Math.floor(Math.abs(wrapperRotate) / 90) * 90;\r\n          const multiplier = 1.5 - (Math.sin(shadowAngle * 2 * Math.PI / 360) / 2 + Math.cos(shadowAngle * 2 * Math.PI / 360) / 2);\r\n          const scale1 = params.shadowScale;\r\n          const scale2 = params.shadowScale / multiplier;\r\n          const offset = params.shadowOffset;\r\n          cubeShadowEl.style.transform = `scale3d(${scale1}, 1, ${scale2}) translate3d(0px, ${swiperHeight / 2 + offset}px, ${-swiperHeight / 2 / scale2}px) rotateX(-89.99deg)`;\r\n        }\r\n      }\r\n      const zFactor = (browser.isSafari || browser.isWebView) && browser.needPerspectiveFix ? -swiperSize / 2 : 0;\r\n      wrapperEl.style.transform = `translate3d(0px,0,${zFactor}px) rotateX(${r(swiper.isHorizontal() ? 0 : wrapperRotate)}deg) rotateY(${r(swiper.isHorizontal() ? -wrapperRotate : 0)}deg)`;\r\n      wrapperEl.style.setProperty('--swiper-cube-translate-z', `${zFactor}px`);\r\n    };\r\n    const setTransition = duration => {\r\n      const {\r\n        el,\r\n        slides\r\n      } = swiper;\r\n      slides.forEach(slideEl => {\r\n        slideEl.style.transitionDuration = `${duration}ms`;\r\n        slideEl.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(subEl => {\r\n          subEl.style.transitionDuration = `${duration}ms`;\r\n        });\r\n      });\r\n      if (swiper.params.cubeEffect.shadow && !swiper.isHorizontal()) {\r\n        const shadowEl = el.querySelector('.swiper-cube-shadow');\r\n        if (shadowEl) shadowEl.style.transitionDuration = `${duration}ms`;\r\n      }\r\n    };\r\n    effectInit({\r\n      effect: 'cube',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      recreateShadows,\r\n      getEffectParams: () => swiper.params.cubeEffect,\r\n      perspective: () => true,\r\n      overwriteParams: () => ({\r\n        slidesPerView: 1,\r\n        slidesPerGroup: 1,\r\n        watchSlidesProgress: true,\r\n        resistanceRatio: 0,\r\n        spaceBetween: 0,\r\n        centeredSlides: false,\r\n        virtualTranslate: true\r\n      })\r\n    });\r\n  }\r\n\r\n  function createShadow(suffix, slideEl, side) {\r\n    const shadowClass = `swiper-slide-shadow${side ? `-${side}` : ''}${suffix ? ` swiper-slide-shadow-${suffix}` : ''}`;\r\n    const shadowContainer = getSlideTransformEl(slideEl);\r\n    let shadowEl = shadowContainer.querySelector(`.${shadowClass.split(' ').join('.')}`);\r\n    if (!shadowEl) {\r\n      shadowEl = createElement('div', shadowClass.split(' '));\r\n      shadowContainer.append(shadowEl);\r\n    }\r\n    return shadowEl;\r\n  }\r\n\r\n  function EffectFlip(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      flipEffect: {\r\n        slideShadows: true,\r\n        limitRotation: true\r\n      }\r\n    });\r\n    const createSlideShadows = (slideEl, progress) => {\r\n      let shadowBefore = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n      let shadowAfter = swiper.isHorizontal() ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n      if (!shadowBefore) {\r\n        shadowBefore = createShadow('flip', slideEl, swiper.isHorizontal() ? 'left' : 'top');\r\n      }\r\n      if (!shadowAfter) {\r\n        shadowAfter = createShadow('flip', slideEl, swiper.isHorizontal() ? 'right' : 'bottom');\r\n      }\r\n      if (shadowBefore) shadowBefore.style.opacity = Math.max(-progress, 0);\r\n      if (shadowAfter) shadowAfter.style.opacity = Math.max(progress, 0);\r\n    };\r\n    const recreateShadows = () => {\r\n      // Set shadows\r\n      swiper.params.flipEffect;\r\n      swiper.slides.forEach(slideEl => {\r\n        let progress = slideEl.progress;\r\n        if (swiper.params.flipEffect.limitRotation) {\r\n          progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n        }\r\n        createSlideShadows(slideEl, progress);\r\n      });\r\n    };\r\n    const setTranslate = () => {\r\n      const {\r\n        slides,\r\n        rtlTranslate: rtl\r\n      } = swiper;\r\n      const params = swiper.params.flipEffect;\r\n      const rotateFix = getRotateFix(swiper);\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        const slideEl = slides[i];\r\n        let progress = slideEl.progress;\r\n        if (swiper.params.flipEffect.limitRotation) {\r\n          progress = Math.max(Math.min(slideEl.progress, 1), -1);\r\n        }\r\n        const offset = slideEl.swiperSlideOffset;\r\n        const rotate = -180 * progress;\r\n        let rotateY = rotate;\r\n        let rotateX = 0;\r\n        let tx = swiper.params.cssMode ? -offset - swiper.translate : -offset;\r\n        let ty = 0;\r\n        if (!swiper.isHorizontal()) {\r\n          ty = tx;\r\n          tx = 0;\r\n          rotateX = -rotateY;\r\n          rotateY = 0;\r\n        } else if (rtl) {\r\n          rotateY = -rotateY;\r\n        }\r\n        slideEl.style.zIndex = -Math.abs(Math.round(progress)) + slides.length;\r\n        if (params.slideShadows) {\r\n          createSlideShadows(slideEl, progress);\r\n        }\r\n        const transform = `translate3d(${tx}px, ${ty}px, 0px) rotateX(${rotateFix(rotateX)}deg) rotateY(${rotateFix(rotateY)}deg)`;\r\n        const targetEl = effectTarget(params, slideEl);\r\n        targetEl.style.transform = transform;\r\n      }\r\n    };\r\n    const setTransition = duration => {\r\n      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\r\n      transformElements.forEach(el => {\r\n        el.style.transitionDuration = `${duration}ms`;\r\n        el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\r\n          shadowEl.style.transitionDuration = `${duration}ms`;\r\n        });\r\n      });\r\n      effectVirtualTransitionEnd({\r\n        swiper,\r\n        duration,\r\n        transformElements\r\n      });\r\n    };\r\n    effectInit({\r\n      effect: 'flip',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      recreateShadows,\r\n      getEffectParams: () => swiper.params.flipEffect,\r\n      perspective: () => true,\r\n      overwriteParams: () => ({\r\n        slidesPerView: 1,\r\n        slidesPerGroup: 1,\r\n        watchSlidesProgress: true,\r\n        spaceBetween: 0,\r\n        virtualTranslate: !swiper.params.cssMode\r\n      })\r\n    });\r\n  }\r\n\r\n  function EffectCoverflow(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      coverflowEffect: {\r\n        rotate: 50,\r\n        stretch: 0,\r\n        depth: 100,\r\n        scale: 1,\r\n        modifier: 1,\r\n        slideShadows: true\r\n      }\r\n    });\r\n    const setTranslate = () => {\r\n      const {\r\n        width: swiperWidth,\r\n        height: swiperHeight,\r\n        slides,\r\n        slidesSizesGrid\r\n      } = swiper;\r\n      const params = swiper.params.coverflowEffect;\r\n      const isHorizontal = swiper.isHorizontal();\r\n      const transform = swiper.translate;\r\n      const center = isHorizontal ? -transform + swiperWidth / 2 : -transform + swiperHeight / 2;\r\n      const rotate = isHorizontal ? params.rotate : -params.rotate;\r\n      const translate = params.depth;\r\n      const r = getRotateFix(swiper);\r\n      // Each slide offset from center\r\n      for (let i = 0, length = slides.length; i < length; i += 1) {\r\n        const slideEl = slides[i];\r\n        const slideSize = slidesSizesGrid[i];\r\n        const slideOffset = slideEl.swiperSlideOffset;\r\n        const centerOffset = (center - slideOffset - slideSize / 2) / slideSize;\r\n        const offsetMultiplier = typeof params.modifier === 'function' ? params.modifier(centerOffset) : centerOffset * params.modifier;\r\n        let rotateY = isHorizontal ? rotate * offsetMultiplier : 0;\r\n        let rotateX = isHorizontal ? 0 : rotate * offsetMultiplier;\r\n        // var rotateZ = 0\r\n        let translateZ = -translate * Math.abs(offsetMultiplier);\r\n        let stretch = params.stretch;\r\n        // Allow percentage to make a relative stretch for responsive sliders\r\n        if (typeof stretch === 'string' && stretch.indexOf('%') !== -1) {\r\n          stretch = parseFloat(params.stretch) / 100 * slideSize;\r\n        }\r\n        let translateY = isHorizontal ? 0 : stretch * offsetMultiplier;\r\n        let translateX = isHorizontal ? stretch * offsetMultiplier : 0;\r\n        let scale = 1 - (1 - params.scale) * Math.abs(offsetMultiplier);\r\n\r\n        // Fix for ultra small values\r\n        if (Math.abs(translateX) < 0.001) translateX = 0;\r\n        if (Math.abs(translateY) < 0.001) translateY = 0;\r\n        if (Math.abs(translateZ) < 0.001) translateZ = 0;\r\n        if (Math.abs(rotateY) < 0.001) rotateY = 0;\r\n        if (Math.abs(rotateX) < 0.001) rotateX = 0;\r\n        if (Math.abs(scale) < 0.001) scale = 0;\r\n        const slideTransform = `translate3d(${translateX}px,${translateY}px,${translateZ}px)  rotateX(${r(rotateX)}deg) rotateY(${r(rotateY)}deg) scale(${scale})`;\r\n        const targetEl = effectTarget(params, slideEl);\r\n        targetEl.style.transform = slideTransform;\r\n        slideEl.style.zIndex = -Math.abs(Math.round(offsetMultiplier)) + 1;\r\n        if (params.slideShadows) {\r\n          // Set shadows\r\n          let shadowBeforeEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-left') : slideEl.querySelector('.swiper-slide-shadow-top');\r\n          let shadowAfterEl = isHorizontal ? slideEl.querySelector('.swiper-slide-shadow-right') : slideEl.querySelector('.swiper-slide-shadow-bottom');\r\n          if (!shadowBeforeEl) {\r\n            shadowBeforeEl = createShadow('coverflow', slideEl, isHorizontal ? 'left' : 'top');\r\n          }\r\n          if (!shadowAfterEl) {\r\n            shadowAfterEl = createShadow('coverflow', slideEl, isHorizontal ? 'right' : 'bottom');\r\n          }\r\n          if (shadowBeforeEl) shadowBeforeEl.style.opacity = offsetMultiplier > 0 ? offsetMultiplier : 0;\r\n          if (shadowAfterEl) shadowAfterEl.style.opacity = -offsetMultiplier > 0 ? -offsetMultiplier : 0;\r\n        }\r\n      }\r\n    };\r\n    const setTransition = duration => {\r\n      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\r\n      transformElements.forEach(el => {\r\n        el.style.transitionDuration = `${duration}ms`;\r\n        el.querySelectorAll('.swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left').forEach(shadowEl => {\r\n          shadowEl.style.transitionDuration = `${duration}ms`;\r\n        });\r\n      });\r\n    };\r\n    effectInit({\r\n      effect: 'coverflow',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      perspective: () => true,\r\n      overwriteParams: () => ({\r\n        watchSlidesProgress: true\r\n      })\r\n    });\r\n  }\r\n\r\n  function EffectCreative(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      creativeEffect: {\r\n        limitProgress: 1,\r\n        shadowPerProgress: false,\r\n        progressMultiplier: 1,\r\n        perspective: true,\r\n        prev: {\r\n          translate: [0, 0, 0],\r\n          rotate: [0, 0, 0],\r\n          opacity: 1,\r\n          scale: 1\r\n        },\r\n        next: {\r\n          translate: [0, 0, 0],\r\n          rotate: [0, 0, 0],\r\n          opacity: 1,\r\n          scale: 1\r\n        }\r\n      }\r\n    });\r\n    const getTranslateValue = value => {\r\n      if (typeof value === 'string') return value;\r\n      return `${value}px`;\r\n    };\r\n    const setTranslate = () => {\r\n      const {\r\n        slides,\r\n        wrapperEl,\r\n        slidesSizesGrid\r\n      } = swiper;\r\n      const params = swiper.params.creativeEffect;\r\n      const {\r\n        progressMultiplier: multiplier\r\n      } = params;\r\n      const isCenteredSlides = swiper.params.centeredSlides;\r\n      const rotateFix = getRotateFix(swiper);\r\n      if (isCenteredSlides) {\r\n        const margin = slidesSizesGrid[0] / 2 - swiper.params.slidesOffsetBefore || 0;\r\n        wrapperEl.style.transform = `translateX(calc(50% - ${margin}px))`;\r\n      }\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        const slideEl = slides[i];\r\n        const slideProgress = slideEl.progress;\r\n        const progress = Math.min(Math.max(slideEl.progress, -params.limitProgress), params.limitProgress);\r\n        let originalProgress = progress;\r\n        if (!isCenteredSlides) {\r\n          originalProgress = Math.min(Math.max(slideEl.originalProgress, -params.limitProgress), params.limitProgress);\r\n        }\r\n        const offset = slideEl.swiperSlideOffset;\r\n        const t = [swiper.params.cssMode ? -offset - swiper.translate : -offset, 0, 0];\r\n        const r = [0, 0, 0];\r\n        let custom = false;\r\n        if (!swiper.isHorizontal()) {\r\n          t[1] = t[0];\r\n          t[0] = 0;\r\n        }\r\n        let data = {\r\n          translate: [0, 0, 0],\r\n          rotate: [0, 0, 0],\r\n          scale: 1,\r\n          opacity: 1\r\n        };\r\n        if (progress < 0) {\r\n          data = params.next;\r\n          custom = true;\r\n        } else if (progress > 0) {\r\n          data = params.prev;\r\n          custom = true;\r\n        }\r\n        // set translate\r\n        t.forEach((value, index) => {\r\n          t[index] = `calc(${value}px + (${getTranslateValue(data.translate[index])} * ${Math.abs(progress * multiplier)}))`;\r\n        });\r\n        // set rotates\r\n        r.forEach((value, index) => {\r\n          let val = data.rotate[index] * Math.abs(progress * multiplier);\r\n          r[index] = val;\r\n        });\r\n        slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\r\n        const translateString = t.join(', ');\r\n        const rotateString = `rotateX(${rotateFix(r[0])}deg) rotateY(${rotateFix(r[1])}deg) rotateZ(${rotateFix(r[2])}deg)`;\r\n        const scaleString = originalProgress < 0 ? `scale(${1 + (1 - data.scale) * originalProgress * multiplier})` : `scale(${1 - (1 - data.scale) * originalProgress * multiplier})`;\r\n        const opacityString = originalProgress < 0 ? 1 + (1 - data.opacity) * originalProgress * multiplier : 1 - (1 - data.opacity) * originalProgress * multiplier;\r\n        const transform = `translate3d(${translateString}) ${rotateString} ${scaleString}`;\r\n\r\n        // Set shadows\r\n        if (custom && data.shadow || !custom) {\r\n          let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\r\n          if (!shadowEl && data.shadow) {\r\n            shadowEl = createShadow('creative', slideEl);\r\n          }\r\n          if (shadowEl) {\r\n            const shadowOpacity = params.shadowPerProgress ? progress * (1 / params.limitProgress) : progress;\r\n            shadowEl.style.opacity = Math.min(Math.max(Math.abs(shadowOpacity), 0), 1);\r\n          }\r\n        }\r\n        const targetEl = effectTarget(params, slideEl);\r\n        targetEl.style.transform = transform;\r\n        targetEl.style.opacity = opacityString;\r\n        if (data.origin) {\r\n          targetEl.style.transformOrigin = data.origin;\r\n        }\r\n      }\r\n    };\r\n    const setTransition = duration => {\r\n      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\r\n      transformElements.forEach(el => {\r\n        el.style.transitionDuration = `${duration}ms`;\r\n        el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\r\n          shadowEl.style.transitionDuration = `${duration}ms`;\r\n        });\r\n      });\r\n      effectVirtualTransitionEnd({\r\n        swiper,\r\n        duration,\r\n        transformElements,\r\n        allSlides: true\r\n      });\r\n    };\r\n    effectInit({\r\n      effect: 'creative',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      perspective: () => swiper.params.creativeEffect.perspective,\r\n      overwriteParams: () => ({\r\n        watchSlidesProgress: true,\r\n        virtualTranslate: !swiper.params.cssMode\r\n      })\r\n    });\r\n  }\r\n\r\n  function EffectCards(_ref) {\r\n    let {\r\n      swiper,\r\n      extendParams,\r\n      on\r\n    } = _ref;\r\n    extendParams({\r\n      cardsEffect: {\r\n        slideShadows: true,\r\n        rotate: true,\r\n        perSlideRotate: 2,\r\n        perSlideOffset: 8\r\n      }\r\n    });\r\n    const setTranslate = () => {\r\n      const {\r\n        slides,\r\n        activeIndex,\r\n        rtlTranslate: rtl\r\n      } = swiper;\r\n      const params = swiper.params.cardsEffect;\r\n      const {\r\n        startTranslate,\r\n        isTouched\r\n      } = swiper.touchEventsData;\r\n      const currentTranslate = rtl ? -swiper.translate : swiper.translate;\r\n      for (let i = 0; i < slides.length; i += 1) {\r\n        const slideEl = slides[i];\r\n        const slideProgress = slideEl.progress;\r\n        const progress = Math.min(Math.max(slideProgress, -4), 4);\r\n        let offset = slideEl.swiperSlideOffset;\r\n        if (swiper.params.centeredSlides && !swiper.params.cssMode) {\r\n          swiper.wrapperEl.style.transform = `translateX(${swiper.minTranslate()}px)`;\r\n        }\r\n        if (swiper.params.centeredSlides && swiper.params.cssMode) {\r\n          offset -= slides[0].swiperSlideOffset;\r\n        }\r\n        let tX = swiper.params.cssMode ? -offset - swiper.translate : -offset;\r\n        let tY = 0;\r\n        const tZ = -100 * Math.abs(progress);\r\n        let scale = 1;\r\n        let rotate = -params.perSlideRotate * progress;\r\n        let tXAdd = params.perSlideOffset - Math.abs(progress) * 0.75;\r\n        const slideIndex = swiper.virtual && swiper.params.virtual.enabled ? swiper.virtual.from + i : i;\r\n        const isSwipeToNext = (slideIndex === activeIndex || slideIndex === activeIndex - 1) && progress > 0 && progress < 1 && (isTouched || swiper.params.cssMode) && currentTranslate < startTranslate;\r\n        const isSwipeToPrev = (slideIndex === activeIndex || slideIndex === activeIndex + 1) && progress < 0 && progress > -1 && (isTouched || swiper.params.cssMode) && currentTranslate > startTranslate;\r\n        if (isSwipeToNext || isSwipeToPrev) {\r\n          const subProgress = (1 - Math.abs((Math.abs(progress) - 0.5) / 0.5)) ** 0.5;\r\n          rotate += -28 * progress * subProgress;\r\n          scale += -0.5 * subProgress;\r\n          tXAdd += 96 * subProgress;\r\n          tY = `${-25 * subProgress * Math.abs(progress)}%`;\r\n        }\r\n        if (progress < 0) {\r\n          // next\r\n          tX = `calc(${tX}px ${rtl ? '-' : '+'} (${tXAdd * Math.abs(progress)}%))`;\r\n        } else if (progress > 0) {\r\n          // prev\r\n          tX = `calc(${tX}px ${rtl ? '-' : '+'} (-${tXAdd * Math.abs(progress)}%))`;\r\n        } else {\r\n          tX = `${tX}px`;\r\n        }\r\n        if (!swiper.isHorizontal()) {\r\n          const prevY = tY;\r\n          tY = tX;\r\n          tX = prevY;\r\n        }\r\n        const scaleString = progress < 0 ? `${1 + (1 - scale) * progress}` : `${1 - (1 - scale) * progress}`;\r\n\r\n        /* eslint-disable */\r\n        const transform = `\r\n        translate3d(${tX}, ${tY}, ${tZ}px)\r\n        rotateZ(${params.rotate ? rtl ? -rotate : rotate : 0}deg)\r\n        scale(${scaleString})\r\n      `;\r\n        /* eslint-enable */\r\n\r\n        if (params.slideShadows) {\r\n          // Set shadows\r\n          let shadowEl = slideEl.querySelector('.swiper-slide-shadow');\r\n          if (!shadowEl) {\r\n            shadowEl = createShadow('cards', slideEl);\r\n          }\r\n          if (shadowEl) shadowEl.style.opacity = Math.min(Math.max((Math.abs(progress) - 0.5) / 0.5, 0), 1);\r\n        }\r\n        slideEl.style.zIndex = -Math.abs(Math.round(slideProgress)) + slides.length;\r\n        const targetEl = effectTarget(params, slideEl);\r\n        targetEl.style.transform = transform;\r\n      }\r\n    };\r\n    const setTransition = duration => {\r\n      const transformElements = swiper.slides.map(slideEl => getSlideTransformEl(slideEl));\r\n      transformElements.forEach(el => {\r\n        el.style.transitionDuration = `${duration}ms`;\r\n        el.querySelectorAll('.swiper-slide-shadow').forEach(shadowEl => {\r\n          shadowEl.style.transitionDuration = `${duration}ms`;\r\n        });\r\n      });\r\n      effectVirtualTransitionEnd({\r\n        swiper,\r\n        duration,\r\n        transformElements\r\n      });\r\n    };\r\n    effectInit({\r\n      effect: 'cards',\r\n      swiper,\r\n      on,\r\n      setTranslate,\r\n      setTransition,\r\n      perspective: () => true,\r\n      overwriteParams: () => ({\r\n        watchSlidesProgress: true,\r\n        virtualTranslate: !swiper.params.cssMode\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Swiper 11.1.11\r\n   * Most modern mobile touch slider and framework with hardware accelerated transitions\r\n   * https://swiperjs.com\r\n   *\r\n   * Copyright 2014-2024 Vladimir Kharlampidi\r\n   *\r\n   * Released under the MIT License\r\n   *\r\n   * Released on: August 28, 2024\r\n   */\r\n\r\n\r\n  // Swiper Class\r\n  const modules = [Virtual, Keyboard, Mousewheel, Navigation, Pagination, Scrollbar, Parallax, Zoom, Controller, A11y, History, HashNavigation, Autoplay, Thumb, freeMode, Grid, Manipulation, EffectFade, EffectCube, EffectFlip, EffectCoverflow, EffectCreative, EffectCards];\r\n  Swiper.use(modules);\r\n\r\n  return Swiper;\r\n\r\n})();\r\n\r\n/**\r\n * Custom scripts.\r\n */\r\n( function( $ ){\r\n    'use strict';\r\n\r\n\t/**\r\n\t * When Document is ready.\r\n\t * Please place only functions calls here.\r\n\t */\r\n\t$( function(){\r\n\t\t// 'object-fit' CSS property fix for IE (node_modules/object-fit-images/dist/ofi.js).\r\n\t\tobjectFitImages( 'img' );\r\n\r\n\t\t// someFunc( 'abc', 5 );\r\n\t} );\r\n\r\n\t/**\r\n\t * Please place all functions declarations below (or in other files).\r\n\t */\r\n\r\n\t/**\r\n\t * Function declaration example:\r\n\t *\r\n\t * Function description.\r\n\t *\r\n\t * @param\t{string}\tparam1\t- param1 description.\r\n\t * @param\t{number}\tparam2\t- param2 description.\r\n\t */\r\n\tfunction someFunc( param1, param2 ){\r\n\t\t// do something here...\r\n\t}\r\n} )( jQuery );\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n\tsetBodyPaddingByHeader();\r\n\r\n\twindow.addEventListener('resize', setBodyPaddingByHeader);\r\n});\r\n\r\nfunction setBodyPaddingByHeader(){\r\n\tconst header = document.querySelector('.header');\r\n\r\n\tif(!header) return false;\r\n\r\n\tlet headerHeight = header.offsetHeight;\r\n\r\n\tdocument.querySelector('body').style.paddingTop = headerHeight + 'px';\r\n}\r\nclass SiteSliders{\r\n\r\n    arrowLeft = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\"><path d=\"M19.7679 7.79444C19.9514 7.97734 20.0971 8.19467 20.1964 8.43398C20.2958 8.67328 20.3469 8.92985 20.3469 9.18897C20.3469 9.44808 20.2958 9.70465 20.1964 9.94395C20.0971 10.1833 19.9514 10.4006 19.7679 10.5835L11.3203 19.0311H35.4375C35.9596 19.0311 36.4604 19.2385 36.8296 19.6077C37.1988 19.9769 37.4063 20.4777 37.4063 20.9998C37.4063 21.522 37.1988 22.0227 36.8296 22.3919C36.4604 22.7612 35.9596 22.9686 35.4375 22.9686H11.3203L19.7679 31.4194C20.1377 31.7893 20.3455 32.2909 20.3455 32.814C20.3455 33.337 20.1377 33.8386 19.7679 34.2085C19.398 34.5784 18.8964 34.7861 18.3734 34.7861C17.8503 34.7861 17.3487 34.5784 16.9788 34.2085L5.16633 22.396C4.98279 22.2131 4.83716 21.9958 4.7378 21.7565C4.63843 21.5171 4.58728 21.2606 4.58728 21.0015C4.58728 20.7424 4.63843 20.4858 4.7378 20.2465C4.83716 20.0072 4.98279 19.7898 5.16633 19.6069L16.9788 7.79444C17.1617 7.6109 17.3791 7.46527 17.6184 7.3659C17.8577 7.26653 18.1142 7.21538 18.3734 7.21538C18.6325 7.21538 18.889 7.26653 19.1284 7.3659C19.3677 7.46527 19.585 7.6109 19.7679 7.79444Z\" fill=\"white\"/></svg>';\r\n\r\n    arrowRight = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"42\" height=\"42\" viewBox=\"0 0 42 42\" fill=\"none\"><path d=\"M22.2322 34.2056C22.0487 34.0227 21.9031 33.8053 21.8037 33.566C21.7043 33.3267 21.6532 33.0701 21.6532 32.811C21.6532 32.5519 21.7043 32.2954 21.8037 32.056C21.9031 31.8167 22.0487 31.5994 22.2322 31.4165L30.6798 22.9689H6.56262C6.04047 22.9689 5.53971 22.7615 5.1705 22.3923C4.80129 22.0231 4.59387 21.5223 4.59387 21.0002C4.59387 20.478 4.80129 19.9773 5.1705 19.6081C5.53971 19.2388 6.04047 19.0314 6.56262 19.0314H30.6798L22.2322 10.5806C21.8624 10.2107 21.6546 9.70908 21.6546 9.18603C21.6546 8.66298 21.8624 8.16135 22.2322 7.7915C22.6021 7.42165 23.1037 7.21387 23.6268 7.21387C24.1498 7.21387 24.6514 7.42165 25.0213 7.7915L36.8338 19.604C37.0173 19.7869 37.163 20.0042 37.2623 20.2435C37.3617 20.4829 37.4128 20.7394 37.4128 20.9985C37.4128 21.2576 37.3617 21.5142 37.2623 21.7535C37.163 21.9928 37.0173 22.2102 36.8338 22.3931L25.0213 34.2056C24.8384 34.3891 24.621 34.5347 24.3817 34.6341C24.1424 34.7335 23.8859 34.7846 23.6268 34.7846C23.3676 34.7846 23.1111 34.7335 22.8718 34.6341C22.6325 34.5347 22.4151 34.3891 22.2322 34.2056Z\" fill=\"white\"/></svg>';\r\n\r\n    constructor(){\r\n        this.initSwiperArrows();\r\n        this.initBannerSlider();\r\n        this.initImageContentSlider();\r\n        this.initCardsSlider();\r\n    }\r\n\r\n    initSwiperArrows(){\r\n        const nextArrows = document.querySelectorAll('.swiper-button-next'),\r\n              prevArrows = document.querySelectorAll('.swiper-button-prev');\r\n\r\n        nextArrows.forEach(item => {\r\n            if(!item.innerHTML) {\r\n                item.innerHTML = this.arrowRight;\r\n            }\r\n        });\r\n\r\n        prevArrows.forEach(item => {\r\n            if(!item.innerHTML) {\r\n                item.innerHTML = this.arrowLeft;\r\n            }\r\n        });\r\n    }\r\n\r\n    initBannerSlider(){\r\n        const bannerSlider = new Swiper('.banner-slider', {\r\n            loop: true,\r\n            speed: 800,\r\n            pagination: {\r\n                el: '.swiper-pagination',\r\n                clickable: true,\r\n            },\r\n            autoplay: {\r\n                delay: 5000,\r\n            },\r\n        });\r\n    }\r\n\r\n    initImageContentSlider(){\r\n        const imageContentSlider = new Swiper('.image-content-slider', {\r\n            loop: true,\r\n            speed: 800,\r\n            pagination: {\r\n                el: '.swiper-pagination',\r\n                clickable: true,\r\n            },\r\n            autoplay: {\r\n                delay: 5000,\r\n            },\r\n        });\r\n    }\r\n\r\n    initCardsSlider(){\r\n        const cardsSlider = new Swiper('.cards-slider .swiper', {\r\n            loop: true,\r\n            speed: 800,\r\n            slidesPerView: 3,\r\n            spaceBetween: 64,\r\n            navigation: {\r\n                nextEl: \".cards-slider .swiper-button-next\",\r\n                prevEl: \".cards-slider .swiper-button-prev\",\r\n            },\r\n        });\r\n    }\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function(){\r\n    const siteSlider = new SiteSliders();\r\n});"]}